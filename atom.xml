<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2016-07-04T22:05:45-07:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[What I learned from The Open Organization]]></title>
    <link href="http://alesnosek.com/blog/2016/07/04/what-i-learned-from-the-open-organization/"/>
    <updated>2016-07-04T21:04:22-07:00</updated>
    <id>http://alesnosek.com/blog/2016/07/04/what-i-learned-from-the-open-organization</id>
    <content type="html"><![CDATA[<p>Red Hat is one of the most successful software companies that makes billions of dollars selling open source software. The book <em>The Open Organization</em> written by Jim Whitehurst, CEO of Red Hat, provides a great insight into the company culture and how things get done at Red Hat. This blogpost lists some of the ideas I learned from this book.</p>

<!-- more -->


<h2>Motivating and inspiring</h2>

<ul>
<li><p>A company should have its purpose. The purpose is not a goal a company wants to achieve but the reason why it exists. For instance, the Red Hat&rsquo;s mission statement says: <em>To be the catalyst in communities of customers, contributors, and partners creating better technology the open source way</em>. This statement enables Red Hat to attract the most talented people that share the believe that open source is fundamentally good for the world.</p></li>
<li><p>It’s important to hire passionate people. When interviewing, ask the candidates what they are passionate about and think how it resonates with the purpose of your company.</p></li>
<li><p>Admitting mistakes builds your credibility and authority to lead.</p></li>
<li><p>As a manager, if you want to have engaged employees, you need to share context and knowledge. Be prepared to explain your decisions.</p></li>
<li><p>As an employee, if your manager is not providing the appropriate context, ask for it. Most bosses are happy to share. They just haven’t yet figured out that it belongs to what they should be doing.</p></li>
</ul>


<h2>Getting things done</h2>

<ul>
<li><p>The Open organization embraces meritocracy where the leaders are chosen based on their contributions to the project, not based on their titles or longevity within the company.</p></li>
<li><p>If your intention is just to stick your nose into every little thing so you can be front and center, people see it. At Red Hat, one of the greatest insults to your ego comes when you put something on one of the internal discussion threads and receive nothing back - neither positive nor negative. That means the team is likely ignoring you, which means you’ve failed in some way.</p></li>
<li><p>In the discussions, people argue and criticize not because they are trying to be difficult, but because they are so passionate about the subject. A debate involving multiple views from different people leads to better decisions made than a meeting where the goal for everyone is to be nice to each other, and every idea is treated as a good one.</p></li>
</ul>


<h2>Setting direction</h2>

<ul>
<li><p>The decisions that came from top down are typically harder to turn into real actions. The more open you make your decision-making process, the easier is to execute the decisions you made.</p></li>
<li><p>Encourage your team to bring up ideas and proposals. Discuss the ideas, regardless of whether you move forward with them.</p></li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Red Hat Summit 2016]]></title>
    <link href="http://alesnosek.com/blog/2016/07/04/red-hat-summit-2016/"/>
    <updated>2016-07-04T20:26:12-07:00</updated>
    <id>http://alesnosek.com/blog/2016/07/04/red-hat-summit-2016</id>
    <content type="html"><![CDATA[<p>I had the great opportunity to visit the Red Hat Summit 2016. Enjoy the photos attached.</p>

<!-- more -->


<p>The Red Hat summit was hosted at the Moscone Center in San Francisco in June 27-30, 2016. I greatly enjoyed the technical presentations by Red Hatters as well as the opportunity to discuss the OpenShift and Red Hat Atomic products directly with the lead engineers. At my company, we&rsquo;re looking at OpenShift+Atomic as the possible next platform to base our product upon. The frank opinions provided by the Red Hat engineers were very useful for our research. Next, take a look at the pics below.</p>

<p>General sessions and the Red Hat party at the end of the summit took place at Moscone Center North:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/redhatsummit2016/20160629_135631.jpg">
<img class="center" src="http://alesnosek.com/images/posts/redhatsummit2016/20160628_134625.jpg"></p>

<p>Breakout sessions were hosted at the Moscone Center West:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/redhatsummit2016/20160630_152426.jpg">
<img class="center" src="http://alesnosek.com/images/posts/redhatsummit2016/20160629_151110.jpg"></p>

<p>The big Red Hat logo at the entrance hall. The red and black colors really catch your eyes:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/redhatsummit2016/20160628_195533.jpg"></p>

<p>Jim Whitehurst, president and CEO of Red Hat, and myself. Check out my <a href="http://alesnosek.com/blog/2016/07/04/what-i-learned-from-the-open-organization">next post</a> to find out, what I learned from the book I&rsquo;m holding in the picture.</p>

<p><img class="center" src="http://alesnosek.com/images/posts/redhatsummit2016/20160629_132338.jpg"></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Deploying Kubernetes on OpenStack using Heat]]></title>
    <link href="http://alesnosek.com/blog/2016/06/26/deploying-kubernetes-on-openstack-using-heat/"/>
    <updated>2016-06-26T08:28:11-07:00</updated>
    <id>http://alesnosek.com/blog/2016/06/26/deploying-kubernetes-on-openstack-using-heat</id>
    <content type="html"><![CDATA[<p>Want to install Kubernetes on top of OpenStack? There are <a href="http://kubernetes.io/docs/getting-started-guides/">many ways</a> how to install a Kubernetes cluster. The upcoming Kubernetes 1.3 release comes with yet another method called <a href="http://kubernetes.io/docs/getting-started-guides/openstack-heat/">OpenStack Heat</a>. In this article, we&rsquo;re going to explore this deployment method when creating a minimum Kubernetes cluster on top of OpenStack.</p>

<!-- more -->


<p>In this tutorial, there are three OpenStack virtual machines involved. The first machine, called the <em>Kubernetes installer</em> machine, is created manually and is used for compiling Kubernetes from source and running the Kubernetes installer. The other two OpenStack machines, <em>Kubernetes master</em> and <em>Kubernetes node</em>, are created during the installation process.</p>

<p>The Kubernetes installer machine and both of the Kubernetes machines run on the CentOS-7-x86_64-GenericCloud-1605 image. You can download this image from the <a href="http://cloud.centos.org/centos/7/images/">CentOS image repository</a>. After I uploaded the CentOS 7 image into OpenStack, it has been assigned ID <code>17e4e783-321c-48c1-9308-6f99d67c5fa6</code> for me.</p>

<h2>Building Kubernetes from source</h2>

<p>First off, let&rsquo;s spin up a Kubernetes installer machine in OpenStack. I recommend using the <code>m1.large</code> flavor that comes with 8 GB of RAM. The compilation of Kubernetes is rather memory intensive.</p>

<p>To ensure consistent and reproducible builds, a Docker container is created at the beginning of the build process and the build proceeds within the container. So, let&rsquo;s quickly setup Docker on our build machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install docker
</span></code></pre></td></tr></table></div></figure>


<p>Configure the Docker service to start on boot and then start it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl <span class="nb">enable </span>docker
</span><span class='line'>sudo systemctl start docker
</span></code></pre></td></tr></table></div></figure>


<p>The Kubernetes build scripts expect that the <code>docker</code> command can successfully contact the Docker daemon. In the default CentOS configuration, the <code>sudo docker</code> is required in order to connect to the <code>/var/run/docker.sock</code> socket which is owned by the user root. To overcome the permission problem, let&rsquo;s create a wrapper script that will invoke the <code>docker</code> command using <code>sudo</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mkdir bin
</span><span class='line'><span class="nb">echo</span> -e <span class="s1">&#39;#!/bin/bash\nexec sudo /usr/bin/docker &quot;$@&quot;&#39;</span> &gt; bin/docker
</span><span class='line'>chmod <span class="m">755</span> bin/docker
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>~/bin:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can test your changes with the <code>docker info</code> command which should work now.</p>

<p>Kubernetes is written in the Go language and its source code is stored in a Git repository. So, let&rsquo;s install the Go language environment and Git:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install golang git
</span></code></pre></td></tr></table></div></figure>


<p>Next we&rsquo;ll clone the Kubernetes Git repository and start the build. The <code>quick-release</code> make target creates a build for the amd64 architecture only and doesn&rsquo;t run any tests.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git clone https://github.com/kubernetes/kubernetes.git
</span><span class='line'><span class="nb">cd </span>kubernetes
</span><span class='line'>make quick-release
</span></code></pre></td></tr></table></div></figure>


<p>After about 15 minutes when the build was successful, you&rsquo;ll find the distribution tarballs <code>kubernetes.tar.gz</code> and <code>kubernetes-salt.tar.gz</code> in the <code>_output/release-tars</code> directory.</p>

<h2>Setting up the OpenStack CLI tools</h2>

<p>The Kubernetes installer uses the OpenStack CLI tools to talk to OpenStack in order to create a Kubernetes cluster. Before you can install the OpenStack CLI tools on CentOS 7, you have to enable the OpenStack Mitaka RPM repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install centos-release-openstack-mitaka
</span></code></pre></td></tr></table></div></figure>


<p>Install the OpenStack CLI tools that are used by the Kubernetes installer when creating a cluster with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install python-openstackclient python-swiftclient python-glanceclient python-novaclient python-heatclient
</span></code></pre></td></tr></table></div></figure>


<p>Next, you have to obtain your OpenStack <code>openrc.sh</code> file and source it into your environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>. openrc.sh
</span></code></pre></td></tr></table></div></figure>


<p>You should be able to talk to OpenStack now. For example, check if you can list the available OpenStack networks with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>openstack network list
</span></code></pre></td></tr></table></div></figure>


<h2>Configuring the Kubernetes installer</h2>

<p>In this section, we&rsquo;re going to more or less follow the instructions found in the chapter <a href="http://kubernetes.io/docs/getting-started-guides/openstack-heat/">OpenStack Heat</a> of the Kubernetes documentation.</p>

<p>When deploying the Kubernetes cluster, the installer executes the following steps that you can find in <code>cluster/openstack-heat/util.sh</code>:</p>

<ul>
<li>Upload the distribution tarballs <code>kubernetes.tar.gz</code> and <code>kubernetes-salt.tar.gz</code> into the <code>kubernetes</code> container in Swift</li>
<li>Upload the virtual machine image for the Kubernetes VMs into Glance</li>
<li>Add the user&rsquo;s keypair into Nova</li>
<li>Run a Heat script in order to create the Kubernetes VMs and put them on a newly created private network. Create a router connecting the private network with an external network.</li>
<li>At the first boot, the Kubernetes VMs download the distribution tarballs from Swift and install the Kubernetes software using Salt</li>
</ul>


<p>Let&rsquo;s create an <code>openstack-heat.sh</code> file with the configuration values for the Kubernetes installer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">KUBERNETES_PROVIDER</span><span class="o">=</span>openstack-heat
</span><span class='line'><span class="nb">export </span><span class="nv">STACK_NAME</span><span class="o">=</span>kubernetes
</span><span class='line'><span class="nb">export </span><span class="nv">KUBERNETES_KEYPAIR_NAME</span><span class="o">=</span>mykeypair
</span><span class='line'><span class="nb">export </span><span class="nv">NUMBER_OF_MINIONS</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">MAX_NUMBER_OF_MINIONS</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">EXTERNAL_NETWORK</span><span class="o">=</span>gateway
</span><span class='line'><span class="nb">export </span><span class="nv">CREATE_IMAGE</span><span class="o">=</span><span class="nb">false</span>
</span><span class='line'><span class="nb">export </span><span class="nv">DOWNLOAD_IMAGE</span><span class="o">=</span><span class="nb">false</span>
</span><span class='line'><span class="nb">export </span><span class="nv">IMAGE_ID</span><span class="o">=</span>17e4e783-321c-48c1-9308-6f99d67c5fa6
</span><span class='line'><span class="nb">export </span><span class="nv">DNS_SERVER</span><span class="o">=</span>10.0.0.10
</span><span class='line'><span class="nb">export </span><span class="nv">SWIFT_SERVER_URL</span><span class="o">=</span>https://openstack.localdomain:13808/swift/v1
</span></code></pre></td></tr></table></div></figure>


<p>The above configuration will create exactly one Kubernetes master and one Kubernetes node. It will inject the keypair called <code>mykeypair</code> into both of them. Note that you have to ensure that the keypair <code>mykeypair</code> exists in Nova before proceeding. You probably want to change the name of the external network to a network available in your OpenStack. We&rsquo;re going to use the same CentOS 7 image for both of our Kubernetes VMs. This CentOS image has already been uploaded into OpenStack and in my case it was assigned ID <code>17e4e783-321c-48c1-9308-6f99d67c5fa6</code>. You also want to change the IP address of the DNS server to something that suits your environment. The Swift server URL is the public endpoint of your Swift server that you can obtain from the output of the command <code>openstack catalog show object-store</code>.</p>

<p>When your configuration is ready, you can source it into your environment:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>. openstack-heat.sh
</span></code></pre></td></tr></table></div></figure>


<p>Next, in my environment I had a problem where the IP range of the private network created by Kubernetes collided with the existing corporate network in my company. I had to directly edit the file <code>cluster/openstack-heat/kubernetes-heat/kubecluster.yaml</code> to change the <code>10.0.0.0/24</code> CIDR to something like <code>10.123.0.0/24</code>. If you don&rsquo;t have this problem you can safely use the default settings.</p>

<p>The Kubernetes cluster can leverage the underlying OpenStack cloud to attach existing Cinder volumes to the Kubernetes pods and to create external loadbalancers. For this to work, Kubernetes has to know how to connect to OpenStack APIs. With regard to the external loadbalancers, we also need to tell Kubernetes what Neutron subnet the loadbalancer&rsquo;s VIP should be placed on.</p>

<p>The OpenStack configuration can be found in the <em>cloud-config</em> script <code>cluster/openstack-heat/kubernetes-heat/fragments/configure-salt.yaml</code>. You can see that this script will create a configuration file <code>/srv/kubernetes/openstack.conf</code> on the Kubernetes machine which contains the OpenStack settings. In my case, I changed the original block:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Global]
</span><span class='line'>auth-url=$OS_AUTH_URL
</span><span class='line'>username=$OS_USERNAME
</span><span class='line'>password=$OS_PASSWORD
</span><span class='line'>region=$OS_REGION_NAME
</span><span class='line'>tenant-id=$OS_TENANT_ID</span></code></pre></td></tr></table></div></figure>


<p>to read:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Global]
</span><span class='line'>auth-url=$OS_AUTH_URL
</span><span class='line'>username=$OS_USERNAME
</span><span class='line'>password=$OS_PASSWORD
</span><span class='line'>region=$OS_REGION_NAME
</span><span class='line'>tenant-id=$OS_TENANT_ID
</span><span class='line'>domain-name=MyDomain # Keystone V3 domain
</span><span class='line'>[LoadBalancer]
</span><span class='line'>lb-version=v1
</span><span class='line'>subnet-id=73f8eb91-90cf-42f4-85d0-dcff44077313</span></code></pre></td></tr></table></div></figure>


<p>Besides adding the <code>LoadBalancer</code> section, I also appended the <code>domain-name</code> option to the end of the <code>Global</code> section, as in my OpenStack environment I want to authenticate against a non-default Keystone V3 domain.</p>

<h2>Installing the Kubernetes cluster</h2>

<p>After you&rsquo;ve sourced both the <code>openrc.sh</code> and <code>openstack-heat.sh</code> environment settings, you can kick off the installation of the Kubernetes cluster with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./cluster/kube-up.sh
</span></code></pre></td></tr></table></div></figure>


<p>After about 25 minutes, you should have a Kubernetes cluster up and running. You can check the status of the Kubernetes pods with the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./cluster/kubectl.sh get pods --namespace kube-system
</span></code></pre></td></tr></table></div></figure>


<p>All pods should be running. The network topology of the Kubernetes cluster as displayed by Horizon:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/kube.png"></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Test-Driving OpenStack Manila]]></title>
    <link href="http://alesnosek.com/blog/2016/05/22/test-driving-openstack-manila/"/>
    <updated>2016-05-22T16:59:30-07:00</updated>
    <id>http://alesnosek.com/blog/2016/05/22/test-driving-openstack-manila</id>
    <content type="html"><![CDATA[<p>Do you need to provision an NFS share for your Hadoop cluster? And what about creating a CIFS share to make your files accesible to the Windows clients? Manila is a provisioning and management service for shared file systems within OpenStack. Let&rsquo;s test-drive it in this blogpost.</p>

<!-- more -->


<p>In this introductory article, we&rsquo;re going to allocate a volume in Cinder and provide that volume as an NFS share to our Nova instances. For this, I&rsquo;m using the OpenStack Mitaka installed via TripleO on RHEL7. The Manila version included in the Mitaka release is version 2.0.</p>

<p>After installing Manila, the following Manila services are running on the controller nodes:</p>

<ul>
<li><em>openstack-manila-api</em> exposes REST APIs that the Manila client talks to.</li>
<li><em>openstack-manila-scheduler</em> makes provisioning decisions when creating a new share.</li>
<li><em>openstack-manila-share</em> comes with a host of drivers to talk to the storage systems.</li>
</ul>


<h2>Configuring the generic share driver</h2>

<p>In order for Manila to allocate shares on Cinder volumes, we&rsquo;ll have to configure Manila to use the <em>generic</em> share driver. For that we&rsquo;ll add a new Manila backend <code>generic_backend</code> into <code>/etc/manila/manila.conf</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[DEFAULT]</span>
</span><span class='line'><span class="na">enabled_share_backends</span> <span class="o">=</span> <span class="s">generic_backend</span>
</span><span class='line'><span class="na">default_share_type</span> <span class="o">=</span> <span class="s">generic</span>
</span><span class='line'><span class="k">[generic_backend]</span>
</span><span class='line'><span class="na">share_driver</span> <span class="o">=</span> <span class="s">manila.share.drivers.generic.GenericShareDriver</span>
</span><span class='line'><span class="na">share_backend_name</span> <span class="o">=</span> <span class="s">generic_backend</span>
</span><span class='line'><span class="na">service_instance_name_template</span> <span class="o">=</span> <span class="s">manila_service_instance_%s</span>
</span><span class='line'><span class="na">service_image_name</span> <span class="o">=</span> <span class="s">manila-service-image-master</span>
</span><span class='line'><span class="na">driver_handles_share_servers</span> <span class="o">=</span> <span class="s">True</span>
</span><span class='line'><span class="na">service_instance_flavor_id</span> <span class="o">=</span> <span class="s">103</span>
</span><span class='line'><span class="na">connect_share_server_to_tenant_network</span> <span class="o">=</span> <span class="s">True</span>
</span><span class='line'><span class="na">service_instance_user</span> <span class="o">=</span> <span class="s">manila</span>
</span><span class='line'><span class="na">path_to_public_key</span> <span class="o">=</span> <span class="s">/etc/manila/id_rsa.pub</span>
</span><span class='line'><span class="na">path_to_private_key</span> <span class="o">=</span> <span class="s">/etc/manila/id_rsa</span>
</span><span class='line'><span class="na">manila_service_keypair_name</span> <span class="o">=</span> <span class="s">manila-service</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before explaining the configuration settings, I&rsquo;ll briefly describe how the <em>generic</em> driver actually works. Behind the scenes, the generic driver creates a so called <em>service instance</em>. The service instance is a Nova instance owned by the Manila service. It&rsquo;s not even visible to the tenant users. Manila allocates a Cinder volume and asks Nova to attach that volume to the service instance. Afterwards, Manila connects to the service instance using SSH in order to create the filesytem on the attached Cinder volume and mount it and export that as a NFS/CIFS share to the tenant instances.</p>

<p>The service instance can be created by the OpenStack administrator or we can configure Manila to create the service instance by itself (option <code>driver_handles_share_servers = True</code>).</p>

<p>The service instance will be created from the image that we have to upload into Glance beforehand. I downloaded an existing Manila service image from <a href="http://tarballs.openstack.org/manila-image-elements/images/manila-service-image-master.qcow2">here</a>. This image is based on Ubuntu 14.04.4 LTS and includes the <code>manila</code> user account and the NFS and Samba server software packages. I uploaded this image into Glance under the name <code>manila-service-image-master</code>.</p>

<p>Next I&rsquo;ve chosen the size of the machine used for the service instance with <code>service_instance_flavor_id = 103</code>.</p>

<p>The service instance is connected to two networks. The first network is called a <em>service network</em> and is created by Manila before booting up the service instance. Manila uses this network for the SSH access to the service instance. The second network is a <em>share network</em>. The NFS server managed by Manila is accessible on this network. In our case, because we have configured <code>connect_share_server_to_tenant_network = True</code>, the share network will directly map to one of our tenant networks.</p>

<p>Finally, we have to generate a public/private key pair and tell Manila about it using the options <code>path_to_public_key</code> and <code>path_to_private_key</code>. Manila will upload this keypair into Nova under the name <code>manila-service</code>. When creating the service instance, Nova injects the public key into the instance and so allows Manila the SSH access.</p>

<p>In order to make our generic backend available to the Manila users, we&rsquo;re going to define a <code>generic</code> share type next.</p>

<h2>Defining a share type</h2>

<p>The <em>share type</em> has a similar purpose as the <em>volume type</em> in Cinder. It defines the backend used for the share creation. If there are multiple share backends available, an OpenStack administrator can define a separate share type for each of them. When creating a new share, the user can choose which share type to allocate the storage from.</p>

<p>To create a <code>generic</code> share type that maps to our <code>generic</code> backend you can run the following commands as an OpenStack administrator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>manila <span class="nb">type</span>-create generic True
</span><span class='line'>manila <span class="nb">type</span>-key generic <span class="nb">set </span><span class="nv">share_backend_name</span><span class="o">=</span>generic_backend
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a share and mounting it</h2>

<p>Finally, we&rsquo;re done with all the configuration and can start enjoying our share service. All the following commands are run as an ordinary tenant user.</p>

<p>At first, we&rsquo;d like to create a share network and map it to one of our tenant networks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>manila share-network-create --neutron-net-id 4f179a8c-7068-4f0b-9be4-9cb11451b401 --neutron-subnet-id c7d753b0-039b-4f8c-9e0f-012651ff4ada --name management
</span></code></pre></td></tr></table></div></figure>


<p>Now we can create our first NFS share called <code>myshare</code> with the size 1 GB:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>manila create --name myshare --share-network management NFS 1
</span></code></pre></td></tr></table></div></figure>


<p>Creating the first share on a given tenant network takes longer as Manila has to spin up a new service instance in the background.</p>

<p>Eventually, the status of the share turns into <code>available</code> which means that the share is ready. The <code>manila show myshare</code> command will display the location from where we can mount the share. In our case, it is <code>10.13.243.173:/shares/share-b87367aa-3ef3-4282-a6b5-e45cab991b6c</code>. Before we can mount the share we have to allow access to it by modifying the access list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>manila access-allow --access_level rw myshare ip 10.13.244.12
</span></code></pre></td></tr></table></div></figure>


<p>The above command provides an instance having the IP address 10.13.244.12 with a read-write access to the share. Note that the IP addresses 10.13.243.173 and 10.13.244.12 belong to the same network. Finally, we can SSH into the instance and mount the share with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo mount -t nfs 10.13.243.173:/shares/share-b87367aa-3ef3-4282-a6b5-e45cab991b6c /mnt
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[TripleO Installer - the Good, the Bad and the Ugly]]></title>
    <link href="http://alesnosek.com/blog/2016/03/27/tripleo-installer-the-good/"/>
    <updated>2016-03-27T19:39:15-07:00</updated>
    <id>http://alesnosek.com/blog/2016/03/27/tripleo-installer-the-good</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.openstack.org/wiki/TripleO">TripleO</a> is an OpenStack deployment and management tool I&rsquo;ve been using since the Kilo release of OpenStack. It does its job pretty well, however not everything is perfect. My experience presented in this article applies more or less to the Red Hat&rsquo;s OpenStack director too, as the Red Hat OpenStack director is a downstream version of TripleO.</p>

<!-- more -->


<h2>The good things about TripleO</h2>

<h3>TripleO is a great idea</h3>

<p>TripleO, aka OpenStack-on-OpenStack, installs OpenStack cluster using OpenStack. At first, a minimum one-node OpenStack installation is created which is in turn used to provision a much bigger workload OpenStack cluster. I find this TripleO idea amazing. If OpenStack is the best way to manage your infrastructure, then why use something else to install it? As an administrator I would prefer to provision my OpenStack nodes with Ironic before introducing yet another tool like <a href="http://cobbler.github.io/">Cobbler</a> to do the same job. Needless to say that as the Ironic and Heat components improve, so improves the OpenStack installation experience.</p>

<p>One could argue that using the OpenStack to form an installer comes with a ton of complexity when installing the installer itself. In my experience, however, the installation of the undercloud OpenStack using the provided Puppet scripts doesn&rsquo;t impose any problem.</p>

<h3>TripleO has a vibrant community</h3>

<p>TripleO is used to continuously deploy and test the OpenStack cloud during its development. The RDO project adopted TripleO as their OpenStack installation tool. Red Hat derives their OpenStack director installer from the RDO project. A large community of TripleO users is a great plus.</p>

<h2>The bad things about TripleO</h2>

<h3>Configuration flexibility</h3>

<p>TripleO installer consists of a bunch of Heat templates to orchestrate the overcloud image provisioning and a number of Puppet and shell scripts for the following configuration of the overcloud nodes. These templates and scripts are heavily developed from release to release as the new TripleO features come in. To avoid the upgrade headaches, you should not modify the TripleO templates and scripts directly. Instead, TripleO provides extension points (via extra config) where you can put your customizations. This didn&rsquo;t work for me. My goal was to deploy an Ironic service in the overcloud OpenStack. For that to work, I needed to provision an additional undercloud network including a VIP for the load balancer. This was not possible without patching the Heat templates and Puppet scripts. I dread the day when I&rsquo;ll have to port these patches to the next TripleO release.</p>

<p>Furthermore, the current way to modify OpenStack configuration properties is less straight forward. To configure a property, I have to first grep through the Puppet scripts to find out whether the desired property is managed by Puppet or not. Afterwards, I grep through the TripleO Heat templates to find out whether TripleO provides a direct template parameter to set the Puppet variable or not. Afterwards, I can either pass the parameter to the TripleO template or I set the Puppet variable in the extra config section or I&rsquo;m on my own.</p>

<blockquote><p>I&#8217;d like to be able to easily modify any property in any configuration file on any OpenStack node.</p></blockquote>


<p>OpenStack comes with tons of configuration properties and I think it would be great to have a more straight forward way to configure them.</p>

<h3>Deployment control</h3>

<p>TripleO uses Heat to deploy and configure the overcloud OpenStack. Heat orchestrates the infrastracture based on the description provided by the user in the Heat templates. In the Heat templates, we tell Heat what our deployment should look like, but we have no control over the steps Heat will take to get to the desired state. I find this lack of control rather problematic.</p>

<blockquote><p>A fine-grained deployment control would be desirable.</p></blockquote>


<p>Let&rsquo;s say I have an overcloud consisting of 100 nodes. After changing the configuration in my Heat templates, I can only re-run the entire Heat configuration process and hope that I won&rsquo;t end up with a broken cloud. Instead, I&rsquo;d like to apply the configuration changes to a couple of nodes to make sure that everything works before I continue with the rest of the cloud. The ability to apply only part of the configuration would be useful as well.</p>

<h2>The ugly experience with TripleO</h2>

<p>I&rsquo;d like to share one scary experience I had with the TripleO installer. While using TripleO for a couple of months, I have to say that this was the only serious problem I&rsquo;ve encountered.</p>

<p>One day I uploaded an updated node image into the undercloud OpenStack. I was about to create new nodes in the overcloud cluster and wanted to have them provisioned with this new image. After starting the Heat stack update, it occurred to me that the processing took longer than usual. Well, after I SSHed into the overcloud nodes I realized why. Heat simply wiped out the entire disk content of the existing nodes and replaced it with the fresh disk image. Wow, my entire workload cloud was gone!</p>

<p>I learned that when you update the disk image in the undercloud, Heat will find out what nodes have to be updated and will simply replace their disk content with the new image. If you are orchestrating cloud deployments where your machines are cattle, this is what you want, however:</p>

<blockquote><p>The overcloud baremetal nodes are pets and should not be handled as cattle.</p></blockquote>


<p>To protect the overcloud nodes from deletion, I run the following command for each node against the undercloud Nova database:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">instances</span> <span class="k">SET</span> <span class="n">disable_terminate</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">WHERE</span> <span class="n">uuid</span> <span class="o">=</span> <span class="s1">&#39;&lt;uuid of the overcloud instance&gt;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, I haven&rsquo;t found a better way how to do it. This effectively prevents deleting the node whether by issuing a <code>nova delete</code> command or by Heat when updating the stack.</p>

<h2>Conclusion and suggestions</h2>

<p>TripleO installer is a great tool to deploy an OpenStack cloud. It&rsquo;s backed by a large user community and doesn&rsquo;t invent any new tools to install OpenStack.</p>

<p>On the other hand, I&rsquo;m somewhat sceptical about Heat being the right tool to do software configuration. Funneling the configuration options through the Heat templates down to the Puppet scripts seems cumbersome to me.</p>

<p>I&rsquo;d like to suggest the following approach: let Heat do the node provisioning, network configuration and perhaps a minimum node setup using cloud-init. At the end of the deployment, Heat would provide the information about the deployment in the format understandable to the configuration management tools like Puppet, Chef or Ansible. The configuration management tool then merges the facts provided by Heat with the tons of OpenStack configuration settings provided by the user. The following OpenStack installation, configuration, and later orchestration would solely be done by the configuration management tool more suitable for this job. Heat would not be involved at all in this stage.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Bootstrapping a Galera Cluster on RHEL7]]></title>
    <link href="http://alesnosek.com/blog/2016/01/31/bootstrapping-a-galera-cluster-on-rhel7/"/>
    <updated>2016-01-31T15:24:55-08:00</updated>
    <id>http://alesnosek.com/blog/2016/01/31/bootstrapping-a-galera-cluster-on-rhel7</id>
    <content type="html"><![CDATA[<p>The MariaDB Galera packages provided by the RDO project in their OpenStack repositories don&rsquo;t seem to include a command or script to bootstrap the cluster. Let&rsquo;s look at an alternative way to bring the cluster up.</p>

<!-- more -->


<p>RHEL7 comes with the init system <code>systemd</code>. Unfortunately, systemd doesn&rsquo;t provide a way to pass command-line arguments to the unit files. Hence, doing something like this won&rsquo;t work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>root@rhel1 ~<span class="o">]</span><span class="nv">$ </span>systemctl start mariadb --wsrep_new_cluster
</span><span class='line'>systemctl: unrecognized option <span class="s1">&#39;--wsrep_new_cluster&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of passing command-line arguments, systemd allows for creating <a href="http://0pointer.de/blog/projects/instances.html">multiple instances</a> of the same service where each instance can obtain it&rsquo;s own set of environment variables. The Percona XtraDB Cluster includes the standard and the bootstrap service instance definitions in the RPM package <code>Percona-XtraDB-Cluster-server</code>. To boostrap the Percona cluster, the first node can be started with the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>root@percona1 ~<span class="o">]</span><span class="nv">$ </span>systemctl start mysql@bootstrap.service
</span></code></pre></td></tr></table></div></figure>


<p>At the moment, this boostrap service definition is missing in the RDO OpenStack packages. Before a similar <code>mysql@.service</code> script is available in RDO you can start the MariaDB Galera cluster as follows:</p>

<ul>
<li>On the first node, start the MariaDB with the <code>--wsrep-new-cluster</code> to create a new cluster:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>root@rhel1 ~<span class="o">]</span><span class="nv">$ </span>/usr/bin/mysqld_safe --wsrep-new-cluster
</span></code></pre></td></tr></table></div></figure>


<p>Let the command run in the foreground.</p>

<ul>
<li>On the remaining cluster nodes start the mariadb service as usual:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>root@rhel2 ~<span class="o">]</span><span class="nv">$ </span>systemctl start mariadb
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>After the cluster has been fully formed, stop the mariadb on the first node by sending it a SIGQUIT (press CTRL + \ on the console).</p></li>
<li><p>On the first node, start the mariadb service via systemd:</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>root@rhel1 ~<span class="o">]</span><span class="nv">$ </span>systemctl start mariadb
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. You can check the status of each of the cluster nodes by running the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>root@rhel1 ~<span class="o">]</span><span class="nv">$ </span>mysql -e <span class="s2">&quot;SHOW GLOBAL STATUS LIKE &#39;wsrep%&#39;;&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Monitoring OpenStack Cluster with Icinga]]></title>
    <link href="http://alesnosek.com/blog/2015/11/30/monitoring-openstack-cluster-with-icinga/"/>
    <updated>2015-11-30T21:13:33-08:00</updated>
    <id>http://alesnosek.com/blog/2015/11/30/monitoring-openstack-cluster-with-icinga</id>
    <content type="html"><![CDATA[<p>If you don&rsquo;t monitor it, it&rsquo;s not in production! To get an OpenStack cloud ready for production, monitoring is a must. Let&rsquo;s take a look at two projects providing Nagios/Icinga plugins for checking the health of OpenStack services.</p>

<!-- more -->


<p>First, a few words about <a href="https://www.icinga.org/" title="Icinga">Icinga</a>. I started using Icinga 2 only recently and I&rsquo;m very pleased with this flexible and well-documented software. I&rsquo;ve listened to a German presentation about Icinga where they said that Icinga was not that widely spread in the US as it was the case in Europe. Dear Icinga team, you have one more happy user in the US now. Your software just works and your web GUI is beautiful.</p>

<p>I found two very useful projects for monitoring the OpenStack APIs both hosted on GitHub:</p>

<ul>
<li><a href="https://github.com/cirrax/openstack-nagios-plugins">OpenStack Nagios Plugins</a></li>
<li><a href="https://github.com/openstack/monitoring-for-openstack">Monitoring for OpenStack</a></li>
</ul>


<h2>OpenStack Nagios Plugins</h2>

<p><a href="https://github.com/cirrax/openstack-nagios-plugins">OpenStack Nagios Plugins</a> provides a collection of checks for the OpenStack services Nova, Neutron, Cinder, Keystone and Ceilometer. Available plugins worked right away with my OpenStack Liberty cluster. The Nova Hypervisor check monitors the &ldquo;virtual&rdquo; CPU and memory usage across your compute nodes. The name virtual CPU is a little misleading here. In reality, the number of physical cores is monitored as the Nova API actually reports the number of physical cores. I stick to the OpenStack default settings that overcommit the CPUs by factor of 16 and the memory by factor of 1.5. To accommodate this fact, I changed the warning and critical ranges for the check_nova-hypervisors plugin as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>check_nova-hypervisors --warn_memory_percent 0:135 --critical_memory_percent 0:142 --warn_vcpus_percent 0:1440 --critical_vcpus_percent 0:1520
</span></code></pre></td></tr></table></div></figure>


<h2>Monitoring for OpenStack</h2>

<p>Plugins coming with the <a href="(https://github.com/openstack/monitoring-for-openstack">Monitoring for OpenStack</a> project provide deeper checks of OpenStack functionality. I liked the following ones the best:</p>

<ul>
<li><code>check_nova_instance</code>: Creates an instance on your cloud and deletes it again as soon as it is active. It&rsquo;s recommended to use a small disk image like cirros for this check.</li>
<li><code>cinder_volume</code>: Allocates a volume of size 1GB and deletes it again.</li>
<li><code>neutron_floating_ip</code>: Tries to allocate a floating IP. You have to configure the network where to allocate the IP from.</li>
<li><code>glance_upload</code>: Uploads 1MB of data as an image into Glance.</li>
<li><code>check_horizon_login</code>: Given a user name and a password the plugin will log into the Horizon dashboard.</li>
</ul>


<p>Some of the plugins didn&rsquo;t work for me due to incompatibilities with the Liberty client APIs. If you encounter the same problem you can try out my fixed version of the plugins on GitHub <a href="https://github.com/noseka1/monitoring-for-openstack">here</a>.</p>

<h2>Icinga 2 Screenshot</h2>

<p>And this is how the OpenStack APIs service group looks in Icinga Web 2. Happy monitoring!</p>

<p><img class="center" src="http://alesnosek.com/images/posts/osmon.png"></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Assigning Roles to Nodes Directly in RDO]]></title>
    <link href="http://alesnosek.com/blog/2015/11/09/assigning-roles-to-nodes-directly-in-rdo/"/>
    <updated>2015-11-09T20:49:40-08:00</updated>
    <id>http://alesnosek.com/blog/2015/11/09/assigning-roles-to-nodes-directly-in-rdo</id>
    <content type="html"><![CDATA[<p>RDO Manager defines multiple roles that nodes can play in OpenStack deployment. For large-sized installations, RDO features automatic assignment of roles to nodes. This assignment is based on the facts that RDO obtained about each node during the introspection. However, for smaller deployments, you might prefer to assign the roles to the available nodes by hand. It was not straight forward for me to find out about this manual option even when it is described in the <a href="http://docs.openstack.org/developer/tripleo-docs/advanced_deployment/profile_matching.html#optional-manually-add-the-profiles-to-the-nodes" title="TripleO documentation">TripleO documentation</a>. Let&rsquo;s review the required configuration steps in this blogpost.</p>

<!-- more -->


<p>The relationship between roles and nodes is organized via flavors. A flavor is a set of properties that the target node must match in order to be eligible for deployment of a specific role. The manual assignment of a role to a node is a three-step process:</p>

<ol>
<li>Define a flavor with a property <code>capabilities:profile</code> set to the role name</li>
<li>Add the same profile to the capabilities list of the target node</li>
<li>Tell RDO what flavor to use for a specific role when beginning the deployment</li>
</ol>


<p>The creation of flavors with the associated <code>capabilities:profile</code> property looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>openstack flavor create --id auto --ram <span class="m">4096</span> --disk <span class="m">40</span> --vcpus <span class="m">1</span> ceph
</span><span class='line'>openstack flavor create --id auto --ram <span class="m">4096</span> --disk <span class="m">40</span> --vcpus <span class="m">1</span> cinder
</span><span class='line'>openstack flavor create --id auto --ram <span class="m">4096</span> --disk <span class="m">40</span> --vcpus <span class="m">1</span> compute
</span><span class='line'>openstack flavor create --id auto --ram <span class="m">4096</span> --disk <span class="m">40</span> --vcpus <span class="m">1</span> controller
</span><span class='line'>openstack flavor create --id auto --ram <span class="m">4096</span> --disk <span class="m">40</span> --vcpus <span class="m">1</span> swift
</span><span class='line'>
</span><span class='line'>openstack flavor <span class="nb">set</span> --property <span class="s2">&quot;cpu_arch&quot;</span><span class="o">=</span><span class="s2">&quot;x86_64&quot;</span> --property <span class="s2">&quot;capabilities:boot_option&quot;</span><span class="o">=</span><span class="s2">&quot;local&quot;</span> --property <span class="s2">&quot;capabilities:profile&quot;</span><span class="o">=</span><span class="s2">&quot;ceph&quot;</span> ceph
</span><span class='line'>openstack flavor <span class="nb">set</span> --property <span class="s2">&quot;cpu_arch&quot;</span><span class="o">=</span><span class="s2">&quot;x86_64&quot;</span> --property <span class="s2">&quot;capabilities:boot_option&quot;</span><span class="o">=</span><span class="s2">&quot;local&quot;</span> --property <span class="s2">&quot;capabilities:profile&quot;</span><span class="o">=</span><span class="s2">&quot;cinder&quot;</span> cinder
</span><span class='line'>openstack flavor <span class="nb">set</span> --property <span class="s2">&quot;cpu_arch&quot;</span><span class="o">=</span><span class="s2">&quot;x86_64&quot;</span> --property <span class="s2">&quot;capabilities:boot_option&quot;</span><span class="o">=</span><span class="s2">&quot;local&quot;</span> --property <span class="s2">&quot;capabilities:profile&quot;</span><span class="o">=</span><span class="s2">&quot;compute&quot;</span> compute
</span><span class='line'>openstack flavor <span class="nb">set</span> --property <span class="s2">&quot;cpu_arch&quot;</span><span class="o">=</span><span class="s2">&quot;x86_64&quot;</span> --property <span class="s2">&quot;capabilities:boot_option&quot;</span><span class="o">=</span><span class="s2">&quot;local&quot;</span> --property <span class="s2">&quot;capabilities:profile&quot;</span><span class="o">=</span><span class="s2">&quot;controller&quot;</span> controller
</span><span class='line'>openstack flavor <span class="nb">set</span> --property <span class="s2">&quot;cpu_arch&quot;</span><span class="o">=</span><span class="s2">&quot;x86_64&quot;</span> --property <span class="s2">&quot;capabilities:boot_option&quot;</span><span class="o">=</span><span class="s2">&quot;local&quot;</span> --property <span class="s2">&quot;capabilities:profile&quot;</span><span class="o">=</span><span class="s2">&quot;swift&quot;</span> swift
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to add the profiles to the capabilities list of the respective nodes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ironic node-update &lt;node1 UUID here&gt; replace properties/capabilities<span class="o">=</span><span class="s1">&#39;profile:ceph,boot_option:local&#39;</span>
</span><span class='line'>ironic node-update &lt;node2 UUID here&gt; replace properties/capabilities<span class="o">=</span><span class="s1">&#39;profile:cinder,boot_option:local&#39;</span>
</span><span class='line'>ironic node-update &lt;node3 UUID here&gt; replace properties/capabilities<span class="o">=</span><span class="s1">&#39;profile:compute,boot_option:local&#39;</span>
</span><span class='line'>ironic node-update &lt;node4 UUID here&gt; replace properties/capabilities<span class="o">=</span><span class="s1">&#39;profile:controller,boot_option:local&#39;</span>
</span><span class='line'>ironic node-update &lt;node5 UUID here&gt; replace properties/capabilities<span class="o">=</span><span class="s1">&#39;profile:swift,boot_option:local&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When deploying the OpenStack cloud, we need to tell the RDO manager what flavor to use for each specific role:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>openstack overcloud deploy <span class="se">\</span>
</span><span class='line'>--templates /usr/share/openstack-tripleo-heat-templates <span class="se">\</span>
</span><span class='line'>--ceph-storage-scale <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--block-storage-scale <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--compute-scale <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--control-scale <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--swift-storage-scale <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--ceph-storage-flavor ceph <span class="se">\</span>
</span><span class='line'>--block-storage-flavor cinder <span class="se">\</span>
</span><span class='line'>--compute-flavor compute <span class="se">\</span>
</span><span class='line'>--control-flavor controller <span class="se">\</span>
</span><span class='line'>--swift-storage-flavor swift
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all for today. Hope you&rsquo;re enjoying the full control over your OpenStack cloud deployment.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Installing OpenStack Liberty on RHEL7]]></title>
    <link href="http://alesnosek.com/blog/2015/10/19/installing-openstack-liberty-on-rhel7/"/>
    <updated>2015-10-19T22:30:48-07:00</updated>
    <id>http://alesnosek.com/blog/2015/10/19/installing-openstack-liberty-on-rhel7</id>
    <content type="html"><![CDATA[<p>The OpenStack Liberty was released last week. In this article I&rsquo;ll briefly describe how to deploy the OpenStack Liberty on RHEL7 using RDO Manager.</p>

<!-- more -->


<p>The <a href="https://www.rdoproject.org/" title="RDO project">RDO project</a> packages the OpenStack software for the Red Hat based platforms. Currently, there are Liberty packages in status testing/release candidate available from the project. Apart from a couple of configuration issues the installation went pretty well and I obtained a basic 2-node cluster.</p>

<p>If you intalled OpenStack Kilo using RDO Manager before I have a good news for you. The installation procedure remains pretty much the same. You can follow the <a href="http://docs.openstack.org/developer/tripleo-docs/" title="TripleO Doc">great guide</a> provided by the TripleO project to get the installation going. First, add the following two repositories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://trunk.rdoproject.org/centos7/current-tripleo/delorean.repo
</span><span class='line'>http://trunk.rdoproject.org/centos7/delorean-deps.repo</span></code></pre></td></tr></table></div></figure>


<p>Now you can install the RDO Manager with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install python-tripleoclient</span></code></pre></td></tr></table></div></figure>


<p>In the Kilo release, the <code>python-tripleoclient</code> package was called <code>python-rdomanager-oscplugin</code>. You can continue with the guide. To build the overcloud images I issue the commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">NODE_DIST</span><span class="o">=</span>rhel7
</span><span class='line'><span class="nb">export </span><span class="nv">DIB_LOCAL_IMAGE</span><span class="o">=</span>rhel-guest-image-7.1-20150224.0.x86_64.qcow2
</span><span class='line'><span class="nb">export </span><span class="nv">REG_METHOD</span><span class="o">=</span>disable
</span><span class='line'><span class="nb">export </span><span class="nv">DIB_DEBUG_TRACE</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">DIB_YUM_REPO_CONF</span><span class="o">=</span>/etc/yum.repos.d/rhel7_mirror.repo
</span><span class='line'><span class="nb">export </span><span class="nv">USE_DELOREAN_TRUNK</span><span class="o">=</span>1
</span><span class='line'><span class="nb">export </span><span class="nv">DELOREAN_TRUNK_REPO</span><span class="o">=</span>http://trunk.rdoproject.org/centos7/current-tripleo
</span><span class='line'><span class="nb">export </span><span class="nv">DELOREAN_REPO_FILE</span><span class="o">=</span>delorean.repo
</span><span class='line'>openstack overcloud image build --all
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I&rsquo;m not really registering the OpenStack nodes with the Red Hat portal. Instead, I&rsquo;m pulling the RHEL7 packages from the local mirror.</p>

<p>After the installation of the overcloud has completed I realized that some of the OpenStack processes on the overcloud nodes were segfaulting. After switching SELinux from enforcing to permissive mode everything started working as expected.</p>

<h2>A final note</h2>

<p>The deployment of OpenStack is rather an involved process even when leveraging the tools like RDO Manager. To truly automate the installation in my specific environment I use a set of Ansible scripts to drive the RDO manager installation. Now that Red Hat acquired Ansible I&rsquo;m wondering if we&rsquo;re going to get an even better OpenStack installation experience on Red Hat based distributions.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Network Configuration with os-net-config]]></title>
    <link href="http://alesnosek.com/blog/2015/09/28/network-configuration-with-os-net-config/"/>
    <updated>2015-09-28T20:30:11-07:00</updated>
    <id>http://alesnosek.com/blog/2015/09/28/network-configuration-with-os-net-config</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openstack/os-net-config" title="os-net-config">Os-net-config</a> is a simple tool to configure networking of Linux hosts. Combined with Cloud-init, it&rsquo;s suitable for network configuration of virtual machines when booting in the cloud. Let&rsquo;s take a closer look at os-net-config.</p>

<!-- more -->


<p>Os-net-config is developed as a part of the OpenStack <a href="https://wiki.openstack.org/wiki/TripleO" title="TripleO">TripleO</a> project. Its modus operandi is simple: based on the YAML/JSON configuration file, the os-net-config configures the network interfaces of the machine. Currently, the tool supports configuration of Debian based distributions using <code>/etc/network/interfaces</code> and configuration of distributions using scripts in <code>/etc/sysconfig/network</code> directory, e.g. Red Hat. Os-net-config allows the user to:</p>

<ol>
<li>Assign IP addresses to interfaces</li>
<li>Define static routes</li>
<li>Create VLAN subinterfaces</li>
<li>Create OVS bridges</li>
<li>Create OVS bonds (not implemented on Debian)</li>
</ol>


<h2>Using os-net-config on Red Hat</h2>

<p>In the following examples we&rsquo;ll use RHEL7 and os-net-config version 0.1.4. By default, os-net-config reads the configuration file at <code>/etc/os-net-config/config.yaml</code>. However, you can specify a different location using the <code>-c</code> parameter. The first example shows a configuration of machine with two network interfaces. The first interface is dynamically configured using DHCP. The second interface has been assigned an IP address and netmask statically:</p>

<figure class='code'><figcaption><span>example1.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">network_config</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">use_dhcp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic2</span>
</span><span class='line'>    <span class="l-Scalar-Plain">addresses</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">ip_netmask</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">192.168.1.1/24</span>
</span></code></pre></td></tr></table></div></figure>


<p>To apply the above network configuration to your machine you can run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>os-net-config -c example1.yaml
</span></code></pre></td></tr></table></div></figure>


<p>On my machine, os-net-config created four configuration files in the <code>/etc/sysconfig/network-scripts</code> directory:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This file is autogenerated by os-net-config</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>dhcp
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This file is autogenerated by os-net-config</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>static
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>192.168.1.1
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span></code></pre></td></tr></table></div></figure>


<p>In addition to the above interface configuration files, two empty files <code>route-eth0</code> and <code>route-eth1</code> have been created. These files would be populated in the case that I would define some static routes in my network configuration.</p>

<p>In the second example, we&rsquo;ll bond two network interfaces and plug this bond into an OVS bridge. The os-net-config YAML configuration looks like this:</p>

<figure class='code'><figcaption><span>example2.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">network_config</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ovs_bridge</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bridge1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">use_dhcp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">members</span><span class="p-Indicator">:</span>
</span><span class='line'>       <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ovs_bond</span>
</span><span class='line'>         <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bond1</span>
</span><span class='line'>         <span class="l-Scalar-Plain">members</span><span class="p-Indicator">:</span>
</span><span class='line'>           <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>             <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic1</span>
</span><span class='line'>           <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>             <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic2</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the listing of the network configuration files generated by os-net-config based on the above input:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This file is autogenerated by os-net-config</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This file is autogenerated by os-net-config</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-bond1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This file is autogenerated by os-net-config</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>bond1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">DEVICETYPE</span><span class="o">=</span>ovs
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>OVSPort
</span><span class='line'><span class="nv">OVS_BRIDGE</span><span class="o">=</span>bridge1
</span><span class='line'><span class="nv">DEVICETYPE</span><span class="o">=</span>ovs
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>OVSBond
</span><span class='line'><span class="nv">BOND_IFACES</span><span class="o">=</span><span class="s2">&quot;eth0 eth1&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-bridge1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># This file is autogenerated by os-net-config</span>
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>bridge1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">DEVICETYPE</span><span class="o">=</span>ovs
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>OVSBridge
</span><span class='line'><span class="nv">OVSBOOTPROTO</span><span class="o">=</span>dhcp
</span><span class='line'><span class="nv">OVSDHCPINTERFACES</span><span class="o">=</span><span class="s2">&quot;bond1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Activating the network configuration</h2>

<p>When activating the network configuration, os-net-config executes several steps in the following order:</p>

<ol>
<li>Ifdown interfaces</li>
<li>Ifdown bridges</li>
<li>Generate/modify the configuration files in <code>/etc/sysconfig/network-scripts</code> directory</li>
<li>Ifup bridges</li>
<li>Ifup interfaces</li>
</ol>


<p>Os-net-config executes the aforementioned steps only on interfaces/bridges whose configuration has been updated. If the interface/bridge configuration hasn&rsquo;t changed os-net-config will not touch the respective configuration files in the <code>/etc/sysconfig/network-scripts</code> directory and will not restart the respective interface/bridge. This way, os-net-config minimizes the number of changes done to your system.</p>

<h2>Network interface names</h2>

<p>The names of the network interfaces are platform dependent. In the os-net-config configuration file, you can refer to your interfaces using symbolic names <code>nic1</code>, <code>nic2</code>, <code>nic3</code>, &hellip; Os-net-config will automatically associate these symbolic names with the real network interfaces like <code>em</code>, <code>eth</code>, <code>eno</code>.</p>

<h2>Conclusion</h2>

<p>Os-net-config is a useful configuration tool you might want to include on your virtual machine images.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Bridging VLAN Trunk to the Guest]]></title>
    <link href="http://alesnosek.com/blog/2015/09/07/bridging-vlan-trunk-to-the-guest/"/>
    <updated>2015-09-07T07:12:22-07:00</updated>
    <id>http://alesnosek.com/blog/2015/09/07/bridging-vlan-trunk-to-the-guest</id>
    <content type="html"><![CDATA[<p>In this article, we&rsquo;re going to make an entire VLAN trunk on the host accessible to the guest machine. The guest machine can then create VLAN subinterfaces in order to access a particular VLAN.</p>

<!-- more -->


<p>Our host and guest machines are running RHEL7. We&rsquo;re using Linux bridges and <a href="http://libvirt.org/" title="libvirt">libvirt</a> for guest and network configuration.</p>

<h2>Bridge configuration on the host</h2>

<p>On the host, the physical interface <code>enp3s0f0</code> is a trunk interface including VLANs with tags 408, 410 and 412. We&rsquo;ll create a new Linux bridge and add the <code>enp3s0f0</code> to this bridge. The virtual machines created by libvirt will also be connected to this bridge. The configuration of the <code>enp3s0f0</code> physical interface looks as follows:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-enp3s0f0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>enp3s0f0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">BRIDGE</span><span class="o">=</span>br-enp3s0f0
</span></code></pre></td></tr></table></div></figure>


<p>Please, note that there&rsquo;s no IP address configuration (neither static nor via DHCP) for the <code>enp3s0f0</code> interface. The <code>enp3s0f0</code> interface is a trunk interface and hence the IP configuration would make no sense here. The <code>BRIDGE</code> configuration variable connects the physical interface to the <code>br-enp3s0f0</code> bridge. To create the <code>br-enp3s0f0</code> bridge the following configuration file is needed:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-br-enp3s0f0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Bridge
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>br-enp3s0f0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">DELAY</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>After the <code>enp3s0f0</code> and <code>br-enp3s0f0</code> configuration is in place you might want to restart the networking service using the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl restart network
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a bridged network in libvirt</h2>

<p>Next, we&rsquo;re going to tell libvirt that there&rsquo;s an existing bridge <code>br-enp3s0f0</code> we&rsquo;d like our virtual machines be connected to. First, let&rsquo;s create a libvirt network definition file named just <code>bridge.xml</code>:</p>

<figure class='code'><figcaption><span>bridge.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;network&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>br-enp3s0f0<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;forward</span> <span class="na">mode=</span><span class="s">&#39;bridge&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;bridge</span> <span class="na">name=</span><span class="s">&#39;br-enp3s0f0&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/network&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a libvirt network based on the above definition, type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh net-define bridge.xml
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;d like libvirt daemon to start the network automatically on the startup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh net-autostart br-enp3s0f0
</span></code></pre></td></tr></table></div></figure>


<p>For the first time, we have to start the <code>br-enp3s0f0</code> network manually:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh net-start br-enp3s0f0
</span></code></pre></td></tr></table></div></figure>


<p>If the above configuration went well, you will find the new network <code>br-enp3s0f0</code> on the list of libvirt networks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>virsh net-list
</span><span class='line'> Name                 State      Autostart     Persistent
</span><span class='line'>----------------------------------------------------------
</span><span class='line'> br-enp3s0f0          active     yes           yes
</span></code></pre></td></tr></table></div></figure>


<h2>Attaching a guest to the network</h2>

<p>When creating a new guest (domain) in libvirt, you will need to attach the domain to the <code>br-enp3s0f0</code> network. I&rsquo;m not going to present the complete domain XML configuration here. You should include the following snippet in your domain definition in order to connect the domain to the <code>br-enp3s0f0</code> network:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;interface</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source</span> <span class="na">network=</span><span class="s">&#39;br-enp3s0f0&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;forward</span> <span class="na">mode=</span><span class="s">&#39;route&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;model</span> <span class="na">type=</span><span class="s">&#39;virtio&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/interface&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Guest network configuration</h2>

<p>After the guest machine boots up successfully, you can create VLAN subinterfaces in order to obtain access to the individual VLANs within the guest. First, let&rsquo;s check the configuration of the VLAN trunk interface <code>eth0</code> inside the guest:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we can create VLAN subinterfaces to access individual VLANs available in the <code>eth0</code> trunk. For example, to access VLAN 408 and obtain the IP configuration via DHCP you can create a new cofiguration file <code>ifcfg-eth0.408</code>:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0.408 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>dhcp
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0.408
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">VLAN</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure>


<p>When you restart the networking service, your guest should successfully obtain an IP address on the VLAN 408:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl restart network
</span></code></pre></td></tr></table></div></figure>


<h2>Caveat</h2>

<p>When experimenting with the Linux bridge configuration I made this observation: <em>If there&rsquo;s a VLAN subinterface defined for a specific VLAN on the host machine, this specific VLAN won&rsquo;t be accessible inside the guest.</em> For example, when I created the following VLAN 408 subinterface on the host:</p>

<figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-enp3s0f0.408 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>enp3s0f0.408
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">VLAN</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure>


<p>As soon as I brought this interface up using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ifup enp3s0f0.408
</span></code></pre></td></tr></table></div></figure>


<p>the <code>eth0.408</code> VLAN subinterface in the guest stopped working.</p>

<h2>References</h2>

<p>When writing this blogpost I referred to the very useful article <a href="http://blog.davidvassallo.me/2012/05/05/kvm-brctl-in-linux-bringing-vlans-to-the-guests/">KVM &amp; BRCTL in Linux – bringing VLANs to the guests</a> describing the issues of VLAN bridging in a great detail.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Multiple RHEL Mirrors on a Single Machine]]></title>
    <link href="http://alesnosek.com/blog/2015/08/16/multiple-rhel-mirrors-on-a-single-machine/"/>
    <updated>2015-08-16T22:23:11-07:00</updated>
    <id>http://alesnosek.com/blog/2015/08/16/multiple-rhel-mirrors-on-a-single-machine</id>
    <content type="html"><![CDATA[<p><em>Reposync</em> can mirror the yum repository to which your machine is subscribed to. However, you cannot subscribe your machine to the RHEL6 and RHEL7 at the same time. Let&rsquo;s take a look at how Docker can help us here.</p>

<!-- more -->


<p>The RHEL Docker images are available in the public registry. For example, the following command downloads a RHEL6 Docker image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker pull rhel6
</span></code></pre></td></tr></table></div></figure>


<p>The downloaded image is not registered with <a href="https://access.redhat.com/" title="Red Hat Customer Portal">Red Hat Customer Portal</a> and hence cannot receive any software updates. To register the Docker image, you&rsquo;ll need the <em>username</em> and <em>password</em> you use to log in to the Red Hat Customer Portal.</p>

<h2>Docker and the build-time secrets</h2>

<p>You will encounter a problem when building and registering the RHEL image using a Dockerfile. How to register the RHEL image using your credentials without Docker baking those credentials into the image? You don&rsquo;t want others to discover your secrets in the image&rsquo;s metadata or the history log. As a matter of fact, there doesn&rsquo;t seem to be a secure way to pass the secrets to the Docker in build-time. And there is a nice <a href="https://github.com/docker/docker/issues/13490" title="Secrets in Docker">write-up</a> available in the Docker issue tracker describing the different approaches how to workaround this deficiency.</p>

<p>The following approach worked for me:</p>

<ol>
<li>Store the credentials into a file on the Docker host</li>
<li>Start a RHEL container with the credentials file mounted into it</li>
<li>Use the credentials to register the RHEL system</li>
<li>Stop the RHEL container</li>
<li>Commit the RHEL container into a new Docker image</li>
</ol>


<h2>Creating RHEL images with Ansible</h2>

<p>You can find the <code>rhel_reposync</code> Ansible role at <a href="https://github.com/noseka1/rhel_reposync" title="rhel_reposync">GitHub</a>. You want to run this role on your Docker host. It will download the RHEL6 and RHEL7 images, and register them with the Red Hat Customer Portal. You have to supply your Red Hat credentials on the command-line. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ansible-playbook -i hosts playbook.yml -e <span class="nv">redhat_portal_username</span><span class="o">=</span>username@company.com -e <span class="nv">redhat_portal_password</span><span class="o">=</span>secretpassword
</span></code></pre></td></tr></table></div></figure>


<p>After the Ansible run is finished you&rsquo;ll find two images in your local Docker repository: <code>rhel6_reposync_registered</code> and <code>rhel7_reposync_registered</code>.</p>

<h2>Mirroring the RHEL repository</h2>

<p>To begin the RHEL repository mirroring you just start a container based on the registered image. The container expects a volume to be mounted at <code>/repodir</code>. It will save the downloaded RPM packages at this location.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run --rm -v /var/www/html/RHEL6:/repodir rhel6_reposync_registered
</span></code></pre></td></tr></table></div></figure>


<h2>Alternative solution</h2>

<p>I discovered an <a href="https://github.com/pyther/upstream_sync" title="upstream_sync">upstream_sync</a> script that allows you to mirror multiple RHEL/CentOS repositories from a single machine. It uses a specific client SSL certificate and key to access each of the repositories. This solution is much simpler than the approach described in this article.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Improving Ansible's ini_file Module]]></title>
    <link href="http://alesnosek.com/blog/2015/08/03/improving-ansibles-ini-file-module/"/>
    <updated>2015-08-03T20:01:30-07:00</updated>
    <id>http://alesnosek.com/blog/2015/08/03/improving-ansibles-ini-file-module</id>
    <content type="html"><![CDATA[<p><strong> Update 3/31/2016: </strong> The implementation of the ini_file module described in this blogpost has been merged into Ansible version 2.0.</p>

<p>For editing Windows INI files, Ansible comes with an <code>ini_file</code> module built in. Unfortunately, this module uses Python&rsquo;s <code>ConfigParser</code> module which reformats the entire INI file whenever you want to change a single line. It removes all the comment lines, too. For me this was not acceptable. After looking for a possible solution I decided to improve the <code>ini_file</code> module and created <code>ini_file2</code>. I realized how easy it is to create an Ansible module.</p>

<!-- more -->


<p>On Debian Linux, the Ansible&rsquo;s built-in <code>ini_file</code> module can be found at <code>/usr/share/ansible/files/ini_file</code>. This file is the base for our own <code>ini_file2</code>. The question was, at what location should one store the <code>ini_file2</code> module for Ansible to find it? From Ansible&rsquo;s <a href="http://docs.ansible.com/ansible/developing_modules.html" title="Developing Modules">documentation</a> I learned that when looking for modules, Ansible searches the <code>./library</code> directory alongside of the top level playbooks. That sounds perfect to me.</p>

<p>After a while working with the Python code, I created the <code>ini_file2</code> module. This module provides an equivalent functionality to the original <code>ini_file</code> module, however, it does only the minimum changes when editing the INI file. It typically modifies only one line. When removing options, it doesn&rsquo;t delete the lines but comment them out instead. If there was a commented out option it comments it in when required.</p>

<h2>The ini_file and ini_file2 comparison</h2>

<p>Let&rsquo;s compare the <code>ini_file</code> and <code>ini_file2</code> on a practical example. Our input INI file looks as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c1"># This is the main configuration section</span>
</span><span class='line'><span class="c1"># There are some important options to configure</span>
</span><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="c1"># This is the first option</span>
</span><span class='line'><span class="na">option1</span> <span class="o">=</span> <span class="s">orig_value</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This is the second option</span>
</span><span class='line'><span class="c1"># If not set, the default value is def_value</span>
</span><span class='line'><span class="c1"># option2 = def_value</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This is the last option</span>
</span><span class='line'><span class="c1"># If not set, the default value is def_value</span>
</span><span class='line'><span class="na">option3</span> <span class="o">=</span> <span class="s">some_value</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Ansible test script will set the <code>option1</code> and <code>option2</code> to <code>new_value</code> and it will remove the <code>option3</code> from the INI file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Set option1 to new_value
</span><span class='line'>  ini_file: dest=settings.ini section=main option=option1 value=new_value
</span><span class='line'>
</span><span class='line'>- name: Set option2 to new_value
</span><span class='line'>  ini_file: dest=settings.ini section=main option=option2 value=new_value
</span><span class='line'>
</span><span class='line'>- name: Remove option3
</span><span class='line'>  ini_file: dest=settings.ini section=main option=option3 state=absent</span></code></pre></td></tr></table></div></figure>


<p>When using the original <code>ini_file</code> module, the resulting INI file looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="na">option1</span> <span class="o">=</span> <span class="s">new_value</span>
</span><span class='line'><span class="na">option2</span> <span class="o">=</span> <span class="s">new_value</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that there&rsquo;s not much left from the input file. All comments are gone. In contrast, the <code>ini_file2</code> module does the editing operations with more precision:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c1"># This is the main configuration section</span>
</span><span class='line'><span class="c1"># There are some important options to configure</span>
</span><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="c1"># This is the first option</span>
</span><span class='line'><span class="na">option1</span> <span class="o">=</span> <span class="s">new_value</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This is the second option</span>
</span><span class='line'><span class="c1"># If not set, the default value is def_value</span>
</span><span class='line'><span class="na">option2</span> <span class="o">=</span> <span class="s">new_value</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This is the last option</span>
</span><span class='line'><span class="c1"># If not set, the default value is def_value</span>
</span><span class='line'><span class="c1">#option3 = some_value</span>
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<p>The <code>ini_file2</code> source code as well as test scripts can be found at <a href="https://github.com/noseka1/ini_file2" title="ini_file2">GitHub</a>.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Browsing Docker Source using Eclipse]]></title>
    <link href="http://alesnosek.com/blog/2015/07/19/browsing-docker-source-using-eclipse/"/>
    <updated>2015-07-19T20:59:12-07:00</updated>
    <id>http://alesnosek.com/blog/2015/07/19/browsing-docker-source-using-eclipse</id>
    <content type="html"><![CDATA[<p>Do you like Docker technology and want to learn more about it? There&rsquo;s no better way to learn than reading the source code. In this article, we&rsquo;ll install the Go programming language, download the latest Docker source code and navigate through it in Eclipse.</p>

<!-- more -->


<h2>Installing the Go programming language</h2>

<p>The Go programming language is relatively young and sees a lot of development. Within the past two years there was a major release available every half a year. To keep up with the latest state of art it&rsquo;s better to install Go packages directly from the project&rsquo;s <a href="https://golang.org/dl/" title="Go Downloads">download site</a> instead of trying to make use of the packages coming with your Linux distribution. Currently, Docker requires Go version 1.4 or later. Before you start the installation, make sure that there are no Go packages installed on your system. The following command will uninstall all Go packages from your Debian-based Linux:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get purge golang*
</span></code></pre></td></tr></table></div></figure>


<p>After you&rsquo;ve downloaded the Go binary distribution tarball your can install it with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo tar -C /usr/local -xzf go1.4.2.linux-amd64.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>This will extract the archive into the <code>/usr/local/go</code> directory. The Go distributions assume they will be installed in <code>/usr/local/go</code>. If you install Go into a different location you&rsquo;ll have to set the <code>GOROOT</code> environment variable. For more information on the Go installation refer to the Go&rsquo;s <a href="http://golang.org/doc/install" title="Getting Started">Getting Started</a> page.</p>

<p>The <code>/usr/local/go/bin</code> includes the Go tool (the <code>go</code> command). We&rsquo;ll use this tool to download and compile Docker. You want to have the Go tool available on your path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</span></code></pre></td></tr></table></div></figure>


<h2>Creating a Go workspace</h2>

<p>The Go <em>workspace</em> is a directory with three subdirectories:</p>

<ul>
<li><code>src</code> is where the source code resides</li>
<li><code>pkg</code> is where the libraries are stored</li>
<li><code>bin</code> is where the executables reside</li>
</ul>


<p>Typically, Go programmers keep <em>all</em> their source code and dependencies (libraries) in a single workspace. It means that all your Go projects are located in a single workspace.</p>

<p>The workspace can be created at an arbitrary location. In order for Go tool to find the available workspaces, you must list them in the <code>GOPATH</code> environment variable. We&rsquo;ll define a single workspace under the current user&rsquo;s home directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/go
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$GOPATH</span>/bin
</span></code></pre></td></tr></table></div></figure>


<p>At the same time, we&rsquo;ve included the workspace&rsquo;s <code>bin</code> directory into our path variable. Whenever we build an executable it&rsquo;ll be instantly available for us to use. Note that the workspace directory doesn&rsquo;t exist yet. Go tool will automatically create it when we download the Docker source code.</p>

<p>Furher information on the Go code organization and workspaces can be found <a href="http://golang.org/doc/code.html" title="How to Write Go Code">here</a>.</p>

<h2>Building Docker from source</h2>

<p>So far, we&rsquo;ve defined the location of our Go workspace. Now we&rsquo;re going to download the latest Docker code and build it. The Go tool can directly download the Docker Git repository and save it into our workspace:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>go get -d github.com/docker/docker
</span></code></pre></td></tr></table></div></figure>


<p>Now we can change our directory to the cloned Git repository and start the build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> <span class="nv">$HOME</span>/go/src/github.com/docker/docker
</span><span class='line'><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/go:<span class="nv">$HOME</span>/go/src/github.com/docker/docker/vendor ./hack/make.sh dynbinary
</span></code></pre></td></tr></table></div></figure>


<p>Docker comes with a set of dependencies directly checked into the Docker Git repository. You can find them in the <code>vendor</code> directory. This directory is actually a Go workspace which we only needed to include in our <code>GOPATH</code> when we triggered the build. If everything went fine, you can find some generated source files in the <code>autogen</code> directory and the freshly built Docker executables in the <code>bundles</code> directory.</p>

<h2>Creating an Eclipse project</h2>

<p>In this section, we&rsquo;re going to install a Go language plug-in into Eclipse IDE and create a Docker project. The <a href="https://github.com/GoClipse/goclipse" title="GoClipse">GoClipse</a> plug-in brings Go language support into Eclipse. The minimum installation requirements for this plug-in are: Eclipse 4.5 (Mars) running on Java 8 or later. You can follow the installation instructions available <a href="https://github.com/GoClipse/goclipse/blob/latest/documentation/Installation.md" title="GoClipse installation">here</a> to get the plug-in installed.</p>

<p>After the successful plug-in installation and restart of Eclipse select <code>File -&gt; New -&gt; Project ...</code>. Choose <code>Go Project</code> in the dialog box. You&rsquo;ll be presented with a window similar to:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/eclipse_go1.png"></p>

<p>Instead of using the default location, let Eclipse create the project in your Go workspace. After your Go project has been created, go to <code>Window -&gt; Preferences</code> and find the tab with the Go configuration. You want to set the location of your Go language installation to the standard <code>/usr/local/go</code> directory. Make sure you set the <code>GOOS</code> and <code>GOARCH</code> fields, too. You&rsquo;ll also have to add the path to the Docker&rsquo;s <code>vendor</code> directory into the <code>GOPATH</code> field.</p>

<p><img class="center" src="http://alesnosek.com/images/posts/eclipse_go2.png"></p>

<h2>Code navigation and auto-completion</h2>

<p>In this final section, we&rsquo;re going to make navigation and auto-completion in Eclipse work. The <code>Open Definition</code> navigation in Eclipse (keyboard shorcut F3) requires the Go <code>oracle</code> tool to be installed. Whenever you open the definition of the entity under the cursor, Eclipse will call the <code>oracle</code> tool in order to obtain the information about the navigation target.</p>

<p>The <code>oracle</code> tool is part of a bigger Go toolset located <a href="https://github.com/golang/tools" title="Golang tools">here</a>. You can easily install the <code>oracle</code> tool using the <code>go</code> command. Type this in your console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>go get golang.org/x/tools/cmd/oracle
</span></code></pre></td></tr></table></div></figure>


<p>You can run this command to confirm that the <code>oracle</code> tool was installed successfully:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>oracle --help
</span></code></pre></td></tr></table></div></figure>


<p>The source code navigation in Eclipse using the F3 keyboard shortcut should start working. Let&rsquo;s focus on the code auto-completion (Ctrl+Space) next. In order to make the auto-completion work, we need to install an auto-completion daemon for the Go programming language <a href="https://github.com/nsf/gocode" title="gocode">gocode</a>. The installation with the <code>go</code> tool is pretty simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>go get github.com/nsf/gocode
</span></code></pre></td></tr></table></div></figure>


<p>To confirm that the <code>gocode</code> tool was installed successfully type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gocode --help
</span></code></pre></td></tr></table></div></figure>


<p>Eclipse provides a configuration dialog for Go tools under <code>Window -&gt; Preferences</code>. There are even buttons to click and install the <code>oracle</code> and <code>gocode</code> tools from within Eclipse. We did this installation on the command-line.</p>

<p><img class="center" src="http://alesnosek.com/images/posts/eclipse_go3.png"></p>

<p>Now that you&rsquo;re all set I wish you happy browsing through the Docker source code!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Running Wine within Docker]]></title>
    <link href="http://alesnosek.com/blog/2015/07/04/running-wine-within-docker/"/>
    <updated>2015-07-04T22:46:55-07:00</updated>
    <id>http://alesnosek.com/blog/2015/07/04/running-wine-within-docker</id>
    <content type="html"><![CDATA[<p>After upgrading to Debian Jessie, my Windows application running under Wine stopped working. In this article we&rsquo;ll use Docker to restore the Wine environment from Debian Wheezy. We&rsquo;ll run the Windows application inside this Docker container.</p>

<!-- more -->


<p>Docker is not part of the stable Jessie distribution, however, you can install it from the <a href="http://backports.debian.org/" title="Debian Backports">Debian Backports</a> repositories.</p>

<h2>Creating a Docker image</h2>

<p>We start off with creating a Docker image based on the <code>debian:wheezy</code> image from the official Docker repositories. We&rsquo;ll install the 32-bit Wine package on it. The Wine application is a graphical application and hence requires access to the X server. Setting the environmet variable <code>DISPLAY=:0</code> instructs the application to access the local X server. The complete <code>Dockerfile</code> to build our Wine image looks as follows:</p>

<figure class='code'><figcaption><span>Dockerfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FROM debian:wheezy
</span><span class='line'>RUN dpkg --add-architecture i386
</span><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install --no-install-recommends --assume-yes wine
</span><span class='line'>ENV DISPLAY :0
</span></code></pre></td></tr></table></div></figure>


<p>You can kick off the build of the <code>wine1.4</code> image with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build --rm -t wine1.4 .
</span></code></pre></td></tr></table></div></figure>


<p>After a minute or two the build is complete and the resulting image is stored locally on your Docker host. You can take a look using the <code>docker images</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker images <span class="p">|</span> grep wine1.4
</span><span class='line'>wine1.4                   latest              b300b8573303        About a minute ago   271.3 MB
</span></code></pre></td></tr></table></div></figure>


<h2>Running Wine within a Docker container</h2>

<p>To test our <code>wine1.4</code> Docker image, we&rsquo;ll run the <code>notepad</code> application which comes with Wine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run --rm wine1.4 wine <span class="s2">&quot;C:\windows\system32\notepad.exe&quot;</span>
</span><span class='line'>wine: created the configuration directory <span class="s1">&#39;/root/.wine&#39;</span>
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>err:systray:initialize_systray Could not create tray window
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>
</span><span class='line'>....
</span></code></pre></td></tr></table></div></figure>


<p>The <code>notepad</code> application doesn&rsquo;t really start. From the generated error output we can see that our application is unable to access the X server. Well, there&rsquo;s no X server running inside the container. In order to allow the application running inside the container to access the X server running on the Docker host, we&rsquo;ll expose the host&rsquo;s X server UNIX domain socket inside the container. We can ask Docker to bind mount the <code>/tmp/.X11-unix/X0</code> UNIX socket to the same location inside the container using the <code>--volume</code> parameter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run --rm --volume /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 wine1.4 wine <span class="s2">&quot;C:\windows\system32\notepad.exe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run the above command, Wine starts up successfully and the notepad application opens up. Inside the Docker container Wine runs as user root and starts from scratch with no existing configuration:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/wine.png"></p>

<p>We would like Wine running inside the Docker container to use the existing Wine configuration stored on the Docker host. Let&rsquo;s copy the existing Wine configuration on the host to a new directory which we&rsquo;ll in turn expose inside the Docker container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>cp -a .wine .wine.docker
</span></code></pre></td></tr></table></div></figure>


<p>The <code>.wine.docker</code> directory can be exposed inside the Docker container  with the command-line parameter <code>--volume /home/anosek/.wine.docker:/home/anosek/.wine</code>. The Wine configuration in <code>.wine.docker</code> is in my case owned by the user <code>anosek</code>. We want Docker to run as user <code>anosek</code> instead of the default <code>root</code> user. In order to accomplish this, two additional parameters to the Docker <code>run</code> command are needed: <code>--volume /etc/passwd:/etc/passwd</code> and <code>--user anosek</code>. We&rsquo;re bind mounting the <code>/etc/passwd</code> file including the definition of user <code>anosek</code> inside the Docker container and asking Docker to run as user <code>anosek</code>.</p>

<p>The complete command to run Wine inside the Docker container as user <code>anosek</code> and using the existing Wine configuration found in the <code>/home/anosek/.wine.docker</code> directory on the host looks as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run --rm --volume /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 --volume /home/anosek/.wine.docker:/home/anosek/.wine --volume /etc/passwd:/etc/passwd --user anosek wine1.4 wine <span class="s2">&quot;C:\windows\system32\notepad.exe&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>One can leverage the modern Docker technology to create a specific Wine environment on any Linux system. To achieve this a little bit of configuration is required, though. In case of Wine you might be better off using some of the specialized tools for Wine management. For instance, <a href="https://www.playonlinux.com/" title="PlayOnLinux">PlayOnLinux</a> can manage different versions of Wine as well as different prefixes (<code>WINEPREFIX</code> environment variable).</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Diagrams and Images in Doxygen]]></title>
    <link href="http://alesnosek.com/blog/2015/06/28/diagrams-and-images-in-doxygen/"/>
    <updated>2015-06-28T21:54:54-07:00</updated>
    <id>http://alesnosek.com/blog/2015/06/28/diagrams-and-images-in-doxygen</id>
    <content type="html"><![CDATA[<p>Is your technical documentation hard to read? Diagrams and images liven up technical documentation and help the reader to better understand the subject. In the last article of the Doxygen miniseries we&rsquo;ll go over a couple of options how to include diagrams and images in Doxygen documentation.</p>

<!-- more -->


<p>In order to show the graphical capabilities of Doxygen I created a sample project. You can check out the project source code and the generated HTML and PDF output at:</p>

<ul>
<li><a href="https://github.com/noseka1/diagrams-and-images-in-doxygen" title="diagrams-and-images-in-doxygen">Source code on GitHub</a></li>
<li><a href="http://noseka1.github.com/diagrams-and-images-in-doxygen">The generated HTML output</a></li>
<li><a href="http://noseka1.github.com/diagrams-and-images-in-doxygen/refman.pdf">The generated PDF output</a></li>
</ul>


<p>Doxygen on its own doesn&rsquo;t implement graphical operations. However, it can include diagrams and images generated by external tools.</p>

<h2>DOT graphs</h2>

<p>The DOT language allows for simple definition of graphs. You can find a great documentation with many examples of DOT graphs in the manual <a href="http://www.graphviz.org/Documentation/dotguide.pdf" title="Drawing graphs with dot">Drawing graphs with dot</a>. Doxygen tag <code>@dot</code> allows for embedding the DOT graph definition directly into your documentation. The nodes of the graph can be made hyperlinks as it is demonstrated in the sample project. Doxygen itself uses DOT graphs to generate the class inheritance and call graph diagrams. In order to generate the DOT diagrams you need to have <code>dot</code> utility installed. On most distributions the <code>dot</code> utility can be found in the <code>graphviz</code> package.</p>

<h2>MSC sequence diagrams</h2>

<p><a href="http://www.mcternan.me.uk/mscgen/" title="Mscgen">Mscgen</a> is a handy utility for generating sequence diagrams. On many Linux distributions you can find it in the <code>mscgen</code> package. Similarly to DOT graphs, the parts of the mscgen diagrams can be made clickable, too. In Doxygen, you can include a MSC diagram by using <code>@msc</code> tag.</p>

<h2>PlantUML diagrams</h2>

<p>All kinds of UML diagrams can be created with <a href="http://plantuml.sourceforge.net/" title="PlantUML">PlantUML</a>. To learn about the different PlantUML features you can refer to the great reference guide <a href="http://plantuml.sourceforge.net/PlantUML_Language_Reference_Guide.pdf" title="Drawing UML with PlantUML">Drawing UML with PlantUML</a>. PlatUML is implemented in Java. You&rsquo;ll need to download the jar file <code>plantuml.jar</code> and tell the jar location to Doxygen in your <code>Doxyfile</code>. The definition of a PlantUML diagram in Doxygen must be enclosed in the <code>@startuml</code> and <code>@enduml</code> tags.</p>

<h2>Dia diagrams</h2>

<p>If you prefer drawing your diagrams directly instead of defining them as a plain text the <a href="http://dia-installer.de/" title="Dia Diagram Editor">Dia Diagram Editor</a> can be a good fit for you. On many Linux distributions come with a <code>dia</code> package. After you have created your dia file you insert it into the Doxygen documentation using the <code>@diafile</code> Doxygen tag.</p>

<h2>Inserting images</h2>

<p>Last thing that our sample project illustrates is inserting images into Doxygen documentation. You&rsquo;ll need to have your images ready in several graphical formats (<code>.svg</code>, <code>.eps</code>, &hellip;) depending on which Doxygen ouput you&rsquo;re willing to generate. For example, for <em>Latex</em> output the images must be provided in Encapsulated PostScript (<code>.eps</code>). Example of including the same image in multiple formats for <em>HTML</em> and <em>Latex</em> outputs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@image html people.svg
</span><span class='line'>@image latex people.eps "People image" width=\textwidth</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[The Structure of Doxygen Documentation]]></title>
    <link href="http://alesnosek.com/blog/2015/06/21/the-structure-of-doxygen-documentation/"/>
    <updated>2015-06-21T17:48:59-07:00</updated>
    <id>http://alesnosek.com/blog/2015/06/21/the-structure-of-doxygen-documentation</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s review some basic means that Doxygen provides to structure your documentation. If you&rsquo;re a newcomer to Doxygen this blogpost might be useful for you.</p>

<!-- more -->


<p>In order to demonstrate Doxygen features I created a sample project. You can check out the project source code and the generated HTML ouput at:</p>

<ul>
<li><a href="https://github.com/noseka1/structure-of-doxygen-doc" title="structure-of-doxygen-doc">Source code on GitHub</a></li>
<li><a href="http://noseka1.github.com/structure-of-doxygen-doc/">The generated HTML output</a></li>
</ul>


<p>The tree view in the generated HTML output looks as follows:</p>

<p><img class="center" src="http://alesnosek.com/images/posts/doxygen_treeview.png"></p>

<h2>Doxygen pages</h2>

<p>Pages in Doxygen are used for documentation that is not directly attached to the source code entity like class, file or member. They will typically contain a longer description of your project. You can refer to any source code entity from within the page if required.</p>

<p>There&rsquo;s always a project main page created by the Doxygen tag <code>@mainpage</code>. In our example, the title of the main page is <code>My Project</code>. All other pages listed under the main page are created using the Doxygen tag <code>@page</code>. In our example, we&rsquo;re using Markdown files where the <code>@page</code> tag is assumed and you&rsquo;re not required to write it. Doxygen automatically generates a page for every file with the <code>.markdown</code> extension. We talked about Markdown support in Doxygen in my <a href="http://alesnosek.com/blog/2015/06/14/technical-documentation-with-doxygen/" title="Technical Documentation with Doxygen">previous blogpost</a>.
The page hierarchy is created by the repetitive use of the Doxygen tag <code>@subpage</code>. The <code>@subpage</code> tag creates a parent-child relationship between two pages. It generates a reference (link) to the subpage at the same time. Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># The List of subpages:
</span><span class='line'>
</span><span class='line'>* Page @subpage subpage_1
</span><span class='line'>* Page @subpage subpage_2
</span><span class='line'>* Page @subpage subpage_3</span></code></pre></td></tr></table></div></figure>


<h2>Doxygen modules</h2>

<p>A larger software project typically consists of multiple modules. A module implements a particular project functionality. Doxygen cannot know which classes, files or namespaces belong to which module in your project. If you want to structure your documentation based on modules you&rsquo;ll need to tag each class, file or namespace with the module name. This allows Doxygen to understand your modularized design and generate the documentation accordingly.</p>

<p>You can start with a definition of your modules and their parent-child relationship in a separate Doxygen file. A module is defined using <code>@defgroup</code> Doxygen tag. In our example, we&rsquo;re defining a parent module <code>My Project Modules</code> with two submodules <code>Math library</code> and <code>Misc library</code>:</p>

<figure class='code'><figcaption><span>doxygen/group_defs.dox </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @defgroup group_main My Project Modules</span>
</span><span class='line'><span class="cm"> * @brief All project modules</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @{</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** @defgroup group_math Math library */</span>
</span><span class='line'><span class="cm">/** @defgroup group_misc Misc library */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** @} */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later in the source code, you can associate a class, file or a namespace with a module by using a Doxygen tag <code>@ingroup</code>:</p>

<figure class='code'><figcaption><span>src/math/factorial.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef MYPROJECT_MATH_FACTORIAL_H</span>
</span><span class='line'><span class="cp">#define MYPROJECT_MATH_FACTORIAL_H</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/** @ingroup group_math */</span>
</span><span class='line'><span class="n">namespace</span> <span class="n">myproject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="n">math</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/** @ingroup group_math */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">fact</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Namespaces, classes and files</h2>

<p>Doxygen automatically generates a list of namespaces, classes and files for you.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Technical Documentation with Doxygen]]></title>
    <link href="http://alesnosek.com/blog/2015/06/14/technical-documentation-with-doxygen/"/>
    <updated>2015-06-14T22:04:36-07:00</updated>
    <id>http://alesnosek.com/blog/2015/06/14/technical-documentation-with-doxygen</id>
    <content type="html"><![CDATA[<p>Do you create project documentation in your company&rsquo;s internal wiki? I did it for quite some time until I realized that a good old Doxygen combined with Git can do a much better job.</p>

<!-- more -->


<p><a href="http://www.stack.nl/~dimitri/doxygen/" title="Doxygen">Doxygen</a> is a well-known tool for generating documentation directly out of the annotated source code. However, it can be utilized to create technical documentation, too. In version 1.8.0, <a href="http://www.stack.nl/~dimitri/doxygen/manual/markdown.html" title="Markdown support">Markdown support</a> was introduced to Doxygen. <a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a> is a popular markup language. Plain text files written in Markdown format can be converted into HTML or many other formats. With Markdown support, creating technical documentation in Doxygen gets really easy.</p>

<h2>Doxygen sample project</h2>

<p>To get started, I read a <a href="http://svenax.net/site/2013/07/creating-user-documentation-with-doxygen/" title="Creating user documentation with Doxygen">very useful article</a> describing how to enable support of plain Markdown files in Doxygen and a couple of gotchas one might encounter. Gotchas? No worries! In record time I was able to create sample technical documentation. As sample content I used a couple of articles from my blog which were also coded in Markdown. Now I&rsquo;d like to share the project with you:</p>

<ul>
<li><a href="https://github.com/noseka1/tech-doc-with-doxygen" title="tech-doc-with-doxygen">Source code on GitHub</a></li>
<li><a href="http://noseka1.github.com/tech-doc-with-doxygen/">The generated HTML output</a></li>
<li><a href="http://noseka1.github.com/tech-doc-with-doxygen/refman.pdf">The generated PDF output</a></li>
<li><a href="http://noseka1.github.com/tech-doc-with-doxygen/refman.rtf">The generated RTF output</a></li>
</ul>


<p>The project shows a basic document structure. If you want to learn more about Doxygen I recommend downloading the Doxygen source distribution <a href="http://www.stack.nl/~dimitri/doxygen/download.html">tarball</a> or clone the Doxygen&rsquo;s project <a href="https://github.com/doxygen/doxygen">Git repository</a>. After extracting the tar archive go to the <code>doc</code> directory where you can find the sources of the Doxygen&rsquo;s <a href="http://www.stack.nl/~dimitri/doxygen/index.html" title="Doxygen">webpage</a>. You can learn a lot by reading through them.</p>

<p>Doxygen provides good support for creating graphs and diagrams in your technical document. For instance, you can insert graphs in <a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language" title="DOT">DOT</a> format with <code>@dot</code> or <code>@dotfile</code> tags. You can include <a href="http://www.mcternan.me.uk/mscgen/" title="MSC">MSC</a> sequence diagrams with <code>@msc</code> or <code>@mscfile</code> tags. To insert decent looking <a href="http://plantuml.sourceforge.net/" title="PlantUML">PlantUML</a> UML diagrams use <code>@startuml</code> tag. If you like to draw your diagrams in <a href="http://dia-installer.de/" title="Dia">Dia</a> you can insert them to Doxygen via <code>@diafile</code> tag.</p>

<h2>Conclusion</h2>

<p>Doxygen is a very powerful documentation tool. Chances are that you&rsquo;re already using it to generate a documentation from your source code. It makes a lot of sense to me to use Doxygen for project documentation instead of creating it in the Wiki. If you combine Doxygen with a good source control (e.g. Git) you gain the following benefits:</p>

<ul>
<li>History tracking and branching that no Wiki can provide</li>
<li>The same development workflow for your documentation as well as for your source code</li>
<li>Project documentation and source code at one place and possibly referencing each other</li>
</ul>

]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Seven Tips for Better Code]]></title>
    <link href="http://alesnosek.com/blog/2015/06/06/seven-tips-for-better-code/"/>
    <updated>2015-06-06T21:04:36-07:00</updated>
    <id>http://alesnosek.com/blog/2015/06/06/seven-tips-for-better-code</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a pleasure to read and maintain your code, right? Software practice teaches that code is written once but read many times. Your teammates will appreciate it if you put your effort into writing a good looking and understandable code. Needless to say that when you&rsquo;ll read your code one year later you&rsquo;ll appreciate it, too. Let&rsquo;s discuss a couple of basic guidelines to write a better code.</p>

<!-- more -->


<h2>1) Respect the pre-existing coding style</h2>

<p>You&rsquo;ve just joined a software project that run for a while. The coding conventions used on the project are weird and you really don&rsquo;t like them. Perhaps, they force you to put parenthesis on a new line or let you write variable names with the first letter in capital while you&rsquo;d prefer a small letter. They even violate the existing Java or C# language conventions. And the <a href="http://en.wikipedia.org/wiki/Hungarian_notation" title="Hungarian notation">Hungarian notation</a> looks just awful!</p>

<p>As a professional software developer, you&rsquo;ll find yourself in this situation many times. Unless you can reformat the code of the entire project it&rsquo;s better to stick with the coding style that&rsquo;s already in place. In other words, you should follow the already established coding style regardless whether  you like it or not. Perhaps, you can propose a change of coding style to your teammates when you&rsquo;re starting to work on a new project.</p>

<h2>2) Tabs versus spaces</h2>

<p>Is it better to use tabs or spaces to indent your code? Well, pick one but stick with it throughout your entire project. I prefer spaces because they let my code look the same in all editors. My editor is configured to convert tabs into spaces so that I don&rsquo;t have to tap on the space bar too much when indenting.</p>

<h2>3) Break your code down into methods</h2>

<p>It&rsquo;s a good practice to break down a complicated program logic into multiple methods. By doing so, you make it easier for the reader to understand the purpose of your code. Look at the following code example. Can you explain what the code is doing?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="c1">// Bloated program logic, don&#39;t do this!</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">retrieveData</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="s">&quot;file.txt&quot;</span><span class="o">));</span>
</span><span class='line'>                <span class="n">data</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The aim of the code is pretty simple. When retrieving data, look if the requested data is in the cache first and if not fetch it from the file. If the data was read from the file, put it into the cache to speed up the succeeding lookups. Let&rsquo;s rewrite the code example to make this logic apparent to the reader:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="n">String</span> <span class="nf">retrieveData</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="n">readDataFromFile</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="nf">readDataFromFile</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">FileReader</span><span class="o">(</span><span class="s">&quot;file.txt&quot;</span><span class="o">));</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">br</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The caching logic is now separate from the details of how to read the data from the file. Splitting the logic up into two methods greatly increased readability.</p>

<h2>4) Avoid excessive access to your instance variables</h2>

<p>Object-oriented programming introduced a <em>class</em> abstraction. Class groups the data with the code that can modify the data. Instead of using global variables that are accessible from any part of your program you can encapsulate your data with the code into a class. The scope where your data is accessible is now limited to the class members. However, your data is accessible by <em>any</em> class member. Assuming a very large class definition with a lot of members the data members can start feeling as a new form of global variables. I&rsquo;d like to suggest to you avoiding excessive access to your data members. Look at the following example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Number</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">increment</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">incrementNumber</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">incrementNumber</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// direct access to instance variable &quot;number&quot;. Not too good.</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="n">number</span> <span class="o">+</span> <span class="n">increment</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the code above the instance variable <code>number</code> is accessed from within two methods: <code>increment</code> and <code>incrementNumber</code>. Should it happen that the instance variable <code>number</code> is not set to the value you expected you&rsquo;ll need to review both methods because they&rsquo;re both accessing the problematic variable <code>number</code>.</p>

<p>The following version of the same code accesses the instance variable <code>number</code> only from within the method <code>increment</code>. The method <code>incrementNumber</code> is working only with a copy of the <code>number</code> variable created on the stack. When searching for a problem you&rsquo;ll start reviewing the <code>increment</code> method and possibly follow the data flow into the <code>incrementNumber</code> method when needed. Also, if you&rsquo;d like to reuse the code of the method <code>incrementNumber</code> it&rsquo;s easier to do now. The method <code>incrementNumber</code> doesn&rsquo;t access any instance variables and so you can separate it out into a <em>class</em> method right away.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Number</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">increment</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">=</span> <span class="n">incrementNumber</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="n">increment</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">incrementNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">inc</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// no access to instance variables</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">num</span> <span class="o">+</span> <span class="n">inc</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5) Prevent maintenance issues</h2>

<p>Look at the following code. Can you see a problem?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>        <span class="n">value</span><span class="o">++;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Value overflow&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The intention of the maintainer was to add an error message for the case that the value overflowed number 10. However, the code as it is written will log the error message in any case. When coding think about the future maintenance and use parenthesis to make very clear what the <code>if</code> and <code>else</code> parts are:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the maintainer tries to add an error message to this code he cannot introduce the bug illustrated in the previous code example. Out of curiosity, the Linux kernel project advocates no parenthesis around the if-else statement if not necessary. As always, the existing coding conventions take precedence.</p>

<h2>6) Use braces to make expressions more readable</h2>

<p>Programming languages define operator precedence and it&rsquo;s great that you&rsquo;re aware of it. Not every programmer has mastered the operator precedence and associativity table, though. Be kind and code your expressions very clearly. Braces can help you:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// relying on operator precedence</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">||</span> <span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// making very clear how the expression is evaluated</span>
</span><span class='line'><span class="k">if</span> <span class="o">((</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>7) Learn your programming language idioms</h2>

<p>There&rsquo;s no perfect programming language. Idioms get invented to work around the quirks of a specific programming language. Using idioms improves the maintanability of the code. You should learn and use them wherever possible. For Java idioms you can refer to <a href="http://c2.com/ppr/wiki/JavaIdioms/JavaIdioms.html" title="Java Idioms">Java Idioms</a> and <a href="http://www.nayuki.io/page/good-java-idioms" title="Good Java Idioms">Good Java Idioms</a>.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[OpenStack Dynamic DNS Updates]]></title>
    <link href="http://alesnosek.com/blog/2015/05/31/openstack-dynamic-dns-updates/"/>
    <updated>2015-05-31T22:49:39-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/31/openstack-dynamic-dns-updates</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s user story is: As a private cloud user I&rsquo;d like to have virtual machines registered with internal DNS. Let&rsquo;s look at how a software practitioner solves this problem in a truly agile way.</p>

<!-- more -->


<p>The OpenStack <a href="https://wiki.openstack.org/wiki/Designate" title="Designate">Designate</a> project implements DNSaaS. After trying out Designate, I realized that for simple DNS updates DNSaaS is a little too involved.</p>

<p>In my previous <a href="http://alesnosek.com/blog/2015/05/25/openstack-nova-notifications-subscriber" title="OpenStack Nova Notifications Subscriber">article</a> I described how to monitor Nova events on RabbitMQ message bus. Two events of interest are <code>compute.instance.create.end</code> and <code>compute.instance.delete.start</code> that are sent by Nova on instance creation and instance deletion. Both events carry enough information for us to create a simple script to extract the hostname and IP addresses of the instance from the events and update the internal DNS using the <code>nsupdate</code> command.</p>

<p>You can find the DNS updates implementantion including the systemd startup script at GitHub: <a href="https://github.com/noseka1/openstack-dns-updater" title="openstack-dns-updater">openstack-dns-updater</a>.</p>
]]></content>
  </entry>

</feed>
