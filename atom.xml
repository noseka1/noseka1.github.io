<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2015-05-31T23:50:32-07:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenStack Dynamic DNS Updates]]></title>
    <link href="http://alesnosek.com/blog/2015/05/31/openstack-dynamic-dns-updates/"/>
    <updated>2015-05-31T22:49:39-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/31/openstack-dynamic-dns-updates</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s user story is: As a private cloud user I&rsquo;d like to have virtual machines registered with internal DNS. Let&rsquo;s look at how a software practitioner solves this problem in a truly agile way.</p>

<!-- more -->


<p>The OpenStack <a href="https://wiki.openstack.org/wiki/Designate" title="Designate">Designate</a> project implements DNSaaS. After trying out Designate, I realized that for simple DNS updates DNSaaS is a little too involved.</p>

<p>In my previous <a href="http://alesnosek.com/blog/2015/05/25/openstack-nova-notifications-subscriber" title="OpenStack Nova Notifications Subscriber">article</a> I described how to monitor Nova events on RabbitMQ message bus. Two events of interest are <code>compute.instance.create.end</code> and <code>compute.instance.delete.start</code> that are sent by Nova on instance creation and instance deletion. Both events carry enough information for us to create a simple script that extracts the hostname and IP addresses of the instance from the events and updates the internal DNS using the <code>nsupdate</code> command.</p>

<p>You can find the DNS updates implementantion including the systemd startup script at GitHub: <a href="https://github.com/noseka1/openstack-dns-updater" title="openstack-dns-updater">openstack-dns-updater</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenStack Nova Notifications Subscriber]]></title>
    <link href="http://alesnosek.com/blog/2015/05/25/openstack-nova-notifications-subscriber/"/>
    <updated>2015-05-25T08:42:41-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/25/openstack-nova-notifications-subscriber</id>
    <content type="html"><![CDATA[<p>OpenStack components generate notifications that can provide useful insight into what is going on in OpenStack. Let&rsquo;s create a simple subcriber that dumps incoming notifications from OpenStack Nova to standard output.</p>

<!-- more -->


<h2>Configure Nova to generate notifications</h2>

<p>First let&rsquo;s make sure that Nova is configured to send out notifications. You should find the following lines in your <code>/etc/nova/nova.conf</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[DEFAULT]</span>
</span><span class='line'><span class="na">notification_topics</span><span class="o">=</span><span class="s">notifications</span>
</span><span class='line'><span class="na">notification_driver</span><span class="o">=</span><span class="s">messagingv2</span>
</span><span class='line'><span class="na">notify_on_state_change</span><span class="o">=</span><span class="s">vm_state</span>
</span></code></pre></td></tr></table></div></figure>


<p>Property <code>notification_topics</code> determines the base name of the topic (routing key) where the notification messages are sent to. The full name of the topic where the info-level notifications are published is <code>notifications.info</code>.
The possible choices of notification driver are briefly described in <a href="http://docs.openstack.org/developer/oslo.messaging/FAQ.html" title="Frequently Asked Questions">oslo.messaging FAQ</a>. The <code>messagingv2</code> option instructs Nova to send notifications using the 2.0 message format that wraps the messages into an oslo.messaging envelope. The <code>notify_on_state_change</code> property determines the kind of notifications Nova should send out. You can set its value to <code>vm_and_task_state</code> if you want to receive additional notifications. After you modified your <code>/etc/nova/nova.conf</code> restart the Nova components for changes to take effect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl restart openstack-nova-api
</span><span class='line'>sudo systemctl restart openstack-nova-compute
</span><span class='line'>sudo systemctl restart openstack-nova-conductor
</span><span class='line'>sudo systemctl restart openstack-nova-scheduler
</span></code></pre></td></tr></table></div></figure>


<h2>Implement Nova notifications subscriber</h2>

<p>Internally, Nova uses <a href="https://kombu.readthedocs.org/en/latest/" title="Kombu Documentation">Kombu</a> messaging library to connect to the RabbitMQ message broker. Let&rsquo;s use this Python library in our notifications subscriber to avoid the need to install additional libraries.</p>

<p>Nova sends out notification messages to a <em>topic</em> exchange called <code>nova</code> with the routing key <code>notifications.info</code>. In order to receive notification messages our client application needs to create a queue and bind it to the <code>nova</code> exchange. The binding key used to bind the queue to the <code>nova</code> exchange must match the routing key used by Nova to send out notification messages. Whenever there&rsquo;s a new message in the queue the Kombu library will invoke the <code>on_message</code> callback on our client to handle the message. The complete code of our notifications subscriber looks as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span> <span class="kn">as</span> <span class="nn">log</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">BrokerConnection</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Exchange</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Queue</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu.mixins</span> <span class="kn">import</span> <span class="n">ConsumerMixin</span>
</span><span class='line'>
</span><span class='line'><span class="n">EXCHANGE_NAME</span><span class="o">=</span><span class="s">&quot;nova&quot;</span>
</span><span class='line'><span class="n">ROUTING_KEY</span><span class="o">=</span><span class="s">&quot;notifications.info&quot;</span>
</span><span class='line'><span class="n">QUEUE_NAME</span><span class="o">=</span><span class="s">&quot;nova_dump_queue&quot;</span>
</span><span class='line'><span class="n">BROKER_URI</span><span class="o">=</span><span class="s">&quot;amqp://guest:guest@localhost:5672//&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">stream</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">log</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NotificationsDump</span><span class="p">(</span><span class="n">ConsumerMixin</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_consumers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">consumer</span><span class="p">,</span> <span class="n">channel</span><span class="p">):</span>
</span><span class='line'>        <span class="n">exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="n">EXCHANGE_NAME</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;topic&quot;</span><span class="p">,</span> <span class="n">durable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="n">QUEUE_NAME</span><span class="p">,</span> <span class="n">exchange</span><span class="p">,</span> <span class="n">routing_key</span> <span class="o">=</span> <span class="n">ROUTING_KEY</span><span class="p">,</span> <span class="n">durable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">auto_delete</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">no_ack</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span> <span class="n">consumer</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">callbacks</span> <span class="o">=</span> <span class="p">[</span> <span class="bp">self</span><span class="o">.</span><span class="n">on_message</span> <span class="p">])</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;Body: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;---------------&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&quot;Connecting to broker {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">BROKER_URI</span><span class="p">))</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">BrokerConnection</span><span class="p">(</span><span class="n">BROKER_URI</span><span class="p">)</span> <span class="k">as</span> <span class="n">connection</span><span class="p">:</span>
</span><span class='line'>        <span class="n">NotificationsDump</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you run the notifications subscriber and if everything went fine you should see the output similar to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO:root:Connecting to broker amqp://guest:guest@localhost:5672//
</span><span class='line'>DEBUG:amqp:Start from server, version: 0.9, properties: {u'information': u'Licensed under the MPL.  See http://www.rabbitmq.com/', u'product': u'RabbitMQ', u'copyright': u'Copyright (C) 2007-2014 GoPivotal, Inc.', u'capabilities': {u'exchange_exchange_bindings': True, u'connection.blocked': True, u'authentication_failure_close': True, u'basic.nack': True, u'per_consumer_qos': True, u'consumer_priorities': True, u'consumer_cancel_notify': True, u'publisher_confirms': True}, u'cluster_name': u'rabbit@rdo-controller', u'platform': u'Erlang/OTP', u'version': u'3.3.5'}, mechanisms: [u'AMQPLAIN', u'PLAIN'], locales: [u'en_US']
</span><span class='line'>DEBUG:amqp:Open OK!
</span><span class='line'>INFO:kombu.mixins:Connected to amqp://guest@127.0.0.1:5672//
</span><span class='line'>DEBUG:amqp:using channel_id: 1
</span><span class='line'>DEBUG:amqp:Channel open</span></code></pre></td></tr></table></div></figure>


<p>Whenever you create/delete an instance in OpenStack a host of notification messages should be rolling on your screen.</p>

<h2>Troubleshooting</h2>

<p>RabbitMQ comes with a <code>rabbitmqctl</code> command which can be used to inspect the state of the exchanges, queues and bindings in the running RabbitMQ instance. First let&rsquo;s check that the <code>nova</code> topic exchange exists:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rabbitmqctl list_exchanges <span class="p">|</span> grep nova
</span><span class='line'>nova    topic
</span></code></pre></td></tr></table></div></figure>


<p>Next let&rsquo;s make sure that our consumer queue was successfully created:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rabbitmqctl list_queues <span class="p">|</span> grep nova_dump_queue
</span><span class='line'>nova_dump_queue 0
</span></code></pre></td></tr></table></div></figure>


<p>As a last thing we want to double-check that our <code>nova_dump_queue</code> was bound with the <code>nova</code> exchange using the binding key <code>notifications.info</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rabbitmqctl list_bindings <span class="p">|</span> grep nova_dump_queue
</span><span class='line'>        exchange        nova_dump_queue queue   nova_dump_queue <span class="o">[]</span>
</span><span class='line'>nova    exchange        nova_dump_queue queue   notifications.info      <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>References</h2>

<p>You can find more detailed information on topic exchanges in the great RabbitMQ tutorial <a href="https://www.rabbitmq.com/tutorials/tutorial-five-python.html" title="Topics">here</a>. A version of the Nova notifications subscriber implemented with Python <a href="http://pika.readthedocs.org/en/latest/" title="Introduction to Pika">Pika</a> library is described in <a href="https://prosuncsedu.wordpress.com/2014/01/08/notification-of-actions-in-openstack-nova/" title="Action Notifications in OpenStack nova">this</a> blogpost.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five Basic Tips for Logging in Java]]></title>
    <link href="http://alesnosek.com/blog/2015/05/18/five-basic-tips-for-logging-in-java/"/>
    <updated>2015-05-18T01:11:47-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/18/five-basic-tips-for-logging-in-java</id>
    <content type="html"><![CDATA[<p>Where do you look when your server application doesn&rsquo;t work as expected? Application logs can provide invaluable information when the systems in production misbehave. That&rsquo;s why a great software practitioner desings the application logs carefully. Let&rsquo;s review a couple of basic tips for great logging in Java.</p>

<!-- more -->


<h2>1) Use SLF4J logging facade</h2>

<p>There are different Java logging frameworks out there: java.util.logging, Log4j, Log4j2 and Logback to name the most popular ones. <a href="http://www.slf4j.org/" title="Simple Logging Facade for Java (SLF4J)">SLF4J</a> is a thin facade that can talk to all of these logging frameworks. You can write your code using the SLF4J API and plugin in the desired logging framework at deployment time. Instead of tying yourself to Log4j framework like this code example does:</p>

<figure class='code'><figcaption><span>Log4jApp.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.log4j.Logger</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Log4jApp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Log4jApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Application using Log4j directly&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write your application using the SLF4J API:</p>

<figure class='code'><figcaption><span>Slf4jApp.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Slf4jApp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Application using SLF4J facade&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the second example you can see no <code>org.apache.log4j</code> package dependencies. At deployment time you can indeed plug-in Log4j framework as a logging backend but you can also opt for some of the other logging alternatives. You can refer to my <a href="http://alesnosek.com/blog/2015/05/11/java-logging-quick-reference/" title="Java Logging Quick Reference">previous article</a> on how to configure SLF4J with different logging frameworks.</p>

<p>If you&rsquo;re writing a library and need to do logging you should definitely consider using SLF4J. Having your library depend on a particular logging framework will not make your users happy if they prefer to deploy a different logging framework. Even when writing a stand-alone application you might come to the point when you need to break it up into libraries when it gets bigger. Save your time and use SLF4J up front.</p>

<h2>2) Keep the logging performance in mind</h2>

<p>You can improve the performance of your logging code by embracing the following programming idioms.</p>

<p>Instead of concatenating strings to form the logging message let the logging framework do it for you. In the following example assume that the log level was set to <code>info</code>, therefore debug messages won&rsquo;t be logged at all. The code at line 5 is concatenating five string objects in order to create one temporary string object which is not used anyway. You should instead follow the example at line 8. The formatting of the log message is done by the logging framework which is optimized to do the formatting only if the resulting message will actually be logged. Besides that, the code at line 8 is more readable than the variant at line 5.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">foo</span> <span class="o">=</span> <span class="s">&quot;foo&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">bar</span> <span class="o">=</span> <span class="s">&quot;bar&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// don&#39;t do this!</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Value of foo is &quot;</span> <span class="o">+</span> <span class="n">foo</span> <span class="o">+</span> <span class="s">&quot;. Value of bar is &quot;</span> <span class="o">+</span> <span class="n">bar</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// do this instead</span>
</span><span class='line'><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Value of foo is {}. Value of bar is {}.&quot;</span><span class="o">,</span> <span class="n">foo</span><span class="o">,</span> <span class="n">bar</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it is expensive to obtain the data to be logged make sure that the log level is high enough before you go to retrieve the data. The example below fetches the debug data from the database only if the current log level is <code>debug</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">data</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="c1">// fetch the data from the database</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Data from the database: &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3) Log Java exceptions</h2>

<p>Even if you&rsquo;d like to ignore Java exceptions at some places, do at least log it before you ignore it. Logging frameworks can log the stack trace of the Java exception nicely. The code in the following example catches and logs a <code>NullPointerException</code>:</p>

<figure class='code'><figcaption><span>LogException.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogException</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">exceptionalMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;My exception to be logged&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">exceptionalMethod</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Something went wrong&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces the following output in your logs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>22:16:58.677 [main] ERROR LogException - Something went wrong
</span><span class='line'>java.lang.NullPointerException: My exception to be logged
</span><span class='line'>  at LogException.exceptionalMethod(LogException.java:9) ~[bin/:na]
</span><span class='line'>  at LogException.main(LogException.java:13) ~[bin/:na]</span></code></pre></td></tr></table></div></figure>


<h2>4) Mark and filter your log messages</h2>

<p>Java logging frameworks allow you to filter log messages based on the logger name and the message log level. Logback and Log4j2 frameworks come with an additional filtering facility: Markers. You can tag your log messages with user-defined markers in order to filter them later on. In our example, we want to store the timing messages in a separate log file for later processing. In order to accomplish this we&rsquo;ll mark timing messages with the <code>time</code> marker. You can see the definition of the <code>time</code> marker at line 19 and logging of the marked message at line 20:</p>

<figure class='code'><figcaption><span>MarkerApp.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mport</span> <span class="n">org</span><span class="o">.</span><span class="na">slf4j</span><span class="o">.</span><span class="na">Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Marker</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.MarkerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MarkerApp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MarkerApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Log info message&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>      <span class="n">processRequest</span><span class="o">();</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Marker</span> <span class="n">timeMarker</span> <span class="o">=</span> <span class="n">MarkerFactory</span><span class="o">.</span><span class="na">getMarker</span><span class="o">(</span><span class="s">&quot;time&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">timeMarker</span><span class="o">,</span> <span class="s">&quot;Request processing took {} ms&quot;</span><span class="o">,</span> <span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">)/</span><span class="mi">1</span><span class="n">e6</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the logging configuration file we&rsquo;ll create two log appenders. The console appender sends all logging messages to the console output. In addition, the file appender logs only the messages marked with the <code>time</code> marker into the <code>/tmp/logger.out</code> log file.</p>

<figure class='code'><figcaption><span>log4j2.marker.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Appenders&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Console</span> <span class="na">name=</span><span class="s">&quot;console&quot;</span> <span class="na">target=</span><span class="s">&quot;SYSTEM_OUT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;PatternLayout</span> <span class="na">pattern=</span><span class="s">&quot;%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Console&gt;</span>
</span><span class='line'>        <span class="nt">&lt;File</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">fileName=</span><span class="s">&quot;/tmp/logger.out&quot;</span> <span class="na">append=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;PatternLayout</span> <span class="na">pattern=</span><span class="s">&quot;%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;Filters&gt;</span>
</span><span class='line'>                <span class="nt">&lt;MarkerFilter</span> <span class="na">marker=</span><span class="s">&quot;time&quot;</span> <span class="na">onMatch=</span><span class="s">&quot;ACCEPT&quot;</span> <span class="na">onMismatch=</span><span class="s">&quot;DENY&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/Filters&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/File&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Appenders&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Loggers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Root</span> <span class="na">level=</span><span class="s">&quot;debug&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;AppenderRef</span> <span class="na">ref=</span><span class="s">&quot;console&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;AppenderRef</span> <span class="na">ref=</span><span class="s">&quot;file&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Root&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Loggers&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run the example you&rsquo;ll see the following output on your console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>22:55:48 [main] INFO  MarkerApp:11 - Log info message
</span><span class='line'>22:55:48 [main] INFO  MarkerApp:20 - Request processing took 12.09897 ms</span></code></pre></td></tr></table></div></figure>


<p>You will find only the marked timing message in the <code>/tmp/logger.out</code> log file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>22:55:48 [main] INFO  MarkerApp:20 - Request processing took 12.09897 ms</span></code></pre></td></tr></table></div></figure>


<h2>5) Leverage diagnostic context in multithreaded applications</h2>

<p>Most server applications need to handle multiple clients simultaneously. Typically, the server application allocates a separate thread to handle a single client request. In such a system different threads handle different client requests in parallel and the log messages written by the threads interleave. In order to differentiate log messages from different threads from each other a diagnostic context comes in handy. Diagnostic context is a map associated with a particular thread. Each thread maintains its own map. You can store arbitrary key-value pairs in the map and in turn lay out your log messages to include the values from the map.</p>

<p>In the following example we want to log the name of the user on behalf of which we&rsquo;re doing some processing. In order to accomplish this we store the name of the user in the map under the key <code>user</code> before we start the processing. After the processing is complete we clear the map to get it ready for the next user.</p>

<figure class='code'><figcaption><span>MdcApp.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.MDC</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MdcApp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MdcApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Processing 1&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Processing 2&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Processing 3&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MDC</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="s">&quot;Joe&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">process</span><span class="o">();</span>
</span><span class='line'>      <span class="n">MDC</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>      <span class="n">MDC</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="s">&quot;Eleonora&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">process</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the logging configuration we need to configure the <code>PatternLayout</code> to include the <code>user</code> value from the map. The <code>%X{user}</code> formatting sequence does exactly that.</p>

<figure class='code'><figcaption><span>log4j2.mdc.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Appenders&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Console</span> <span class="na">name=</span><span class="s">&quot;console&quot;</span> <span class="na">target=</span><span class="s">&quot;SYSTEM_OUT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;PatternLayout</span> <span class="na">pattern=</span><span class="s">&quot;%d{HH:mm:ss} [%t] [%X{user}] %p %m%n&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Console&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Appenders&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Loggers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Root</span> <span class="na">level=</span><span class="s">&quot;debug&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;AppenderRef</span> <span class="na">ref=</span><span class="s">&quot;console&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Root&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Loggers&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you run the <code>MdcApp</code> application you&rsquo;ll see the following output on your console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00:01:30 [main] [Joe] INFO Processing 1
</span><span class='line'>00:01:30 [main] [Joe] INFO Processing 2
</span><span class='line'>00:01:30 [main] [Joe] INFO Processing 3
</span><span class='line'>00:01:30 [main] [Eleonora] INFO Processing 1
</span><span class='line'>00:01:30 [main] [Eleonora] INFO Processing 2
</span><span class='line'>00:01:30 [main] [Eleonora] INFO Processing 3</span></code></pre></td></tr></table></div></figure>


<p>Now you can tell the name of the user for whom you did the processing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Logging Quick Reference]]></title>
    <link href="http://alesnosek.com/blog/2015/05/11/java-logging-quick-reference/"/>
    <updated>2015-05-11T00:13:09-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/11/java-logging-quick-reference</id>
    <content type="html"><![CDATA[<p>The Simple Logging Facade for Java (SLF4J) serves as a simple abstraction for various logging frameworks. Let&rsquo;s look at how to configure SLF4J to work with SLF4J Simple logger, JDK 1.4 logger, Log4j, Logback and Log4j2 framework.</p>

<!-- more -->


<p>Following is a Java code of our logging application <code>LogApp</code>. Note that it uses SLF4J API classes to do the logging. The jar file <code>slf4j-api-1.7.12.jar</code> is the only compile time dependency.</p>

<figure class='code'><figcaption><span>LogApp.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogApp</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LogApp</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">&quot;Trace message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Debug message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Info message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Warning message&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Error message&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can compile the LogApp code with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>javac -cp slf4j-api-1.7.12.jar LogApp.java
</span></code></pre></td></tr></table></div></figure>


<p>And run the LogApp with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java -cp .:slf4j-api-1.7.12.jar LogApp
</span></code></pre></td></tr></table></div></figure>


<p>The output shows that SLF4J is missing a logger implementation. In the following we&rsquo;ll demonstrate how to plug in different logging backends. The principle is always the same: include the logging framework implementation jars on the classpath, include the respective SLF4J adaptor jar on the classpath and provide a configuration file specific to the logging framework.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
</span><span class='line'>SLF4J: Defaulting to no-operation (NOP) logger implementation
</span><span class='line'>SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span></code></pre></td></tr></table></div></figure>


<h2>SLF4J Simple logger</h2>

<p>The SLF4J comes with a Simple logger implemenation. Simple logger provides only basic functionality. It read its configuration from a <code>simplelogger.properties</code> file that must be included on the classpath. There&rsquo;s no way to specify a different location of the configuration file.</p>

<figure class='code'><figcaption><span>simplelogger.properties - Output to console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">org.slf4j.simpleLogger.logFile</span><span class="o">=</span><span class="s">System.out</span>
</span><span class='line'><span class="na">org.slf4j.simpleLogger.defaultLogLevel</span><span class="o">=</span><span class="s">debug</span>
</span><span class='line'><span class="na">org.slf4j.simpleLogger.showDateTime</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="na">org.slf4j.simpleLogger.dateTimeFormat</span><span class="o">=</span><span class="s">HH:mm:ss.SSS</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>simplelogger.properties - Output to file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">org.slf4j.simpleLogger.logFile</span><span class="o">=</span><span class="s">/tmp/logger.out</span>
</span><span class='line'><span class="na">org.slf4j.simpleLogger.defaultLogLevel</span><span class="o">=</span><span class="s">debug</span>
</span><span class='line'><span class="na">org.slf4j.simpleLogger.showDateTime</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="na">org.slf4j.simpleLogger.dateTimeFormat</span><span class="o">=</span><span class="s">HH:mm:ss.SSS</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the application with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java -cp .:slf4j-api-1.7.12.jar:slf4j-simple-1.7.12.jar LogApp
</span></code></pre></td></tr></table></div></figure>


<h2>JDK 1.4 logger (java.util.logging)</h2>

<p>The java.util.logging package was introduced in JDK 1.4. The default <code>logging.properties</code> configuration file that comes with JRE (<code>jre/lib/logging.properties</code>) specifies a ConsoleHandler that routes logging to System.err. There&rsquo;s no way how to configure the JDK 1.4 logger to log to standard output instead of standard error output unless you do the configuration programmaticaly. You can specify the location of your JDK 1.4 logging configuration file in <code>java.util.logging.config.file</code> Java property.</p>

<figure class='code'><figcaption><span>jdk14.stderr.properties - Output to console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">handlers</span><span class="o">=</span><span class="s">java.util.logging.ConsoleHandler</span>
</span><span class='line'><span class="na">.level</span><span class="o">=</span><span class="s">FINE</span>
</span><span class='line'><span class="na">java.util.logging.ConsoleHandler.level</span><span class="o">=</span><span class="s">FINE</span>
</span><span class='line'><span class="na">java.util.logging.ConsoleHandler.formatter</span><span class="o">=</span><span class="s">java.util.logging.SimpleFormatter</span>
</span><span class='line'><span class="c"># message pattern works since Java 7</span>
</span><span class='line'><span class="na">java.util.logging.SimpleFormatter.format</span><span class="o">=</span><span class="s">%1$tT [%2$s] %4$s - %5$s %6$s%n</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>jdk14.file.properties - Output to file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">handlers</span><span class="o">=</span><span class="s">java.util.logging.FileHandler</span>
</span><span class='line'><span class="na">.level</span><span class="o">=</span><span class="s">FINE</span>
</span><span class='line'><span class="na">java.util.logging.FileHandler.level</span><span class="o">=</span><span class="s">FINE</span>
</span><span class='line'><span class="na">java.util.logging.FileHandler.pattern</span><span class="o">=</span><span class="s">/tmp/logger.out</span>
</span><span class='line'><span class="na">java.util.logging.FileHandler.append</span><span class="o">=</span><span class="s">true</span>
</span><span class='line'><span class="na">java.util.logging.FileHandler.formatter</span><span class="o">=</span><span class="s">java.util.logging.SimpleFormatter</span>
</span><span class='line'><span class="c"># message pattern works since Java 7</span>
</span><span class='line'><span class="na">java.util.logging.SimpleFormatter.format</span><span class="o">=</span><span class="s">%1$tT [%2$s] %4$s - %5$s %6$s%n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the application with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java -cp .:slf4j-api-1.7.12.jar:slf4j-jdk14-1.7.12.jar -Djava.util.logging.config.file<span class="o">=</span>/tmp/jdk14.stderr.properties LogApp
</span></code></pre></td></tr></table></div></figure>


<h2>Log4j</h2>

<p>The Log4j doesn&rsquo;t log a single message for you unless you provide it with a proper configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>log4j:WARN No appenders could be found for logger (LogApp).
</span><span class='line'>log4j:WARN Please initialize the log4j system properly.
</span><span class='line'>log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></code></pre></td></tr></table></div></figure>


<p>The following are the sample Log4j configuration files. Note that the <code>log4j.configuration</code> Java property that specifies the location of the configuration file must be a URL. In the example below the <code>/tmp/log4j.stdout.properties</code> location has to be prepended with <code>file:</code> to form a URL.</p>

<figure class='code'><figcaption><span>log4j.stdout.properties - Output to console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.rootLogger</span><span class="o">=</span><span class="s">DEBUG, stdout</span>
</span><span class='line'><span class="na">log4j.appender.stdout</span><span class="o">=</span><span class="s">org.apache.log4j.ConsoleAppender</span>
</span><span class='line'><span class="na">log4j.appender.stdout.Target</span><span class="o">=</span><span class="s">System.out</span>
</span><span class='line'><span class="na">log4j.appender.stdout.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.stdout.layout.ConversionPattern</span><span class="o">=</span><span class="s">%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>log4j.file.properties - Output to file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">log4j.rootLogger</span><span class="o">=</span><span class="s">DEBUG, file</span>
</span><span class='line'><span class="na">log4j.appender.file</span><span class="o">=</span><span class="s">org.apache.log4j.FileAppender</span>
</span><span class='line'><span class="na">log4j.appender.file.File</span><span class="o">=</span><span class="s">/tmp/logger.out</span>
</span><span class='line'><span class="na">log4j.appender.file.layout</span><span class="o">=</span><span class="s">org.apache.log4j.PatternLayout</span>
</span><span class='line'><span class="na">log4j.appender.file.layout.ConversionPattern</span><span class="o">=</span><span class="s">%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the application with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java -cp .:slf4j-api-1.7.12.jar:slf4j-log4j12-1.7.12.jar:log4j-1.2.17.jar -Dlog4j.configuration<span class="o">=</span>file:/tmp/log4j.stdout.properties LogApp
</span></code></pre></td></tr></table></div></figure>


<h2>Logback</h2>

<p>With no configuration provided Logback defaults to printing all log messages on the console standard output. The <code>logback-classic</code> jar package that comes with Logback includes the <code>org.slf4j.impl.StaticLoggerBinder</code> class that serves as an adaptor to SLF4J framework. Therefore no extra SLF4J adaptor jar is needed on the runtime classpath. You can specify the location of your Logback configuration file in the <code>logback.configurationFile</code> Java property.</p>

<figure class='code'><figcaption><span>logback.stdout.xml - Output to console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;stdout&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Target&gt;</span>System.out<span class="nt">&lt;/Target&gt;</span>
</span><span class='line'>    <span class="nt">&lt;encoder&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pattern&gt;</span>%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n<span class="nt">&lt;/pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/encoder&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>  <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&quot;DEBUG&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;stdout&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/root&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>logback.file.xml - Output to file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appender</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">class=</span><span class="s">&quot;ch.qos.logback.core.FileAppender&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;File&gt;</span>/tmp/logger.out<span class="nt">&lt;/File&gt;</span>
</span><span class='line'>    <span class="nt">&lt;encoder&gt;</span>
</span><span class='line'>      <span class="nt">&lt;pattern&gt;</span>%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n<span class="nt">&lt;/pattern&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/encoder&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appender&gt;</span>
</span><span class='line'>  <span class="nt">&lt;root</span> <span class="na">level=</span><span class="s">&quot;DEBUG&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;appender-ref</span> <span class="na">ref=</span><span class="s">&quot;file&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/root&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the application with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -cp .:slf4j-api-1.7.12.jar:logback-core-1.1.3.jar:logback-classic-1.1.3.jar -Dlogback.configurationFile=/tmp/logback.stdout.xml LogApp</span></code></pre></td></tr></table></div></figure>


<h2>Log4j2</h2>

<p>With no configuration provided Log4j2 informs you that it logs only error messages to stdout. You can provide the location of your Log4j2 configuration file in the <code>log4j.configurationFile</code> Java property.</p>

<figure class='code'><figcaption><span>lang </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console.
</span><span class='line'>22:09:13.052 [main] ERROR LogApp - Error message</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>log4j2.stdout.xml - Output to console </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Appenders&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Console</span> <span class="na">name=</span><span class="s">&quot;console&quot;</span> <span class="na">target=</span><span class="s">&quot;SYSTEM_OUT&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;PatternLayout</span> <span class="na">pattern=</span><span class="s">&quot;%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Console&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Appenders&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Loggers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Root</span> <span class="na">level=</span><span class="s">&quot;debug&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;AppenderRef</span> <span class="na">ref=</span><span class="s">&quot;console&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Root&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Loggers&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>log4j2.file.xml - Output to file </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Appenders&gt;</span>
</span><span class='line'>        <span class="nt">&lt;File</span> <span class="na">name=</span><span class="s">&quot;file&quot;</span> <span class="na">fileName=</span><span class="s">&quot;/tmp/logger.out&quot;</span> <span class="na">append=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;PatternLayout</span> <span class="na">pattern=</span><span class="s">&quot;%d{HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/File&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Appenders&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Loggers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Root</span> <span class="na">level=</span><span class="s">&quot;debug&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;AppenderRef</span> <span class="na">ref=</span><span class="s">&quot;file&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Root&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Loggers&gt;</span>
</span><span class='line'><span class="nt">&lt;/Configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run the application with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>java -cp .:slf4j-api-1.7.12.jar:log4j-core-2.2.jar:log4j-api-2.2.jar:log4j-slf4j-impl-2.2.jar -Dlog4j.configurationFile<span class="o">=</span>/tmp/log4j2.stdout.xml LogApp
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic DNS with BIND and dhclient]]></title>
    <link href="http://alesnosek.com/blog/2015/05/02/dynamic-dns-with-bind-and-dhclient/"/>
    <updated>2015-05-02T19:21:43-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/02/dynamic-dns-with-bind-and-dhclient</id>
    <content type="html"><![CDATA[<p>In this blogpost we&rsquo;re going to configure the BIND server to accept dynamic updates. Client machines themselves will send the updates to the DNS server instead of letting DHCP server update the DNS. A great setup for situations where the DHCP server is not in your control.</p>

<!-- more -->


<p>Examples in this article work on RHEL6 that comes with BIND 9. You&rsquo;ll need to have <code>bind</code> and <code>bind-utils</code> RPM packages installed. In the following, the BIND server with host name <code>ns.somedomain.com</code> is an authoritative DNS server for the fictive zone <code>somedomain.com</code>.</p>

<h2>Dynamic DNS with BIND</h2>

<p>In our example we&rsquo;re going to configure the BIND server to accept DNS updates for <code>somedomain.com</code> zone from any client. In production environment you&rsquo;d use encryption keys to secure the access to the DNS server. You can read more on the secure configuration in <a href="http://linux.yyz.us/nsupdate/" title="nsupdate: Painless Dynamic DNS">this</a> excellent article. To allow any client to update the <code>somedomain.com</code> zone add the <code>allow-update { 0/0; };</code> option into your <code>/etc/named.conf</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zone "somedomain.com" in {
</span><span class='line'>        type master;
</span><span class='line'>        file "db.somedomain.com";
</span><span class='line'>        allow-update { 0/0; };
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>After restarting the DNS server with <code>sudo /etc/init.d/named restart</code> we can test that the DNS updates are working. Let&rsquo;s ask the DNS server <code>ns.somedomain.com</code> to register a host <code>somehost.somedomain.com</code> with IP address <code>192.168.100.200</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nsupdate -d <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">server ns.somedomain.com</span>
</span><span class='line'><span class="s">update add somehost.somedomain.com 300 A 192.168.100.200</span>
</span><span class='line'><span class="s">send</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything worked fine you should see <code>status: NOERROR</code> in the reply from update query. The DNS server created a new record in its database pairing the <code>somehost.somedomain.com</code> host name with the IP address <code>192.168.100.200</code>. Let&rsquo;s check that the host name resolution works by issuing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>host somehost.somedomain.com ns.somedomain.com
</span></code></pre></td></tr></table></div></figure>


<p>You should see the IP address <code>192.168.100.200</code> in the command output. When on the DNS server you can dump the zone data into <code>/var/named/data/cache_dump.db</code> file for inspection:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rndc dumpdb -all
</span></code></pre></td></tr></table></div></figure>


<h2>Updating DNS after IP acquisition</h2>

<p>Our virtual machines obtain their IP addresses via DHCP. Whenever the virtual machine obtains a new IP address or renews the lease we&rsquo;d like it to update the DNS accordingly. This way the DNS is always kept up to date and we&rsquo;re able to access the virtual machine using its host name.</p>

<p>The IP address acquisition is managed by the DHCP client <code>dhclient</code> running on the virtual machine. The <code>dhclient</code> can be extended by custom hooks. We are going to prepare a script that updates the DNS database whenever the virtual machine acquires an IP address. Our DNS update hook must be saved at <code>/etc/dhcp/dhclient-eth0-up-hooks</code>. The <code>/sbin/dhclient-script</code> shell script that comes with the <code>dhclient</code> package will execute the hook. Upon execution the hook is passed a <code>reason</code> variable describing the event.</p>

<p>To install the update hook on the virtual machine let&rsquo;s make use of Cloud-Init tool that I talked about in the <a href="http://alesnosek.com/blog/2015/04/26/using-cloud-init-outside-of-cloud/" title="Using Cloud-Init Outside of Cloud">previous blogpost</a>. The cloud-config script to be consumed by Cloud-Init looks as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1">#cloud-config</span>
</span><span class='line'><span class="l-Scalar-Plain">fqdn</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">somehost.somedomain.com</span>
</span><span class='line'><span class="l-Scalar-Plain">write_files</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/dhcp/dhclient-eth0-up-hooks</span>
</span><span class='line'>    <span class="l-Scalar-Plain">permissions</span><span class="p-Indicator">:</span> <span class="s">&#39;0755&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>      <span class="no">#!/bin/bash</span>
</span><span class='line'>      <span class="no">INTERFACE=eth0</span>
</span><span class='line'>      <span class="no">LEASE_FILE=/var/lib/dhclient/dhclient-$INTERFACE.leases</span>
</span><span class='line'>      <span class="no">HOST_ADDR=$(sed -n -e &#39;s/.*fixed-address \([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p&#39; $LEASE_FILE | tail -1)</span>
</span><span class='line'>      <span class="no">HOST_NAME=$(hostname)</span>
</span><span class='line'>      <span class="no">NAMESERVER=ns.somedomain.com</span>
</span><span class='line'>      <span class="no">TTL=300</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">if host $NAMESERVER 1&gt;/dev/null 2&gt;&amp;1; then</span>
</span><span class='line'>        <span class="no">case $reason in</span>
</span><span class='line'>          <span class="no">BOUND|RENEW|REBIND|REBOOT)</span>
</span><span class='line'>            <span class="no">nsupdate &lt;&lt; EOF</span>
</span><span class='line'>              <span class="no">server $NAMESERVER</span>
</span><span class='line'>              <span class="no">update delete $HOST_NAME A</span>
</span><span class='line'>              <span class="no">update add $HOST_NAME $TTL A $HOST_ADDR</span>
</span><span class='line'>              <span class="no">send</span>
</span><span class='line'>      <span class="no">EOF</span>
</span><span class='line'>          <span class="no">;;</span>
</span><span class='line'>        <span class="no">esac</span>
</span><span class='line'>      <span class="no">fi</span>
</span><span class='line'><span class="l-Scalar-Plain">runcmd</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hostname somehost.somedomain.com</span> <span class="c1"># fix the hostname incorrectly set up by cloud-init</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">reason=BOUND /etc/dhcp/dhclient-eth0-up-hooks</span> <span class="c1"># DNS registration on first boot</span>
</span></code></pre></td></tr></table></div></figure>


<p>Upon the very first execution of the hook the machine&rsquo;s network setup is not complete yet. There&rsquo;s no <code>/etc/resolv.conf</code> file written yet and the default route is not configured. The condition <code>if host $NAMESERVER; then ...</code> skips the DNS update in this case. Later in the initialization process the <code>runcmd</code> part of the cloud-config script gets executed. At this time the network configuration is complete and so we execute the update hook manually. This is the first time that the virtual machine registers itself with DNS. Cloud-Init executes the <code>runcmd</code> section only on the very first boot. Subsequent boots won&rsquo;t execute the <code>runcmd</code> code.</p>

<p>Note that we&rsquo;re parsing the <code>/var/lib/dhclient/dhclient-eth0.leases</code> file to obtain the acquired IP address. Should the virtual machine obtain different IP address in the future the DNS entry gets updated accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cloud-Init Outside of Cloud]]></title>
    <link href="http://alesnosek.com/blog/2015/04/26/using-cloud-init-outside-of-cloud/"/>
    <updated>2015-04-26T13:04:25-07:00</updated>
    <id>http://alesnosek.com/blog/2015/04/26/using-cloud-init-outside-of-cloud</id>
    <content type="html"><![CDATA[<p>In EC2 and OpenStack cloud environments <em>user data</em> can be passed to the cloud instance to customize the cloud instance on the first boot. But what if your virtual machine doesn&rsquo;t run in the cloud environment? In this article we&rsquo;re going to configure our virtual machines with user data regardless if they&rsquo;re running in the cloud or not.</p>

<!-- more -->


<h2>Introducing Cloud-Init</h2>

<p><a href="https://cloudinit.readthedocs.org/en/latest/" title="Cloud-Init documentation">Cloud-Init</a> is a tool that handles early initialization of a cloud instance. The <code>cloud-init</code> RPM package should be installed on the disk image which the cloud instance is going to boot up from. The package installs init scripts into <code>/etc/rc.d/init.d</code> that makes Cloud-Init run early during the system initialization. Cloud-Init obtains user data passed to it by the cloud software and executes them. User data contains a set of configuration tasks for the cloud instance. For example, Cloud-Init can update machine&rsquo;s hostname, configure <code>/etc/hosts</code>, create users, configure SSH authorized keys, resize filesystems, manage disk mounts, run user-defined scripts and <a href="https://cloudinit.readthedocs.org/en/latest/topics/examples.html" title="Cloud config examples">much more</a>.</p>

<blockquote><p>Even if you&#8217;re not running your virtual machines in the cloud environment it&#8217;s worth it to deploy Clout-Init.</p></blockquote>


<p>Every cloud software comes with its own mechanism of how to pass the user data to the cloud instance. For example, EC2 provides a <em>magic IP</em> from which the instance can download its user data. OpenStack cloud attaches a special <em>config drive</em> to the cloud instance containing the user data to be consumed by Clout-Init. In order to pass the user data to our virtual machine let&rsquo;s go the OpenStack way and assemble a minimum config drive.</p>

<h2>Config drive assembly</h2>

<p>First, we&rsquo;re going to prepare the following file structure for our config drive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config_drive
</span><span class='line'>config_drive/openstack
</span><span class='line'>config_drive/openstack/latest
</span><span class='line'>config_drive/openstack/2012-08-10
</span><span class='line'>config_drive/openstack/2012-08-10/meta_data.json
</span><span class='line'>config_drive/openstack/2012-08-10/user_data</span></code></pre></td></tr></table></div></figure>


<p>Start by creating directories and the <code>latest</code> symbolic link like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir config_drive
</span><span class='line'>mkdir -p config_drive/openstack/2012-08-10
</span><span class='line'>ln -s 2012-08-10 config_drive/openstack/latest</span></code></pre></td></tr></table></div></figure>


<p>Next create a minimum metadata file required by Cloud-Init. I&rsquo;m using a fully qualified domain name of the virtual machine as its UUID:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat &gt; config_drive/openstack/latest/meta_data.json <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">{</span>
</span><span class='line'><span class="s">    &quot;uuid&quot;: &quot;myinstance.mydomain.com&quot;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cloud-Init supports many <a href="https://cloudinit.readthedocs.org/en/latest/topics/format.html" title="Cloud-Init user data formats">formats</a> for scripts within user data. One of the most popular formats is the <em>cloud-config</em> file format. Let&rsquo;s create a cloud-config script that adds our SSH public key to the authorized keys for the user <code>root</code> on the virtual machine. We can then login into the virtual machine as user root without using a password. If you don&rsquo;t have a public-private SSH key pair you can quickly generate it using <code>ssh-keygen</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen -f mykey
</span></code></pre></td></tr></table></div></figure>


<p>Now create a <code>user_data</code> file with the configuration instructions for Cloud-Init. In the following code block replace the value of the <code>ssh-authorized-keys</code> field with the content of your generated <code>mykey.pub</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat &gt; config_drive/openstack/latest/user_data <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">#cloud-config</span>
</span><span class='line'><span class="s">fqdn: myinstance.mydomain.com</span>
</span><span class='line'><span class="s">users:</span>
</span><span class='line'><span class="s">  - name: root</span>
</span><span class='line'><span class="s">    ssh-authorized-keys:</span>
</span><span class='line'><span class="s">      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNH8Qwn4raGR1f9fvjbZe/GXM2N9Mh+eWlsFoYpcU4H5qf5YxT5CUo7BaTOgeE5geHyzxJQmCQlvoxcW3qkcjBJvVgEsTrrnX7KYS8BszvT4AMIuG2Za8f7myubXd6zYfj74XYhutUsPz7x2TEp9ZqbVkWcaElrQFxF2AzF7dV1RGntpPKyISqem70En8RYpGY514OLZ9TQDBYjbw8tfPuDd9mznXnWOZ34fPtP7+QDvOMFuA4tXsBpHj99/cbC0ViwzZtvb1QtY7dv9OFDgCRadw81+SKtzXctQ2rCYkb0huc0BCE7kLzinzlO62Znd+N1d+tpLAwP6i8Z5ZMXIJj user@machine</span>
</span><span class='line'><span class="s">EOF</span>
</span></code></pre></td></tr></table></div></figure>


<p>The file structure for our config drive is ready. Let&rsquo;s generate an ext2 filesystem and copy the files to it. The <code>virt-make-fs</code> utility from the <code>libguestfs-tools</code> package can help us with that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>virt-make-fs config_drive disk.config
</span></code></pre></td></tr></table></div></figure>


<p>In order for Cloud-Init to detect the attached drive as config drive the filesystem on the config drive needs to be labeled <code>config-2</code>. You can use <code>e2label</code> command from the <code>e2fsprogs</code> package to label your config drive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>e2label disk.config config-2
</span></code></pre></td></tr></table></div></figure>


<h2>Cloud-Init in action</h2>

<p>On my Linux host I&rsquo;m running <a href="http://libvirt.org/" title="Libvirt - The virtualization API">libvirt</a> to ease the management of virtual machines. You can install it by running <code>sudo yum install libvirt</code>. There is a handy command-line utility <code>virsh</code> which comes  with libvirt in the extra package <code>libvirt-client</code>.</p>

<p>Let&rsquo;s create a virtual machine with the config drive attached. As a virtual machine boot image I&rsquo;m using a CentOS-6 image from <a href="http://cloud.centos.org/centos/6/images/" title="CentOS-6 cloud images">cloud.centos.org</a> which comes with Cloud-Init built in. Make sure that your virtual machine boot image has Cloud-Init installed. Following is a virtual machine definition file for the CentoOS-6 virtual machine. You might need to change the location of the disk image files and save it as <code>CentOS-6.xml</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;domain</span> <span class="na">type=</span><span class="s">&#39;kvm&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>CentOS-6<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;memory</span> <span class="na">unit=</span><span class="s">&#39;KiB&#39;</span><span class="nt">&gt;</span>2097152<span class="nt">&lt;/memory&gt;</span>
</span><span class='line'>  <span class="nt">&lt;os&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>hvm<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/os&gt;</span>
</span><span class='line'>  <span class="nt">&lt;devices&gt;</span>
</span><span class='line'>    <span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;file&#39;</span> <span class="na">device=</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;driver</span> <span class="na">name=</span><span class="s">&quot;qemu&quot;</span> <span class="na">type=</span><span class="s">&quot;qcow2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">file=</span><span class="s">&#39;/tmp/CentOS-6-x86_64-GenericCloud.qcow2&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target</span> <span class="na">bus=</span><span class="s">&quot;virtio&quot;</span> <span class="na">dev=</span><span class="s">&quot;vda&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/disk&gt;</span>
</span><span class='line'>    <span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;file&#39;</span> <span class="na">device=</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;driver</span> <span class="na">name=</span><span class="s">&quot;qemu&quot;</span> <span class="na">type=</span><span class="s">&quot;raw&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">file=</span><span class="s">&#39;/tmp/disk.config&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target</span> <span class="na">bus=</span><span class="s">&quot;virtio&quot;</span> <span class="na">dev=</span><span class="s">&quot;vdb&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/disk&gt;</span>
</span><span class='line'>    <span class="nt">&lt;interface</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">network=</span><span class="s">&#39;default&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/interface&gt;</span>
</span><span class='line'>    <span class="nt">&lt;serial</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">path=</span><span class="s">&quot;/tmp/CentOS-6.log&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/serial&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/devices&gt;</span>
</span><span class='line'><span class="nt">&lt;/domain&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, everything is ready, let&rsquo;s launch our Cloud-Init enabled CentOS-6 virtual machine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh define CentOS-6.xml
</span><span class='line'>sudo virsh start CentOS-6
</span></code></pre></td></tr></table></div></figure>


<p>If everything went fine you can watch the console output of the booting virtual machine at <code>/tmp/CentOS-6.log</code>. Cloud-Init will print out the IP address obtained by the virtual machine (192.168.122.165 in my case) where we can login as root using the generated private key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -i testkey root@192.168.122.165
</span></code></pre></td></tr></table></div></figure>


<p>Congratulations, your virtual machine has just been configured by Cloud-Init the same way as any other virtual machine running in the cloud environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five Basic Tips for Teamwork with Git]]></title>
    <link href="http://alesnosek.com/blog/2015/04/18/five-basic-tips-for-teamwork-with-git/"/>
    <updated>2015-04-18T16:51:08-07:00</updated>
    <id>http://alesnosek.com/blog/2015/04/18/five-basic-tips-for-teamwork-with-git</id>
    <content type="html"><![CDATA[<p>Do you care about how your Git commits look like? A great software practitioner does, indeed. Let&rsquo;s review a couple of basic tips for developers that make the Git commit log look good and teamwork with Git source control more fun.</p>

<!-- more -->


<h2>1) Introduce yourself to Git</h2>

<p>When searching through the commit history your fellow developers would like to recognize that this particular awesome commit was created by you. Before your first commit, please, introduce yourself to Git. Tell Git your name and email address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global user.name <span class="s2">&quot;Ales Nosek&quot;</span>
</span><span class='line'>git config --global user.email <span class="s2">&quot;anosek@verimatrix.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2) Commit message formatting</h2>

<p>Respect the conventions for Git commit message formatting. The first line of the commit message is a short (50 chars or less) summary. The first letter of the summary is capitalized and there&rsquo;s no dot at the end of the summary. The summary begins with a reference to the issue in your bug tracking system if available. Use imperative in your summary line as you&rsquo;d be commanding your code to do something, i.e. write &ldquo;Remove obsolete code&rdquo; instead of &ldquo;Removed obsolete code&rdquo; or &ldquo;Removes obsolete code&rdquo;. More detailed explanatory text comes after a blank line. Here is a model Git commit message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PROJXREF-27 Remove obsolete code in component X
</span><span class='line'>    
</span><span class='line'>The logging functionality in component X is not needed anymore.
</span><span class='line'>Component Y took over the logging responsibility.</span></code></pre></td></tr></table></div></figure>


<p>See also this <a href="http://chris.beams.io/posts/git-commit/" title="How to Write a Git Commit Message">article</a> for more detailed explanation and examples.</p>

<h2>3) One commit per unit of work</h2>

<p>Create one commit per unit of work. A combined commit like &ldquo;Add method X, correct indention, clean up whitespaces&rdquo; is harder to review. Break your changes down into multiple commits, e.g. three commits &ldquo;Add method X&rdquo;, &ldquo;Correct indention&rdquo; and &ldquo;Clean up whitespaces&rdquo;.</p>

<h2>4) git diff <code>--</code>cached</h2>

<p>Before commiting <em>always</em> check your code changes. Make sure that your commit includes only the changes you intended to commit. Let your debug code and test modifications not flow into the production code base. Before committing double-check your changes with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git diff --cached</span></code></pre></td></tr></table></div></figure>


<h2>5) Trailing whitespaces</h2>

<p>Whitespace changes in the commit diffs decrease the readability of the commit diffs and make code review less fun. You can configure your editor to remove the trailing whitespaces for you on file save. Perhaps a better option though is to instruct Git to clean up the trailing white spaces automatically before comitting. You can use the commit hook <a href="http://stackoverflow.com/questions/591923/make-git-automatically-remove-trailing-whitespace-before-committing/3516525#3516525" title="Make git automatically remove trailing whitespace before committing">here</a> to do exactly that. Save the commit hook as file named <code>pre-commit</code>. Install the <code>pre-commit</code> script into your Git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp pre-commit my_existing_repo/.git/hooks
</span><span class='line'>chmod 755 my_existing_repo/.git/hooks/pre-commit</span></code></pre></td></tr></table></div></figure>


<p>The pre-commit hook will run only before the commit in this particular Git repository. If you&rsquo;d like Git to install the pre-commit hook to every newly created/cloned repository you&rsquo;ll need to add the hook file into your template directory. First tell Git where is your template directory located by adding the following into your <code>~/.gitconfig</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[init]
</span><span class='line'>        templatedir = ~/.gittemplate</span></code></pre></td></tr></table></div></figure>


<p>Now you can create your Git template directory and copy the <code>pre-commit</code> hook file into it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p ~/.gittemplate/hooks
</span><span class='line'>cp pre-commit ~/.gittemplate/hooks
</span><span class='line'>chmod 755 ~/.gittemplate/hooks/pre-commit</span></code></pre></td></tr></table></div></figure>


<p>From now on whenever you create/clone a Git repository you should find the <code>pre-commit</code> hook file installed at <code>.git/hooks/pre-commit</code>. Git will clean up trailing whitespaces for you before you commit.</p>
]]></content>
  </entry>
  
</feed>
