<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2015-05-17T19:09:44-07:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic DNS with BIND and dhclient]]></title>
    <link href="http://alesnosek.com/blog/2015/05/02/dynamic-dns-with-bind-and-dhclient/"/>
    <updated>2015-05-02T19:21:43-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/02/dynamic-dns-with-bind-and-dhclient</id>
    <content type="html"><![CDATA[<p>In this blogpost we&rsquo;re going to configure the BIND server to accept dynamic updates. Client machines themselves will send the updates to the DNS server instead of letting DHCP server update the DNS. A great setup for situations where the DHCP server is not in your control.</p>

<!-- more -->


<p>Examples in this article work on RHEL6 that comes with BIND 9. You&rsquo;ll need to have <code>bind</code> and <code>bind-utils</code> RPM packages installed. In the following, the BIND server with host name <code>ns.somedomain.com</code> is an authoritative DNS server for the fictive zone <code>somedomain.com</code>.</p>

<h2>Dynamic DNS with BIND</h2>

<p>In our example we&rsquo;re going to configure the BIND server to accept DNS updates for <code>somedomain.com</code> zone from any client. In production environment you&rsquo;d use encryption keys to secure the access to the DNS server. You can read more on the secure configuration in <a href="http://linux.yyz.us/nsupdate/" title="nsupdate: Painless Dynamic DNS">this</a> excellent article. To allow any client to update the <code>somedomain.com</code> zone add the <code>allow-update { 0/0; };</code> option into your <code>/etc/named.conf</code> file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zone &ldquo;somedomain.com&rdquo; in {
</span><span class='line'>        type master;
</span><span class='line'>        file &ldquo;db.somedomain.com&rdquo;;
</span><span class='line'>        allow-update { 0/0; };
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure></p>

<p>After restarting the DNS server with <code>sudo /etc/init.d/named restart</code> we can test that the DNS updates are working. Let&rsquo;s ask the DNS server <code>ns.somedomain.com</code> to register a host <code>somehost.somedomain.com</code> with IP address <code>192.168.100.200</code>:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nsupdate -d <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF
</span><span class='line'>server ns.somedomain.com
</span><span class='line'>update add somehost.somedomain.com <span class="m">300</span> A 192.168.100.200
</span><span class='line'>send
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure>
If everything worked fine you should see <code>status: NOERROR</code> in the reply from update query. The DNS server created a new record in its database pairing the <code>somehost.somedomain.com</code> host name with the IP address <code>192.168.100.200</code>. Let&rsquo;s check that the host name resolution works by issuing:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>host somehost.somedomain.com ns.somedomain.com
</span></code></pre></td></tr></table></div></figure>
You should see the IP address <code>192.168.100.200</code> in the command output. When on the DNS server you can dump the zone data into <code>/var/named/data/cache_dump.db</code> file for inspection:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rndc dumpdb -all
</span></code></pre></td></tr></table></div></figure></p>

<h2>Updating DNS after IP acquisition</h2>

<p>Our virtual machines obtain their IP addresses via DHCP. Whenever the virtual machine obtains a new IP address or renews the lease we&rsquo;d like it to update the DNS accordingly. This way the DNS is always kept up to date and we&rsquo;re able to access the virtual machine using its host name.</p>

<p>The IP address acquisition is managed by the DHCP client <code>dhclient</code> running on the virtual machine. The <code>dhclient</code> can be extended by custom hooks. We are going to prepare a script that updates the DNS database whenever the virtual machine acquires an IP address. Our DNS update hook must be saved at <code>/etc/dhcp/dhclient-eth0-up-hooks</code>. The <code>/sbin/dhclient-script</code> shell script that comes with the <code>dhclient</code> package will execute the hook. Upon execution the hook is passed a <code>reason</code> variable describing the event.</p>

<p>To install the update hook on the virtual machine let&rsquo;s make use of Cloud-Init tool that I talked about in the <a href="/blog/2015/04/26/using-cloud-init-outside-of-cloud/" title="Using Cloud-Init Outside of Cloud">previous blogpost</a>. The cloud-config script to be consumed by Cloud-Init looks as follows:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;h1&gt;cloud-config&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;fqdn</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">somehost.somedomain.com</span>
</span><span class='line'><span class="l-Scalar-Plain">write_files</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/dhcp/dhclient-eth0-up-hooks</span>
</span><span class='line'>    <span class="l-Scalar-Plain">permissions</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;0755&amp;rsquo;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">content</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>      <span class="no">#!/bin/bash</span>
</span><span class='line'>      <span class="no">INTERFACE=eth0</span>
</span><span class='line'>      <span class="no">LEASE_FILE=/var/lib/dhclient/dhclient-$INTERFACE.leases</span>
</span><span class='line'>      <span class="no">HOST_ADDR=$(sed -n -e &amp;rsquo;s/.&lt;em&gt;fixed-address ([0-9]+.[0-9]+.[0-9]+.[0-9]+).&lt;/em&gt;/\1/p&#39; $LEASE_FILE | tail -1)</span>
</span><span class='line'>      <span class="no">HOST_NAME=$(hostname)</span>
</span><span class='line'>      <span class="no">NAMESERVER=ns.somedomain.com</span>
</span><span class='line'>      <span class="no">TTL=300&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;  if host $NAMESERVER 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then</span>
</span><span class='line'>    <span class="l-Scalar-Plain">case $reason in</span>
</span><span class='line'>      <span class="l-Scalar-Plain">BOUND|RENEW|REBIND|REBOOT)</span>
</span><span class='line'>        <span class="l-Scalar-Plain">nsupdate &amp;lt;&amp;lt; EOF</span>
</span><span class='line'>          <span class="l-Scalar-Plain">server $NAMESERVER</span>
</span><span class='line'>          <span class="l-Scalar-Plain">update delete $HOST_NAME A</span>
</span><span class='line'>          <span class="l-Scalar-Plain">update add $HOST_NAME $TTL A $HOST_ADDR</span>
</span><span class='line'>          <span class="l-Scalar-Plain">send</span>
</span><span class='line'>  <span class="l-Scalar-Plain">EOF</span>
</span><span class='line'>      <span class="l-Scalar-Plain">;;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">esac</span>
</span><span class='line'>  <span class="l-Scalar-Plain">fi</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;runcmd</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">hostname somehost.somedomain.com</span> <span class="c1"># fix the hostname incorrectly set up by cloud-init</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">reason=BOUND /etc/dhcp/dhclient-eth0-up-hooks</span> <span class="c1"># DNS registration on first boot</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Upon the very first execution of the hook the machine&rsquo;s network setup is not complete yet. There&rsquo;s no <code>/etc/resolv.conf</code> file written yet and the default route is not configured. The condition <code>if host $NAMESERVER; then ...</code> skips the DNS update in this case. Later in the initialization process the <code>runcmd</code> part of the cloud-config script gets executed. At this time the network configuration is complete and so we execute the update hook manually. This is the first time that the virtual machine registers itself with DNS. Cloud-Init executes the <code>runcmd</code> section only on the very first boot. Subsequent boots won&rsquo;t execute the <code>runcmd</code> code.</p>

<p>Note that we&rsquo;re parsing the <code>/var/lib/dhclient/dhclient-eth0.leases</code> file to obtain the acquired IP address. Should the virtual machine obtain different IP address in the future the DNS entry gets updated accordingly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cloud-Init Outside of Cloud]]></title>
    <link href="http://alesnosek.com/blog/2015/04/26/using-cloud-init-outside-of-cloud/"/>
    <updated>2015-04-26T13:04:25-07:00</updated>
    <id>http://alesnosek.com/blog/2015/04/26/using-cloud-init-outside-of-cloud</id>
    <content type="html"><![CDATA[<p>In EC2 and OpenStack cloud environments <em>user data</em> can be passed to the cloud instance to customize the cloud instance on the first boot. But what if your virtual machine doesn&rsquo;t run in the cloud environment? In this article we&rsquo;re going to configure our virtual machines with user data regardless if they&rsquo;re running in the cloud or not.</p>

<!-- more -->


<h2>Introducing Cloud-Init</h2>

<p><a href="https://cloudinit.readthedocs.org/en/latest/" title="Cloud-Init documentation">Cloud-Init</a> is a tool that handles early initialization of a cloud instance. The <code>cloud-init</code> RPM package should be installed on the disk image which the cloud instance is going to boot up from. The package installs init scripts into <code>/etc/rc.d/init.d</code> that makes Cloud-Init run early during the system initialization. Cloud-Init obtains user data passed to it by the cloud software and executes them. User data contains a set of configuration tasks for the cloud instance. For example, Cloud-Init can update machine&rsquo;s hostname, configure <code>/etc/hosts</code>, create users, configure SSH authorized keys, resize filesystems, manage disk mounts, run user-defined scripts and <a href="https://cloudinit.readthedocs.org/en/latest/topics/examples.html" title="Cloud config examples">much more</a>.</p>

<p><blockquote><p>Even if you&rsquo;re not running your virtual machines in the cloud environment it&rsquo;s worth it to deploy Clout-Init.</p></blockquote></p>

<p>Every cloud software comes with its own mechanism of how to pass the user data to the cloud instance. For example, EC2 provides a <em>magic IP</em> from which the instance can download its user data. OpenStack cloud attaches a special <em>config drive</em> to the cloud instance containing the user data to be consumed by Clout-Init. In order to pass the user data to our virtual machine let&rsquo;s go the OpenStack way and assemble a minimum config drive.</p>

<h2>Config drive assembly</h2>

<p>First, we&rsquo;re going to prepare the following file structure for our config drive:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config_drive
</span><span class='line'>config_drive/openstack
</span><span class='line'>config_drive/openstack/latest
</span><span class='line'>config_drive/openstack/2012-08-10
</span><span class='line'>config_drive/openstack/2012-08-10/meta_data.json
</span><span class='line'>config_drive/openstack/2012-08-10/user_data</span></code></pre></td></tr></table></div></figure></p>

<p>Start by creating directories and the <code>latest</code> symbolic link like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir config_drive
</span><span class='line'>mkdir -p config_drive/openstack/2012-08-10
</span><span class='line'>ln -s 2012-08-10 config_drive/openstack/latest</span></code></pre></td></tr></table></div></figure></p>

<p>Next create a minimum metadata file required by Cloud-Init. I&rsquo;m using a fully qualified domain name of the virtual machine as its UUID:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat &gt; config_drive/openstack/latest/meta_data.json <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>uuid<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>myinstance.mydomain.com<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure></p>

<p>Cloud-Init supports many <a href="https://cloudinit.readthedocs.org/en/latest/topics/format.html" title="Cloud-Init user data formats">formats</a> for scripts within user data. One of the most popular formats is the <em>cloud-config</em> file format. Let&rsquo;s create a cloud-config script that adds our SSH public key to the authorized keys for the user <code>root</code> on the virtual machine. We can then login into the virtual machine as user root without using a password. If you don&rsquo;t have a public-private SSH key pair you can quickly generate it using <code>ssh-keygen</code> command:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh-keygen -f mykey
</span></code></pre></td></tr></table></div></figure></p>

<p>Now create a <code>user_data</code> file with the configuration instructions for Cloud-Init. In the following code block replace the value of the <code>ssh-authorized-keys</code> field with the content of your generated <code>mykey.pub</code> file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cat &gt; config_drive/openstack/latest/user_data <span class="p">&amp;</span>lt<span class="p">;&amp;</span>lt<span class="p">;</span> EOF&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;cloud-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;fqdn: myinstance.mydomain.com
</span><span class='line'>users:
</span><span class='line'>  - name: root
</span><span class='line'>    ssh-authorized-keys:
</span><span class='line'>      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNH8Qwn4raGR1f9fvjbZe/GXM2N9Mh+eWlsFoYpcU4H5qf5YxT5CUo7BaTOgeE5geHyzxJQmCQlvoxcW3qkcjBJvVgEsTrrnX7KYS8BszvT4AMIuG2Za8f7myubXd6zYfj74XYhutUsPz7x2TEp9ZqbVkWcaElrQFxF2AzF7dV1RGntpPKyISqem70En8RYpGY514OLZ9TQDBYjbw8tfPuDd9mznXnWOZ34fPtP7+QDvOMFuA4tXsBpHj99/cbC0ViwzZtvb1QtY7dv9OFDgCRadw81+SKtzXctQ2rCYkb0huc0BCE7kLzinzlO62Znd+N1d+tpLAwP6i8Z5ZMXIJj user@machine
</span><span class='line'>EOF
</span></code></pre></td></tr></table></div></figure></p>

<p>The file structure for our config drive is ready. Let&rsquo;s generate an ext2 filesystem and copy the files to it. The <code>virt-make-fs</code> utility from the <code>libguestfs-tools</code> package can help us with that:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>virt-make-fs config_drive disk.config
</span></code></pre></td></tr></table></div></figure></p>

<p>In order for Cloud-Init to detect the attached drive as config drive the filesystem on the config drive needs to be labeled <code>config-2</code>. You can use <code>e2label</code> command from the <code>e2fsprogs</code> package to label your config drive:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>e2label disk.config config-2
</span></code></pre></td></tr></table></div></figure></p>

<h2>Cloud-Init in action</h2>

<p>On my Linux host I&rsquo;m running <a href="http://libvirt.org/" title="Libvirt - The virtualization API">libvirt</a> to ease the management of virtual machines. You can install it by running <code>sudo yum install libvirt</code>. There is a handy command-line utility <code>virsh</code> which comes  with libvirt in the extra package <code>libvirt-client</code>.</p>

<p>Let&rsquo;s create a virtual machine with the config drive attached. As a virtual machine boot image I&rsquo;m using a CentOS-6 image from <a href="http://cloud.centos.org/centos/6/images/" title="CentOS-6 cloud images">cloud.centos.org</a> which comes with Cloud-Init built in. Make sure that your virtual machine boot image has Cloud-Init installed. Following is a virtual machine definition file for the CentoOS-6 virtual machine. You might need to change the location of the disk image files and save it as <code>CentOS-6.xml</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;domain</span> <span class="na">type=</span><span class="s">&#39;kvm&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>CentOS-6<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;memory</span> <span class="na">unit=</span><span class="s">&#39;KiB&#39;</span><span class="nt">&gt;</span>2097152<span class="nt">&lt;/memory&gt;</span>
</span><span class='line'>  <span class="nt">&lt;os&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>hvm<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/os&gt;</span>
</span><span class='line'>  <span class="nt">&lt;devices&gt;</span>
</span><span class='line'>    <span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;file&#39;</span> <span class="na">device=</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;driver</span> <span class="na">name=</span><span class="s">&quot;qemu&quot;</span> <span class="na">type=</span><span class="s">&quot;qcow2&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">file=</span><span class="s">&#39;/tmp/CentOS-6-x86_64-GenericCloud.qcow2&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target</span> <span class="na">bus=</span><span class="s">&quot;virtio&quot;</span> <span class="na">dev=</span><span class="s">&quot;vda&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/disk&gt;</span>
</span><span class='line'>    <span class="nt">&lt;disk</span> <span class="na">type=</span><span class="s">&#39;file&#39;</span> <span class="na">device=</span><span class="s">&#39;disk&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;driver</span> <span class="na">name=</span><span class="s">&quot;qemu&quot;</span> <span class="na">type=</span><span class="s">&quot;raw&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">file=</span><span class="s">&#39;/tmp/disk.config&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;target</span> <span class="na">bus=</span><span class="s">&quot;virtio&quot;</span> <span class="na">dev=</span><span class="s">&quot;vdb&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/disk&gt;</span>
</span><span class='line'>    <span class="nt">&lt;interface</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">network=</span><span class="s">&#39;default&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/interface&gt;</span>
</span><span class='line'>    <span class="nt">&lt;serial</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source</span> <span class="na">path=</span><span class="s">&quot;/tmp/CentOS-6.log&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/serial&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/devices&gt;</span>
</span><span class='line'><span class="nt">&lt;/domain&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Okay, everything is ready, let&rsquo;s launch our Cloud-Init enabled CentOS-6 virtual machine:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh define CentOS-6.xml
</span><span class='line'>sudo virsh start CentOS-6
</span></code></pre></td></tr></table></div></figure>
If everything went fine you can watch the console output of the booting virtual machine at <code>/tmp/CentOS-6.log</code>. Cloud-Init will print out the IP address obtained by the virtual machine (192.168.122.165 in my case) where we can login as root using the generated private key:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh -i testkey &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x72;&amp;#x6f;&amp;#x6f;&amp;#116;&amp;#x40;&amp;#x31;&amp;#57;&amp;#x32;&amp;#46;&amp;#x31;&amp;#54;&amp;#56;&amp;#x2e;&amp;#x31;&amp;#50;&amp;#50;&amp;#x2e;&amp;#x31;&amp;#54;&amp;#x35;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#114;&amp;#x6f;&amp;#111;&amp;#116;&amp;#x40;&amp;#49;&amp;#57;&amp;#x32;&amp;#x2e;&amp;#x31;&amp;#54;&amp;#x38;&amp;#46;&amp;#x31;&amp;#x32;&amp;#x32;&amp;#46;&amp;#x31;&amp;#x36;&amp;#x35;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>
Congratulations, your virtual machine has just been configured by Cloud-Init the same way as any other virtual machine running in the cloud environment.</p>
]]></content>
  </entry>
  
</feed>
