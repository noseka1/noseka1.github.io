<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2015-08-17T23:40:56-07:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[Multiple RHEL Mirrors on a Single Machine]]></title>
    <link href="http://alesnosek.com/blog/2015/08/16/multiple-rhel-mirrors-on-a-single-machine/"/>
    <updated>2015-08-16T22:23:11-07:00</updated>
    <id>http://alesnosek.com/blog/2015/08/16/multiple-rhel-mirrors-on-a-single-machine</id>
    <content type="html"><![CDATA[<p><em>Reposync</em> can mirror the yum repository to which your machine is subscribed to. However, you cannot subscribe your machine to the RHEL6 and RHEL7 at the same time. Let&rsquo;s take a look at how Docker can help us here.</p>

<!-- more -->


<p>The RHEL Docker images are available in the public registry. For example, the following command downloads a RHEL6 Docker image:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker pull rhel6
</span></code></pre></td></tr></table></div></figure></p>

<p>The downloaded image is not registered with <a href="https://access.redhat.com/" title="Red Hat Customer Portal">Red Hat Customer Portal</a> and hence cannot receive any software updates. To register the Docker image, you&rsquo;ll need the <em>username</em> and <em>password</em> you use to log in to the Red Hat Customer Portal.</p>

<h2>Docker and the build-time secrets</h2>

<p>You will encounter a problem when building and registering the RHEL image using a Dockerfile. How to register the RHEL image using your credentials without Docker baking those credentials into the image? You don&rsquo;t want others to discover your secrets in the image&rsquo;s metadata or the history log. As a matter of fact, there doesn&rsquo;t seem to be a secure way to pass the secrets to the Docker in build-time. And there is a nice <a href="https://github.com/docker/docker/issues/13490" title="Secrets in Docker">write-up</a> available in the Docker issue tracker describing the different approaches how to workaround this deficiency.</p>

<p>The following approach worked for me:</p>

<ol>
<li>Store the credentials into a file on the Docker host</li>
<li>Start a RHEL container with the credentials file mounted into it</li>
<li>Use the credentials to register the RHEL system</li>
<li>Stop the RHEL container</li>
<li>Commit the RHEL container into a new Docker image</li>
</ol>


<h2>Creating RHEL images with Ansible</h2>

<p>You can find the <code>rhel_reposync</code> Ansible role at <a href="https://github.com/noseka1/rhel_reposync" title="rhel_reposync">GitHub</a>. You want to run this role on your Docker host. It will download the RHEL6 and RHEL7 images, and register them with the Red Hat Customer Portal. You have to supply your Red Hat credentials on the command-line. For example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ansible-playbook -i hosts playbook.yml -e <span class="nv">redhat_portal_username</span><span class="o">=</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#117;&amp;#115;&amp;#101;&amp;#114;&amp;#x6e;&amp;#97;&amp;#x6d;&amp;#x65;&amp;#x40;&amp;#x63;&amp;#x6f;&amp;#x6d;&amp;#x70;&amp;#x61;&amp;#x6e;&amp;#121;&amp;#46;&amp;#99;&amp;#111;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#117;&amp;#x73;&amp;#x65;&amp;#x72;&amp;#x6e;&amp;#x61;&amp;#x6d;&amp;#x65;&amp;#64;&amp;#99;&amp;#111;&amp;#109;&amp;#x70;&amp;#97;&amp;#110;&amp;#121;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt; -e redhat_portal_password=secretpassword</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After the Ansible run is finished you&rsquo;ll find two images in your local Docker repository: <code>rhel6_reposync_registered</code> and <code>rhel7_reposync_registered</code>.</p>

<h2>Mirroring the RHEL repository</h2>

<p>To begin the RHEL repository mirroring you just start a container based on the registered image. The container expects a volume to be mounted at <code>/repodir</code>. It will save the downloaded RPM packages at this location.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm -v /var/www/html/RHEL6:/repodir rhel6_reposync_registered
</span></code></pre></td></tr></table></div></figure></p>

<h2>Alternative solution</h2>

<p>I discovered an <a href="https://github.com/pyther/upstream_sync" title="upstream_sync">upstream_sync</a> script that allows you to mirror multiple RHEL/CentOS repositories from a single machine. It uses a specific client SSL certificate and key to access each of the repositories. This solution is much simpler than the approach described in this article.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Improving Ansible's ini_file Module]]></title>
    <link href="http://alesnosek.com/blog/2015/08/03/improving-ansibles-ini-file-module/"/>
    <updated>2015-08-03T20:01:30-07:00</updated>
    <id>http://alesnosek.com/blog/2015/08/03/improving-ansibles-ini-file-module</id>
    <content type="html"><![CDATA[<p>For editing Windows INI files, Ansible comes with an <code>ini_file</code> module built in. Unfortunately, this module uses Python&rsquo;s <code>ConfigParser</code> module which reformats the entire INI file whenever you want to change a single line. It removes all the comment lines, too. For me this was not acceptable. After looking for a possible solution I decided to improve the <code>ini_file</code> module and created <code>ini_file2</code>. I realized how easy it is to create an Ansible module.</p>

<!-- more -->


<p>On Debian Linux, the Ansible&rsquo;s built-in <code>ini_file</code> module can be found at <code>/usr/share/ansible/files/ini_file</code>. This file is the base for our own <code>ini_file2</code>. The question was, at what location should one store the <code>ini_file2</code> module for Ansible to find it? From Ansible&rsquo;s <a href="http://docs.ansible.com/ansible/developing_modules.html" title="Developing Modules">documentation</a> I learned that when looking for modules, Ansible searches the <code>./library</code> directory alongside of the top level playbooks. That sounds perfect to me.</p>

<p>After a while working with the Python code, I created the <code>ini_file2</code> module. This module provides an equivalent functionality to the original <code>ini_file</code> module, however, it does only the minimum changes when editing the INI file. It typically modifies only one line. When removing options, it doesn&rsquo;t delete the lines but comment them out instead. If there was a commented out option it comments it in when required.</p>

<h2>The ini_file and ini_file2 comparison</h2>

<p>Let&rsquo;s compare the <code>ini_file</code> and <code>ini_file2</code> on a practical example. Our input INI file looks as follows:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">main</span> <span class="err">configuration</span> <span class="err">section&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;There</span> <span class="err">are</span> <span class="err">some</span> <span class="err">important</span> <span class="err">options</span> <span class="err">to</span> <span class="err">configure&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[main]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">first</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option1</span> <span class="o">=</span> <span class="s">orig_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">second</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;h1&gt;option2</span> <span class="o">=</span> <span class="s">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">last</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option3</span> <span class="o">=</span> <span class="s">some_value</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The Ansible test script will set the <code>option1</code> and <code>option2</code> to <code>new_value</code> and it will remove the <code>option3</code> from the INI file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Set option1 to new_value
</span><span class='line'>  ini_file: dest=settings.ini section=main option=option1 value=new_value&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>&lt;p>name: Set option2 to new_value
</span><span class='line'>ini_file: dest=settings.ini section=main option=option2 value=new_value&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>name: Remove option3
</span><span class='line'>ini_file: dest=settings.ini section=main option=option3 state=absent</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<p>When using the original <code>ini_file</code> module, the resulting INI file looks like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="na">option1</span> <span class="o">=</span> <span class="s">new_value</span>
</span><span class='line'><span class="na">option2</span> <span class="o">=</span> <span class="s">new_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can see that there&rsquo;s not much left from the input file. All comments are gone. In contrast, the <code>ini_file2</code> module does the editing operations with more precision:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">main</span> <span class="err">configuration</span> <span class="err">section&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;There</span> <span class="err">are</span> <span class="err">some</span> <span class="err">important</span> <span class="err">options</span> <span class="err">to</span> <span class="err">configure&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[main]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">first</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option1</span> <span class="o">=</span> <span class="s">new_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">second</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option2</span> <span class="o">=</span> <span class="s">new_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">last</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;h1&gt;option3</span> <span class="o">=</span> <span class="s">some_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>References</h2>

<p>The <code>ini_file2</code> source code as well as test scripts can be found at <a href="https://github.com/noseka1/ini_file2" title="ini_file2">GitHub</a>.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Running Wine within Docker]]></title>
    <link href="http://alesnosek.com/blog/2015/07/04/running-wine-within-docker/"/>
    <updated>2015-07-04T22:46:55-07:00</updated>
    <id>http://alesnosek.com/blog/2015/07/04/running-wine-within-docker</id>
    <content type="html"><![CDATA[<p>After upgrading to Debian Jessie, my Windows application running under Wine stopped working. In this article we&rsquo;ll use Docker to restore the Wine environment from Debian Wheezy. We&rsquo;ll run the Windows application inside this Docker container.</p>

<!-- more -->


<p>Docker is not part of the stable Jessie distribution, however, you can install it from the <a href="http://backports.debian.org/" title="Debian Backports">Debian Backports</a> repositories.</p>

<h2>Creating a Docker image</h2>

<p>We start off with creating a Docker image based on the <code>debian:wheezy</code> image from the official Docker repositories. We&rsquo;ll install the 32-bit Wine package on it. The Wine application is a graphical application and hence requires access to the X server. Setting the environmet variable <code>DISPLAY=:0</code> instructs the application to access the local X server. The complete <code>Dockerfile</code> to build our Wine image looks as follows:</p>

<p><figure class='code'><figcaption><span>Dockerfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FROM debian:wheezy
</span><span class='line'>RUN dpkg <span class="p">&amp;</span>ndash<span class="p">;</span>add-architecture i386
</span><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install <span class="p">&amp;</span>ndash<span class="p">;</span>no-install-recommends <span class="p">&amp;</span>ndash<span class="p">;</span>assume-yes wine
</span><span class='line'>ENV DISPLAY :0
</span></code></pre></td></tr></table></div></figure></p>

<p>You can kick off the build of the <code>wine1.4</code> image with:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build <span class="p">&amp;</span>ndash<span class="p">;</span>rm -t wine1.4 .
</span></code></pre></td></tr></table></div></figure></p>

<p>After a minute or two the build is complete and the resulting image is stored locally on your Docker host. You can take a look using the <code>docker images</code> command:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker images <span class="p">|</span> grep wine1.4
</span><span class='line'>wine1.4                   latest              b300b8573303        About a minute ago   271.3 MB
</span></code></pre></td></tr></table></div></figure></p>

<h2>Running Wine within a Docker container</h2>

<p>To test our <code>wine1.4</code> Docker image, we&rsquo;ll run the <code>notepad</code> application which comes with Wine:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm wine1.4 wine <span class="p">&amp;</span>ldquo<span class="p">;</span>C:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\n</span>otepad.exe<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>wine: created the configuration directory <span class="p">&amp;</span>lsquo<span class="p">;</span>/root/.wine<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>err:systray:initialize_systray Could not create tray window
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>hellip<span class="p">;</span>.
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>notepad</code> application doesn&rsquo;t really start. From the generated error output we can see that our application is unable to access the X server. Well, there&rsquo;s no X server running inside the container. In order to allow the application running inside the container to access the X server running on the Docker host, we&rsquo;ll expose the host&rsquo;s X server UNIX domain socket inside the container. We can ask Docker to bind mount the <code>/tmp/.X11-unix/X0</code> UNIX socket to the same location inside the container using the <code>--volume</code> parameter:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm <span class="p">&amp;</span>ndash<span class="p">;</span>volume /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 wine1.4 wine <span class="p">&amp;</span>ldquo<span class="p">;</span>C:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\n</span>otepad.exe<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When we run the above command, Wine starts up successfully and the notepad application opens up. Inside the Docker container Wine runs as user root and starts from scratch with no existing configuration:</p>

<p><img class="center" src="/images/posts/wine.png"></p>

<p>We would like Wine running inside the Docker container to use the existing Wine configuration stored on the Docker host. Let&rsquo;s copy the existing Wine configuration on the host to a new directory which we&rsquo;ll in turn expose inside the Docker container:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>cp -a .wine .wine.docker
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>.wine.docker</code> directory can be exposed inside the Docker container  with the command-line parameter <code>--volume /home/anosek/.wine.docker:/home/anosek/.wine</code>. The Wine configuration in <code>.wine.docker</code> is in my case owned by the user <code>anosek</code>. We want Docker to run as user <code>anosek</code> instead of the default <code>root</code> user. In order to accomplish this, two additional parameters to the Docker <code>run</code> command are needed: <code>--volume /etc/passwd:/etc/passwd</code> and <code>--user anosek</code>. We&rsquo;re bind mounting the <code>/etc/passwd</code> file including the definition of user <code>anosek</code> inside the Docker container and asking Docker to run as user <code>anosek</code>.</p>

<p>The complete command to run Wine inside the Docker container as user <code>anosek</code> and using the existing Wine configuration found in the <code>/home/anosek/.wine.docker</code> directory on the host looks as follows:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm <span class="p">&amp;</span>ndash<span class="p">;</span>volume /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 <span class="p">&amp;</span>ndash<span class="p">;</span>volume /home/anosek/.wine.docker:/home/anosek/.wine <span class="p">&amp;</span>ndash<span class="p">;</span>volume /etc/passwd:/etc/passwd <span class="p">&amp;</span>ndash<span class="p">;</span>user anosek wine1.4 wine <span class="p">&amp;</span>ldquo<span class="p">;</span>C:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\n</span>otepad.exe<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Conclusion</h2>

<p>One can leverage the modern Docker technology to create a specific Wine environment on any Linux system. To achieve this a little bit of configuration is required, though. In case of Wine you might be better off using some of the specialized tools for Wine management. For instance, <a href="https://www.playonlinux.com/" title="PlayOnLinux">PlayOnLinux</a> can manage different versions of Wine as well as different prefixes (<code>WINEPREFIX</code> environment variable).</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[OpenStack Dynamic DNS Updates]]></title>
    <link href="http://alesnosek.com/blog/2015/05/31/openstack-dynamic-dns-updates/"/>
    <updated>2015-05-31T22:49:39-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/31/openstack-dynamic-dns-updates</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s user story is: As a private cloud user I&rsquo;d like to have virtual machines registered with internal DNS. Let&rsquo;s look at how a software practitioner solves this problem in a truly agile way.</p>

<!-- more -->


<p>The OpenStack <a href="https://wiki.openstack.org/wiki/Designate" title="Designate">Designate</a> project implements DNSaaS. After trying out Designate, I realized that for simple DNS updates DNSaaS is a little too involved.</p>

<p>In my previous <a href="/blog/2015/05/25/openstack-nova-notifications-subscriber" title="OpenStack Nova Notifications Subscriber">article</a> I described how to monitor Nova events on RabbitMQ message bus. Two events of interest are <code>compute.instance.create.end</code> and <code>compute.instance.delete.start</code> that are sent by Nova on instance creation and instance deletion. Both events carry enough information for us to create a simple script to extract the hostname and IP addresses of the instance from the events and update the internal DNS using the <code>nsupdate</code> command.</p>

<p>You can find the DNS updates implementantion including the systemd startup script at GitHub: <a href="https://github.com/noseka1/openstack-dns-updater" title="openstack-dns-updater">openstack-dns-updater</a>.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[OpenStack Nova Notifications Subscriber]]></title>
    <link href="http://alesnosek.com/blog/2015/05/25/openstack-nova-notifications-subscriber/"/>
    <updated>2015-05-25T08:42:41-07:00</updated>
    <id>http://alesnosek.com/blog/2015/05/25/openstack-nova-notifications-subscriber</id>
    <content type="html"><![CDATA[<p>OpenStack components generate notifications that can provide useful insight into what is going on in OpenStack. Let&rsquo;s create a simple subcriber that dumps incoming notifications from OpenStack Nova to standard output.</p>

<!-- more -->


<h2>Configure Nova to generate notifications</h2>

<p>First let&rsquo;s make sure that Nova is configured to send out notifications. You should find the following lines in your <code>/etc/nova/nova.conf</code> file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[DEFAULT]</span>
</span><span class='line'><span class="na">notification_topics</span><span class="o">=</span><span class="s">notifications</span>
</span><span class='line'><span class="na">notification_driver</span><span class="o">=</span><span class="s">messagingv2</span>
</span><span class='line'><span class="na">notify_on_state_change</span><span class="o">=</span><span class="s">vm_state</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Property <code>notification_topics</code> determines the base name of the topic (routing key) where the notification messages are sent to. The full name of the topic where the info-level notifications are published is <code>notifications.info</code>.
The possible choices of notification driver are briefly described in <a href="http://docs.openstack.org/developer/oslo.messaging/FAQ.html" title="Frequently Asked Questions">oslo.messaging FAQ</a>. The <code>messagingv2</code> option instructs Nova to send notifications using the 2.0 message format that wraps the messages into an oslo.messaging envelope. The <code>notify_on_state_change</code> property determines the kind of notifications Nova should send out. You can set its value to <code>vm_and_task_state</code> if you want to receive additional notifications. After you modified your <code>/etc/nova/nova.conf</code> restart the Nova components for changes to take effect:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl restart openstack-nova-api
</span><span class='line'>sudo systemctl restart openstack-nova-compute
</span><span class='line'>sudo systemctl restart openstack-nova-conductor
</span><span class='line'>sudo systemctl restart openstack-nova-scheduler
</span></code></pre></td></tr></table></div></figure></p>

<h2>Implement Nova notifications subscriber</h2>

<p>Internally, Nova uses <a href="https://kombu.readthedocs.org/en/latest/" title="Kombu Documentation">Kombu</a> messaging library to connect to the RabbitMQ message broker. Let&rsquo;s use this Python library in our notifications subscriber to avoid the need to install additional libraries.</p>

<p>Nova sends out notification messages to a <em>topic</em> exchange called <code>nova</code> with the routing key <code>notifications.info</code>. In order to receive notification messages our client application needs to create a queue and bind it to the <code>nova</code> exchange. The binding key used to bind the queue to the <code>nova</code> exchange must match the routing key used by Nova to send out notification messages. Whenever there&rsquo;s a new message in the queue the Kombu library will invoke the <code>on_message</code> callback on our client to handle the message. The complete code of our notifications subscriber looks as follows:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">logging</span> <span class="kn">as</span> <span class="nn">log</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">BrokerConnection</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Exchange</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Queue</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">kombu.mixins</span> <span class="kn">import</span> <span class="n">ConsumerMixin</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">EXCHANGE_NAME</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">nova</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">ROUTING_KEY</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">notifications</span><span class="o">.</span><span class="n">info</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">QUEUE_NAME</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">nova_dump_queue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">BROKER_URI</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">amqp</span><span class="p">:</span><span class="o">//</span><span class="n">guest</span><span class="p">:</span><span class="n">guest</span><span class="nd">@localhost</span><span class="p">:</span><span class="mi">5672</span><span class="o">//&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">log</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">stream</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="n">log</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">NotificationsDump</span><span class="p">(</span><span class="n">ConsumerMixin</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">connection</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">connection</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_consumers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">consumer</span><span class="p">,</span> <span class="n">channel</span><span class="p">):</span>
</span><span class='line'>    <span class="n">exchange</span> <span class="o">=</span> <span class="n">Exchange</span><span class="p">(</span><span class="n">EXCHANGE_NAME</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&quot;topic&quot;</span><span class="p">,</span> <span class="n">durable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="n">QUEUE_NAME</span><span class="p">,</span> <span class="n">exchange</span><span class="p">,</span> <span class="n">routing_key</span> <span class="o">=</span> <span class="n">ROUTING_KEY</span><span class="p">,</span> <span class="n">durable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">auto_delete</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">no_ack</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span> <span class="n">consumer</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">callbacks</span> <span class="o">=</span> <span class="p">[</span> <span class="bp">self</span><span class="o">.</span><span class="n">on_message</span> <span class="p">])</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;Body: </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;---------------&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
</span><span class='line'>    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Connecting</span> <span class="n">to</span> <span class="n">broker</span> <span class="p">{}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">BROKER_URI</span><span class="p">))</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">BrokerConnection</span><span class="p">(</span><span class="n">BROKER_URI</span><span class="p">)</span> <span class="k">as</span> <span class="n">connection</span><span class="p">:</span>
</span><span class='line'>        <span class="n">NotificationsDump</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After you run the notifications subscriber and if everything went fine you should see the output similar to:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO:root:Connecting to broker amqp://guest:guest@localhost:5672//
</span><span class='line'>DEBUG:amqp:Start from server, version: 0.9, properties: {u'information': u'Licensed under the MPL.  See &lt;a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/&lt;/a>&lsquo;, u'product&rsquo;: u'RabbitMQ', u'copyright': u'Copyright &copy; 2007-2014 GoPivotal, Inc.&lsquo;, u'capabilities&rsquo;: {u'exchange_exchange_bindings': True, u'connection.blocked': True, u'authentication_failure_close': True, u'basic.nack': True, u'per_consumer_qos': True, u'consumer_priorities': True, u'consumer_cancel_notify': True, u'publisher_confirms': True}, u'cluster_name': u'rabbit@rdo-controller', u'platform': u'Erlang/OTP', u'version': u'3.3.5'}, mechanisms: [u'AMQPLAIN', u'PLAIN'], locales: [u'en_US']
</span><span class='line'>DEBUG:amqp:Open OK!
</span><span class='line'>INFO:kombu.mixins:Connected to amqp://guest@127.0.0.1:5672//
</span><span class='line'>DEBUG:amqp:using channel_id: 1
</span><span class='line'>DEBUG:amqp:Channel open</span></code></pre></td></tr></table></div></figure>
Whenever you create/delete an instance in OpenStack a host of notification messages should be rolling on your screen.</p>

<h2>Troubleshooting</h2>

<p>RabbitMQ comes with a <code>rabbitmqctl</code> command which can be used to inspect the state of the exchanges, queues and bindings in the running RabbitMQ instance. First let&rsquo;s check that the <code>nova</code> topic exchange exists:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rabbitmqctl list_exchanges <span class="p">|</span> grep nova
</span><span class='line'>nova    topic
</span></code></pre></td></tr></table></div></figure></p>

<p>Next let&rsquo;s make sure that our consumer queue was successfully created:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rabbitmqctl list_queues <span class="p">|</span> grep nova_dump_queue
</span><span class='line'>nova_dump_queue 0
</span></code></pre></td></tr></table></div></figure></p>

<p>As a last thing we want to double-check that our <code>nova_dump_queue</code> was bound with the <code>nova</code> exchange using the binding key <code>notifications.info</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo rabbitmqctl list_bindings <span class="p">|</span> grep nova_dump_queue
</span><span class='line'>        exchange        nova_dump_queue queue   nova_dump_queue <span class="o">[]</span>
</span><span class='line'>nova    exchange        nova_dump_queue queue   notifications.info      <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>References</h2>

<p>You can find more detailed information on topic exchanges in the great RabbitMQ tutorial <a href="https://www.rabbitmq.com/tutorials/tutorial-five-python.html" title="Topics">here</a>. A version of the Nova notifications subscriber implemented with Python <a href="http://pika.readthedocs.org/en/latest/" title="Introduction to Pika">Pika</a> library is described in <a href="https://prosuncsedu.wordpress.com/2014/01/08/notification-of-actions-in-openstack-nova/" title="Action Notifications in OpenStack nova">this</a> blogpost.</p>
]]></content>
  </entry>

</feed>
