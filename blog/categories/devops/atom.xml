<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2017-01-22T22:29:07-08:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[TripleO Installer, Production Ready?]]></title>
    <link href="http://alesnosek.com/blog/2017/01/15/tripleo-installer-production-ready/"/>
    <updated>2017-01-15T23:13:32-08:00</updated>
    <id>http://alesnosek.com/blog/2017/01/15/tripleo-installer-production-ready</id>
    <content type="html"><![CDATA[<p><a href="https://wiki.openstack.org/wiki/TripleO">TripleO</a> is an OpenStack deployment and management tool we&rsquo;ve been using on the production systems for a while now. As TripleO is an upstream project for the Red Hat OpenStack Platform Director one would expect a decently working tool able to manage large-scale OpenStack deployments. What is our experience with TripleO?</p>

<!-- more -->


<h2>Introduction</h2>

<p>Six months have passed since we deployed a private cloud in our company. Our cloud is based on the RDO distribution of OpenStack Mitaka running on top of RHEL 7. I have to say that we&rsquo;re very happy with our cloud-based environment. OpenStack simplified the management of virtual machines and boosted the productivity of our engineering team which enjoys the self-service provided by the OpenStack APIs. Our test automation creates and destroys many virtual machines a day making sure that our software product is tested in a clean and well-defined environment. OpenStack quickly became a critical part of our infrastructure.</p>

<p>Hence we were less pleased when the last week a routine maintenance of the OpenStack cluster turned into an unplanned downtime of two compute nodes. But before we get to the problem itself let me introduce you to the specifics of how we manage the OpenStack cluster.</p>

<h2>Overcloud maintenance is a challenge</h2>

<p>A cloud life-cycle management tool of choice in the RDO distribution is TripleO. I published an article about my initial experience with TripleO a while ago: <a href="/blog/2016/03/27/tripleo-installer-the-good/">TripleO Installer - the Good, the Bad and the Ugly</a>. Overall, the way how TripleO configures the OpenStack cluster is rather less flexible. After spending time on customizing and patching TripleO we decided that there must be an easier way. Eventually, we implemented our own set of Ansible scripts that allow an additional fine-grained configuration of OpenStack nodes. After the <code>openstack overcloud deploy</code> command is complete we run our Ansible scripts to apply an additional configuration to the overcloud. There are two benefits to this approach. First, we don&rsquo;t have to patch TripleO scripts which will be upgraded in the next release of OpenStack. And second, we can keep using Ansible which is our favorite configuration tool.</p>

<p>Having updated the overcloud using TripleO several times we realized that the update procedure is rather unreliable. Some time the TripleO update would fail with an error. Other time the overcloud update would just hang forever. Probably due to the undeterministic behaviour of the Puppet scripts that constitute a substantial part of TripleO we experienced random errors that would not occur again after restarting the update procedure. Situation got worse after we configured the overcloud Keystone to authenticate OpenStack users against Active Directory. The overcloud update would not run into completion anymore due to a defect in the Puppet scripts.</p>

<p>Because fixing the TripleO scripts would require additional effort and the overcloud update would remain a risky operation either way we concluded that we will require a downtime when updating the overcloud. During the downtime period the existing virtual machines are fully operational only the OpenStack services that allow users to create or delete virtual machines or other cloud resources are not available. In the case of our private cloud this was an acceptable albeit not ideal solution.</p>

<p>In summary, we can depict our OpenStack maintenance process like this:</p>

<p><img src="/images/posts/openstack_maintenance_process.svg" width="500" height="700" title="OpenStack Maintenance Process" ></p>

<h2>TripleO installer and the resulting downtime</h2>

<p>On all our OpenStack nodes we use bonded network interfaces to protect the nodes against network failures. In network interface bonding a pair of physical network interfaces is combined into a single logical interface. This provides redundancy by allowing failover from one physical interface to another in the case of failure.</p>

<p>It happened to us that on two of our compute nodes one physical network interface per bond was not working. In this situation the network connection is still functional but not redundant anymore. Unfortunately, for the TripleO installer this was not good enough. Normally, during the overcloud update the <code>os-net-config</code> utility configures the node networking. Due to the single network interface down <code>os-net-config</code> failed to create a correct network configuration. A &ldquo;safe&rdquo; default configuration was generated instead which configured all available network interfaces to use DHCP. Unfortunately, we prefer a static network configuration of overcloud nodes and so no DHCP server was available. Hence this &ldquo;safe&rdquo; default configuration rendered the two compute nodes unreachable including all the virtual machines that were running on top of them!</p>

<p>We were able to fix the networking issue on the first compute node quickly. However, the physical network interfaces on the second compute node were seriously falling apart. Unfortunately:</p>

<p><blockquote><p>The TripleO installer requires that all the overcloud nodes are reachable during the overcloud update.</p></blockquote></p>

<p>In the opposite case the update just stays hanging. It turned out that it was not possible to bring all the network interfaces on the second compute node up but eventually we were able to get at least the management interface working. This allowed us to re-run the overcloud update during which we fooled the TripleO installer to believe that the configuration of the problematic compute node was applied sucessfully. After exceeding the two-hour maintanance window by several hours we were finally done.</p>

<h2>Conclusion</h2>

<p>Here I&rsquo;d like to summarize our six-months long experience with the TripleO installer:</p>

<ol>
<li>In our experience, the configuration of the OpenStack cluster using only the TripleO installer is not flexible enough. As a workaround, we ended up writing a bunch of Ansible scripts.</li>
<li>The overcloud update can take a very long time to complete and it can fail because of random errors. Also during the update operation all the overcloud nodes have to be reachable by the TripleO installer. For this reason, I personally cannot imagine using TripleO to manage a cluster with more than one hundred nodes.</li>
<li>As we experienced, the TripleO installer can easily break a working OpenStack cluster. This is a big no-no for a production system.</li>
</ol>


<p>Overall, I think that the TripleO installer in the Mitaka version of OpenStack would need more work to become production ready. In the meantime, we&rsquo;re continuing with patching of what we have.</p>

<p>In the future, there are other projects that could replace the TripleO installer. I found the <a href="https://github.com/openstack/kolla-ansible">kolla-ansible</a> and <a href="https://github.com/openstack/kolla-kubernetes">kolla-kubernetes</a> rather promising.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Controlling a Multi-Service Application with systemd]]></title>
    <link href="http://alesnosek.com/blog/2016/12/04/controlling-a-multi-service-application-with-systemd/"/>
    <updated>2016-12-04T23:15:39-08:00</updated>
    <id>http://alesnosek.com/blog/2016/12/04/controlling-a-multi-service-application-with-systemd</id>
    <content type="html"><![CDATA[<p>Is your application delivered as a set of services running on top of Linux? Did you think about writing a custom controller service that would start your application services in the correct order and monitor their health? Please, stop thinking about it! In this blog post I would like to convince you that you can leverage the existing <em>systemd</em> service manager to control your application services to your greatest benefit.</p>

<!-- more -->


<p><a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a> is the default service manager on all major Linux distributions. We&rsquo;re going to demonstrate how it can be used to control a custom multi-service application.</p>

<p><img class="right" src="/images/posts/systemd-logo.png" width="200" height="300"></p>

<p>Our application consists of three services: Service 1, Service 2 and Service 3. The following set of requirements should be met when controlling the services using systemd:</p>

<ol>
<li>User can permanently enable/disable any of the services</li>
<li>User can start and stop the services as a group</li>
<li>User can start and stop each service independently</li>
<li>Service 2 should start before the Service 3 can start</li>
<li>Service 3 should be stopped before the Service 2 can be stopped</li>
<li>Services 1 and 2 should start in parallel to speed up the application startup</li>
<li>Components should be monitored and restarted in the case of failure</li>
</ol>


<p>Required service startup order:</p>

<p><img src="/images/posts/systemd_startup_dependencies.svg" width="300" height="400" title="Service startup order" ></p>

<h2>Creating the systemd unit files</h2>

<p>Let&rsquo;s begin creating the systemd unit files. First, we&rsquo;ll define a pseudo-service called <code>app</code>. This service doesn&rsquo;t run any deamon. Instead, it will allow us to start/stop the three application services at once.</p>

<p><figure class='code'><figcaption><span>app.service </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Application&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[Service]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;The</span> <span class="err">dummy</span> <span class="err">program</span> <span class="err">will</span> <span class="err">exit&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;Type</span><span class="o">=</span><span class="s">oneshot&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Execute</span> <span class="err">a</span> <span class="err">dummy</span> <span class="err">program&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;ExecStart</span><span class="o">=</span><span class="s">/bin/true&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">service</span> <span class="err">shall</span> <span class="err">be</span> <span class="err">considered</span> <span class="err">active</span> <span class="err">after</span> <span class="err">start&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;RemainAfterExit</span><span class="o">=</span><span class="s">yes&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[Install]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Components</span> <span class="err">of</span> <span class="err">this</span> <span class="err">application</span> <span class="err">should</span> <span class="err">be</span> <span class="err">started</span> <span class="err">at</span> <span class="err">boot</span> <span class="err">time&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In the next step, we&rsquo;ll create systemd unit files for the three services that constitute our application. I included some explanatory comments in the first <code>app-component1</code> service definition. The definitions of the remaining two services <code>app-component2</code> and <code>app-component3</code> follow the same schema.</p>

<p><figure class='code'><figcaption><span>app-component1.service </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Application Component 1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;When</span> <span class="err">systemd</span> <span class="err">stops</span> <span class="err">or</span> <span class="err">restarts</span> <span class="err">the</span> <span class="err">app.service,</span> <span class="err">the</span> <span class="err">action</span> <span class="err">is</span> <span class="err">propagated</span> <span class="err">to</span> <span class="err">this</span> <span class="err">unit&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;PartOf</span><span class="o">=</span><span class="s">app.service&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Start</span> <span class="err">this</span> <span class="err">unit</span> <span class="err">after</span> <span class="err">the</span> <span class="err">app.service</span> <span class="err">start&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;After</span><span class="o">=</span><span class="s">app.service&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[Service]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Pretend</span> <span class="err">that</span> <span class="err">the</span> <span class="err">component</span> <span class="err">is</span> <span class="err">running&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;ExecStart</span><span class="o">=</span><span class="s">/bin/sleep infinity&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;Restart</span> <span class="err">the</span> <span class="err">service</span> <span class="err">on</span> <span class="err">non-zero</span> <span class="err">exit</span> <span class="err">code</span> <span class="err">when</span> <span class="err">terminated</span> <span class="err">by</span> <span class="err">a</span> <span class="err">signal</span> <span class="err">other</span> <span class="err">than</span> <span class="err">SIGHUP,</span> <span class="err">SIGINT,</span> <span class="err">SIGTERM</span> <span class="err">or</span> <span class="err">SIGPIPE&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;Restart</span><span class="o">=</span><span class="s">on-failure&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[Install]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">unit</span> <span class="err">should</span> <span class="err">start</span> <span class="err">when</span> <span class="err">app.service</span> <span class="err">is</span> <span class="err">starting&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;WantedBy</span><span class="o">=</span><span class="s">app.service</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The definition of the service <code>app-component2</code> resembles the definition of service <code>app-component1</code>:</p>

<p><figure class='code'><figcaption><span>app-component2.service </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Application Component 2</span>
</span><span class='line'><span class="na">PartOf</span><span class="o">=</span><span class="s">app.service</span>
</span><span class='line'><span class="na">After</span><span class="o">=</span><span class="s">app.service&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="k">[Service]</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/bin/sleep infinity</span>
</span><span class='line'><span class="na">Restart</span><span class="o">=</span><span class="s">on-failure&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="k">[Install]</span>
</span><span class='line'><span class="na">WantedBy</span><span class="o">=</span><span class="s">app.service</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We would like the service <code>app-component3</code> to start after the service <code>app-component2</code>. Systemd provides the directive <code>After</code> to configure the start ordering. Note that we don&rsquo;t use a <code>Wants</code> directive to create a dependency of <code>app-component3</code> on <code>app-component2</code>. This <code>Wants</code> dependency would instruct systemd to start the <code>app-component2</code> whenever the <code>app-component3</code> should be started. The <code>app-component2</code> would be started even in the case that it was disabled before. This is however not what we wanted as we require the user to be able to permanently disable any of the components. If <code>app-component2</code> is not enabled, systemd should just skip it when starting the application services.</p>

<p><figure class='code'><figcaption><span>app-component3.service </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Unit]</span>
</span><span class='line'><span class="na">Description</span><span class="o">=</span><span class="s">Application Component 3</span>
</span><span class='line'><span class="na">PartOf</span><span class="o">=</span><span class="s">app.service</span>
</span><span class='line'><span class="na">After</span><span class="o">=</span><span class="s">app.service&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">unit</span> <span class="err">should</span> <span class="err">start</span> <span class="err">after</span> <span class="err">the</span> <span class="err">app-component2</span> <span class="err">started&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;After</span><span class="o">=</span><span class="s">app-component2.service&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="k">[Service]</span>
</span><span class='line'><span class="na">ExecStart</span><span class="o">=</span><span class="s">/bin/sleep infinity</span>
</span><span class='line'><span class="na">Restart</span><span class="o">=</span><span class="s">on-failure&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="k">[Install]</span>
</span><span class='line'><span class="na">WantedBy</span><span class="o">=</span><span class="s">app.service</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Adding the application services to systemd</h2>

<p>After we finished the creation of the four systemd unit files, we need to copy them to the systemd configuration directory:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo cp app-component1.service app-component2.service app-component3.service app.service /etc/systemd/system/
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, we have to ask systemd to reload its configuration:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl daemon-reload
</span></code></pre></td></tr></table></div></figure></p>

<p>If everything went well, you should be able to see the new services in the unit file list:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>systemctl list-unit-files app*
</span><span class='line'>UNIT FILE              STATE
</span><span class='line'>app-component1.service disabled
</span><span class='line'>app-component2.service disabled
</span><span class='line'>app-component3.service disabled
</span><span class='line'>app.service            disabled&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;4 unit files listed.
</span></code></pre></td></tr></table></div></figure></p>

<h2>Testing the application services</h2>

<p>After all the hard work we&rsquo;re now ready to exercise our configuration. First, let&rsquo;s enable all the application services:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl <span class="nb">enable </span>app app-component1 app-component2 app-component3
</span><span class='line'>Created symlink from /etc/systemd/system/multi-user.target.wants/app.service to /etc/systemd/system/app.service.
</span><span class='line'>Created symlink from /etc/systemd/system/app.service.wants/app-component1.service to /etc/systemd/system/app-component1.service.
</span><span class='line'>Created symlink from /etc/systemd/system/app.service.wants/app-component2.service to /etc/systemd/system/app-component2.service.
</span><span class='line'>Created symlink from /etc/systemd/system/app.service.wants/app-component3.service to /etc/systemd/system/app-component3.service.
</span></code></pre></td></tr></table></div></figure></p>

<p>To start all the services, you can type:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl start app
</span></code></pre></td></tr></table></div></figure></p>

<p>The systemd status command should display all the services as <code>active</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl status app*
</span></code></pre></td></tr></table></div></figure></p>

<p>Note that while the component services are marked as <code>running</code>, the pseudo-service <code>app</code> is showed as <code>exited</code>. This is an expected behaviour as the service <code>app</code> is of type <code>oneshot</code>. (I&rsquo;m not showing the output of the systemctl status command here).</p>

<p>Next, let&rsquo;s check the starting order of the services. Systemd logs its messages into the journal. Let&rsquo;s list the recent log entries with:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>journalctl -e
</span></code></pre></td></tr></table></div></figure></p>

<p>In our sample output we can see that the service <code>app-component3</code> was indeed started after the service <code>app-component2</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Starting Application&hellip;
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Started Application.
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Started Application Component 1.
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Starting Application Component 1&hellip;
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Started Application Component 2.
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Starting Application Component 2&hellip;
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Started Application Component 3.
</span><span class='line'>Dec 05 20:34:57 localhost.localdomain systemd[1]: Starting Application Component 3&hellip;</span></code></pre></td></tr></table></div></figure></p>

<p>Now we&rsquo;re going to check that we can disable any service independently of other services. Let&rsquo;s stop the service <code>app-component2</code> and disable it:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl stop app-component2
</span><span class='line'><span class="nv">$ </span>sudo systemctl disable app-component2
</span><span class='line'>Removed symlink /etc/systemd/system/app.service.wants/app-component2.service.
</span></code></pre></td></tr></table></div></figure></p>

<p>When we stop and start our application the service <code>app-component2</code> will remain disabled.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl stop app
</span><span class='line'><span class="nv">$ </span>sudo systemctl start app
</span></code></pre></td></tr></table></div></figure></p>

<p>Unfortunately, I realized that when using the <code>restart</code> command, systemd will enable the service <code>app-component2</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl restart app
</span></code></pre></td></tr></table></div></figure></p>

<p>The behaviour of the systemd <code>stop</code> command followed by the <code>start</code> command is not consistent with the behaviour of the systemd <code>restart</code> command. As a workaround, you can use the systemd <code>mask</code> command to really disable the application service, for example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo systemctl mask app-component2
</span></code></pre></td></tr></table></div></figure></p>

<p>This way, the service <code>app-component2</code> remains disabled no matter what.</p>

<h2>Conclusion</h2>

<p>systemd provides a feature-rich service manager. Instead of implementing a home-grown solution you might want to think about using systemd to control your application services. Some of the benefits of opting for systemd are:</p>

<ol>
<li>systemd is a standard service manager any Linux administrator is familiar with</li>
<li>systemd is battle tested to the extent your proprietary solution probably cannot be</li>
<li>You can discover many other useful systemd features which you can employ right away</li>
</ol>


<p>Have fun!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[RHCSA/RHCE Exam Experience]]></title>
    <link href="http://alesnosek.com/blog/2016/11/07/rhcsa-slash-rhce-exam-experience/"/>
    <updated>2016-11-07T23:45:38-08:00</updated>
    <id>http://alesnosek.com/blog/2016/11/07/rhcsa-slash-rhce-exam-experience</id>
    <content type="html"><![CDATA[<p>Today was the great day when I passed the RHCE certification exam. If you&rsquo;re thinking about getting a Linux certification or you&rsquo;re already working towards RHCSA/RHCE, this blog post is for you.</p>

<!-- more -->


<p>The RHCSA/RHCE certification is a part of the <a href="https://en.wikipedia.org/wiki/Red_Hat_Certification_Program">Red Hat Certification Program</a>. You have to pass two practical exams, RHCSA (Red Hat Certified System Administrator) and RHCE (Red Hat Certified Engineer).</p>

<h2>Modus operandi</h2>

<p>Both the RHCSA and RHCE exams are hands on. You will be presented with one or more RHEL7 virtual machines and a list of Linux configuration tasks. Your goal is to set up the virtual machines as described in the tasks. After your exam is finished, the Red Hat test automation will reboot the virtual machines and run the grading scripts that will compute your score. An hour or two after the exam end you will receive your exam results in the email.</p>

<p>The exam strictly tests your practical skills which makes it in my opinion very valuable. Several years ago I passed some of the exams from the Oracle Java certification path. The major part of the Java exams was based on the multiple choice questions. It was less fun for me to prepare for it and I think that a hands on exam would test the Java development skills much accurately.</p>

<p>If you&rsquo;re a hiring manager searching for the Linux talent, you should know that:</p>

<p><blockquote><p>Job candidates that passed the RHCSA/RHCE certification really demonstrated their Linux administration skills at some point.</p></blockquote></p>

<h2>Tips</h2>

<p>You can find a ton of tips for the RHCSA/RHCE exams on the Internet already. I&rsquo;d like to share some more advice here.</p>

<p>The RHEL7 virtual machines you will be working on have manual pages installed. Before taking the exam, make sure you know where to look for the useful configuration examples. For instance, when configuring the network interfaces you can refer to:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>man <span class="m">5</span> nmcli-examples
</span></code></pre></td></tr></table></div></figure></p>

<p>Full examples of commands to configure the firewall can be found at:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>man <span class="m">5</span> firewalld.richlanguage
</span></code></pre></td></tr></table></div></figure></p>

<p>When wrestling with the Apache server configuration you can leverage the Apache manual. After you installed the <code>httpd-manual</code> RPM package, you can browse the manual using the <em>elinks</em> web browser:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum install elinks httpd-manual
</span><span class='line'>elinks /usr/share/httpd/manual/index.html
</span></code></pre></td></tr></table></div></figure></p>

<p>If it is feasible for you, make yourself a favor and buy the <a href="https://www.redhat.com/en/services/training/learning-subscription">Red Hat Learning Subscription</a>. You will get access to the training materials that walk you through the tasks very similar to what you&rsquo;ll see on the real exam. It includes mock exams. And you&rsquo;ll be provided with the virtual machines that you can practice on over and over again until you&rsquo;re ready to take the test.</p>

<p>I found the Red Hat learning materials to be of a high quality. Besides the prep for the exam, I&rsquo;m using them to learn about further technologies from the Red Hat portfolio.</p>

<h2>Is the RHCSA/RHCE for me?</h2>

<p>In my opinion, the RHCSA/RHCE is one of the best Linux certifications available. If you mean it with Linux seriously - and it doesn&rsquo;t necessarily have to be the Red Hat flavor of Linux - go get certified!</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[5 Linux Commands You Didn't Know You Needed]]></title>
    <link href="http://alesnosek.com/blog/2016/11/01/5-linux-commands-you-didnt-know-you-needed/"/>
    <updated>2016-11-01T23:11:44-07:00</updated>
    <id>http://alesnosek.com/blog/2016/11/01/5-linux-commands-you-didnt-know-you-needed</id>
    <content type="html"><![CDATA[<p>When preparing for the RHCSA and RHCE exams, I found several useful commands I was not really aware of. In this blog post I&rsquo;ll share them with you.</p>

<!-- more -->


<h2>findmnt</h2>

<p>The <code>findmnt</code> command is part of the essential package <em>util-linux</em> and hence is available on pretty much all Linux systems. It can print all mounted filesystems in the tree-like format. I found the output of <code>findmnt</code> command more readable than the output provided by the more popular <code>mount</code> command. This is an example of how the filesystem mounts on a Ceph node look like:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>findmnt
</span><span class='line'>TARGET                           SOURCE     FSTYPE     OPTIONS
</span><span class='line'>/                                /dev/sda2  xfs        rw,relatime,seclabel,attr2,inode64,noquota
</span><span class='line'>├─/sys                           sysfs      sysfs      rw,nosuid,nodev,noexec,relatime,seclabel
</span><span class='line'>│ ├─/sys/kernel/security         securityfs securityfs rw,nosuid,nodev,noexec,relatime
</span><span class='line'>│ ├─/sys/fs/cgroup               tmpfs      tmpfs      ro,nosuid,nodev,noexec,seclabel,mode<span class="o">=</span>755
</span><span class='line'>│ │ ├─/sys/fs/cgroup/systemd     cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,xattr,release_agent<span class="o">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="o">=</span>systemd
</span><span class='line'>│ │ ├─/sys/fs/cgroup/cpu,cpuacct cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,cpuacct,cpu
</span><span class='line'>│ │ ├─/sys/fs/cgroup/perf_event  cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,perf_event
</span><span class='line'>│ │ ├─/sys/fs/cgroup/devices     cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,devices
</span><span class='line'>│ │ ├─/sys/fs/cgroup/blkio       cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,blkio
</span><span class='line'>│ │ ├─/sys/fs/cgroup/cpuset      cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,cpuset
</span><span class='line'>│ │ ├─/sys/fs/cgroup/hugetlb     cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,hugetlb
</span><span class='line'>│ │ ├─/sys/fs/cgroup/net_cls     cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,net_cls
</span><span class='line'>│ │ ├─/sys/fs/cgroup/memory      cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,memory
</span><span class='line'>│ │ └─/sys/fs/cgroup/freezer     cgroup     cgroup     rw,nosuid,nodev,noexec,relatime,freezer
</span><span class='line'>│ ├─/sys/fs/pstore               pstore     pstore     rw,nosuid,nodev,noexec,relatime
</span><span class='line'>│ ├─/sys/fs/selinux              selinuxfs  selinuxfs  rw,relatime
</span><span class='line'>│ ├─/sys/kernel/debug            debugfs    debugfs    rw,relatime
</span><span class='line'>│ └─/sys/kernel/config           configfs   configfs   rw,relatime
</span><span class='line'>├─/proc                          proc       proc       rw,nosuid,nodev,noexec,relatime
</span><span class='line'>│ ├─/proc/sys/fs/binfmt_misc     systemd-1  autofs     rw,relatime,fd<span class="o">=</span>26,pgrp<span class="o">=</span>1,timeout<span class="o">=</span>300,minproto<span class="o">=</span>5,maxproto<span class="o">=</span>5,direct
</span><span class='line'>│ └─/proc/fs/nfsd                nfsd       nfsd       rw,relatime
</span><span class='line'>├─/dev                           devtmpfs   devtmpfs   rw,nosuid,seclabel,size<span class="o">=</span>16307108k,nr_inodes<span class="o">=</span>4076777,mode<span class="o">=</span>755
</span><span class='line'>│ ├─/dev/shm                     tmpfs      tmpfs      rw,nosuid,nodev,seclabel
</span><span class='line'>│ ├─/dev/pts                     devpts     devpts     rw,nosuid,noexec,relatime,seclabel,gid<span class="o">=</span>5,mode<span class="o">=</span>620,ptmxmode<span class="o">=</span>000
</span><span class='line'>│ ├─/dev/mqueue                  mqueue     mqueue     rw,relatime,seclabel
</span><span class='line'>│ └─/dev/hugepages               hugetlbfs  hugetlbfs  rw,relatime,seclabel
</span><span class='line'>├─/run                           tmpfs      tmpfs      rw,nosuid,nodev,seclabel,mode<span class="o">=</span>755
</span><span class='line'>│ └─/run/user/1002               tmpfs      tmpfs      rw,nosuid,nodev,relatime,seclabel,size<span class="o">=</span>3265340k,mode<span class="o">=</span>700,uid<span class="o">=</span>1002,gid<span class="o">=</span>1002
</span><span class='line'>├─/var/lib/nfs/rpc_pipefs        rpc_pipefs rpc_pipefs rw,relatime
</span><span class='line'>├─/var/lib/ceph/osd/ceph-1       /dev/sdb1  xfs        rw,noatime,seclabel,attr2,inode64,logbsize<span class="o">=</span>256k,sunit<span class="o">=</span>512,swidth<span class="o">=</span>512,noquota
</span><span class='line'>├─/var/lib/ceph/osd/ceph-3       /dev/sdc1  xfs        rw,noatime,seclabel,attr2,inode64,logbsize<span class="o">=</span>256k,sunit<span class="o">=</span>512,swidth<span class="o">=</span>512,noquota
</span><span class='line'>├─/var/lib/ceph/osd/ceph-10      /dev/sdg1  xfs        rw,noatime,seclabel,attr2,inode64,logbsize<span class="o">=</span>256k,sunit<span class="o">=</span>512,swidth<span class="o">=</span>512,noquota
</span><span class='line'>├─/var/lib/ceph/osd/ceph-9       /dev/sdf1  xfs        rw,noatime,seclabel,attr2,inode64,logbsize<span class="o">=</span>256k,sunit<span class="o">=</span>512,swidth<span class="o">=</span>512,noquota
</span><span class='line'>├─/var/lib/ceph/osd/ceph-4       /dev/sdd1  xfs        rw,noatime,seclabel,attr2,inode64,logbsize<span class="o">=</span>256k,sunit<span class="o">=</span>512,swidth<span class="o">=</span>512,noquota
</span><span class='line'>└─/var/lib/ceph/osd/ceph-7       /dev/sde1  xfs        rw,noatime,seclabel,attr2,inode64,logbsize<span class="o">=</span>256k,sunit<span class="o">=</span>512,swidth<span class="o">=</span>512,noquota
</span></code></pre></td></tr></table></div></figure></p>

<h2>ss</h2>

<p>The <code>ss</code> (soscket statistics) command is a replacement for the good old <code>netstat</code> command. It comes in the <em>iproute</em> package which is an essential part of all modern Linux distributions. I found <code>ss</code> command available on systems where the <code>netstat</code> command was missing. Here is a sample output of the <code>ss</code> command running on my Linux desktop:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo ss -tlnp <span class="p">|</span> cat
</span><span class='line'>State      Recv-Q Send-Q Local Address:Port               Peer Address:Port
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">100</span>          &lt;em&gt;:15929                    &lt;/em&gt;:&lt;em&gt;                   users:<span class="o">((</span><span class="p">&amp;</span>ldquo<span class="p">;</span>skype<span class="p">&amp;</span>rdquo<span class="p">;</span>,pid<span class="o">=</span>25943,fd<span class="o">=</span>49<span class="o">))</span>
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">50</span>           &lt;/em&gt;:39964                    &lt;em&gt;:&lt;/em&gt;                   users:<span class="o">((</span><span class="p">&amp;</span>ldquo<span class="p">;</span>java<span class="p">&amp;</span>rdquo<span class="p">;</span>,pid<span class="o">=</span>6015,fd<span class="o">=</span>146<span class="o">))</span>
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">5</span>      192.168.122.1:53                       &lt;em&gt;:&lt;/em&gt;                   users:<span class="o">((</span><span class="p">&amp;</span>ldquo<span class="p">;</span>dnsmasq<span class="p">&amp;</span>rdquo<span class="p">;</span>,pid<span class="o">=</span>1625,fd<span class="o">=</span>6<span class="o">))</span>
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">128</span>          &lt;em&gt;:22                       &lt;/em&gt;:&lt;em&gt;                   users:<span class="o">((</span><span class="p">&amp;</span>ldquo<span class="p">;</span>sshd<span class="p">&amp;</span>rdquo<span class="p">;</span>,pid<span class="o">=</span>1442,fd<span class="o">=</span>3<span class="o">))</span>
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">128</span>         :::22                      :::&lt;/em&gt;                   users:<span class="o">((</span><span class="p">&amp;</span>ldquo<span class="p">;</span>sshd<span class="p">&amp;</span>rdquo<span class="p">;</span>,pid<span class="o">=</span>1442,fd<span class="o">=</span>4<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;m switching from using the <code>netstat</code> command to <code>ss</code>. What about you?</p>

<h2>ip</h2>

<p>After years of using the <code>ifconfig</code> utility, it took me some effort to move to its modern replacement - the <code>ip</code> command. Recently, I discovered two useful features of the <code>ip</code> utility.</p>

<p>To obtain a detailed information about the packets transferred by individual network interfaces, use the <code>-s</code> (statistics) parameter. For example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ip -s link
</span><span class='line'>1: lo: <span class="p">&amp;</span>lt<span class="p">;</span>LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1
</span><span class='line'>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class='line'>    RX: bytes  packets  errors  dropped overrun mcast
</span><span class='line'>    <span class="m">1416492</span>    <span class="m">20158</span>    <span class="m">0</span>       <span class="m">0</span>       <span class="m">0</span>       0
</span><span class='line'>    TX: bytes  packets  errors  dropped carrier collsns
</span><span class='line'>    <span class="m">1416492</span>    <span class="m">20158</span>    <span class="m">0</span>       <span class="m">0</span>       <span class="m">0</span>       0
</span><span class='line'>2: enp0s31f6: <span class="p">&amp;</span>lt<span class="p">;</span>BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
</span><span class='line'>    link/ether 18:66:da:21:33:87 brd ff:ff:ff:ff:ff:ff
</span><span class='line'>    RX: bytes  packets  errors  dropped overrun mcast
</span><span class='line'>    <span class="m">13776256661</span> <span class="m">26486602</span> <span class="m">0</span>       <span class="m">0</span>       <span class="m">0</span>       1661059
</span><span class='line'>    TX: bytes  packets  errors  dropped carrier collsns
</span><span class='line'>    <span class="m">2313484427</span> <span class="m">9811792</span>  <span class="m">0</span>       <span class="m">0</span>       <span class="m">0</span>       0
</span></code></pre></td></tr></table></div></figure></p>

<p>To figure out which network interface would be used to send a packet to the specified IP address:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ip route get 192.168.0.1
</span><span class='line'>192.168.0.1 via 10.5.0.1 dev enp0s31f6  src 10.5.0.225
</span><span class='line'>    cache
</span></code></pre></td></tr></table></div></figure></p>

<p>When sending a packet to the target destination <code>192.168.0.1</code>, the kernel will route the packet via the <code>enp0s31f6</code> interface. The IP <code>10.5.0.1</code> is my default route.</p>

<h2>lscpu</h2>

<p>On modern machines the output of <code>cat /proc/cpuinfo</code> can be really long. To find out what CPU configuration a machine comes with I prefer to use the <code>lscpu</code> command. This is an example output of the <code>lscpu</code> command running on an OpenStack compute node:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lscpu
</span><span class='line'>Architecture:          x86_64
</span><span class='line'>CPU op-mode<span class="o">(</span>s<span class="o">)</span>:        32-bit, 64-bit
</span><span class='line'>Byte Order:            Little Endian
</span><span class='line'>CPU<span class="o">(</span>s<span class="o">)</span>:                32
</span><span class='line'>On-line CPU<span class="o">(</span>s<span class="o">)</span> list:   0-31
</span><span class='line'>Thread<span class="o">(</span>s<span class="o">)</span> per core:    2
</span><span class='line'>Core<span class="o">(</span>s<span class="o">)</span> per socket:    8
</span><span class='line'>Socket<span class="o">(</span>s<span class="o">)</span>:             2
</span><span class='line'>NUMA node<span class="o">(</span>s<span class="o">)</span>:          2
</span><span class='line'>Vendor ID:             GenuineIntel
</span><span class='line'>CPU family:            6
</span><span class='line'>Model:                 63
</span><span class='line'>Model name:            Intel<span class="p">&amp;</span>reg<span class="p">;</span> Xeon<span class="p">&amp;</span>reg<span class="p">;</span> CPU E5-2640 v3 @ 2.60GHz
</span><span class='line'>Stepping:              2
</span><span class='line'>CPU MHz:               1200.062
</span><span class='line'>BogoMIPS:              5198.45
</span><span class='line'>Virtualization:        VT-x
</span><span class='line'>L1d cache:             32K
</span><span class='line'>L1i cache:             32K
</span><span class='line'>L2 cache:              256K
</span><span class='line'>L3 cache:              20480K
</span><span class='line'>NUMA node0 CPU<span class="o">(</span>s<span class="o">)</span>:     0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30
</span><span class='line'>NUMA node1 CPU<span class="o">(</span>s<span class="o">)</span>:     1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31
</span></code></pre></td></tr></table></div></figure></p>

<p>In the above output, the interesting lines are the <code>Socket(s)</code>, <code>Core(s) per socket</code>, <code>Thread(s) per core</code> and <code>CPU(s)</code>. In our case, we&rsquo;re looking at a machine with 2 physical CPUs (Sockets), each of them having 8 physical cores (Cores per socket). Each of the physical cores has 2 processing threads (Threads per core) aka logical CPUs due to the Hyper-Threading technology. In total, there are 32 logical CPUs available to the Linux scheduler to schedule a task on.</p>

<h2>lspci</h2>

<p>The last command in our overview is the <code>lspci</code> command. If you ever wondered which kernel driver is controlling your hardware device, you can find out with:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lspci -k&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>hellip<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;01:05.0 VGA compatible controller: Advanced Micro Devices, Inc. <span class="o">[</span>AMD/ATI<span class="o">]</span> RS880 <span class="o">[</span>Radeon HD 4250<span class="o">]</span>
</span><span class='line'>        Subsystem: ASUSTeK Computer Inc. M5A88-V EVO
</span><span class='line'>        Kernel driver in use: radeon
</span><span class='line'>01:05.1 Audio device: Advanced Micro Devices, Inc. <span class="o">[</span>AMD/ATI<span class="o">]</span> RS880 HDMI Audio <span class="o">[</span>Radeon HD <span class="m">4200</span> Series<span class="o">]</span>
</span><span class='line'>        Subsystem: ASUSTeK Computer Inc. M5A88-V EVO
</span><span class='line'>        Kernel driver in use: snd_hda_intel
</span><span class='line'>02:00.0 FireWire <span class="o">(</span>IEEE 1394<span class="o">)</span>: VIA Technologies, Inc. VT6315 Series Firewire Controller
</span><span class='line'>        Subsystem: ASUSTeK Computer Inc. M5A88-V EVO
</span><span class='line'>        Kernel driver in use: firewire_ohci
</span><span class='line'>02:00.1 IDE interface: VIA Technologies, Inc. VT6415 PATA IDE Host Controller <span class="o">(</span>rev a0<span class="o">)</span>
</span><span class='line'>        Subsystem: ASUSTeK Computer Inc. Motherboard
</span><span class='line'>        Kernel driver in use: pata_via
</span><span class='line'>03:00.0 USB controller: ASMedia Technology Inc. ASM1042 SuperSpeed USB Host Controller
</span><span class='line'>        Subsystem: ASUSTeK Computer Inc. P8B WS Motherboard
</span><span class='line'>        Kernel driver in use: xhci_hcd
</span><span class='line'>05:00.0 Network controller: Realtek Semiconductor Co., Ltd. RTL8192CE PCIe Wireless Network Adapter <span class="o">(</span>rev 01<span class="o">)</span>
</span><span class='line'>        Subsystem: Realtek Semiconductor Co., Ltd. RTL8192CE PCIe Wireless Network Adapter
</span><span class='line'>        Kernel driver in use: rtl8192ce
</span><span class='line'>06:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller <span class="o">(</span>rev 06<span class="o">)</span>
</span><span class='line'>        Subsystem: ASUSTeK Computer Inc. P8P67 and other motherboards
</span><span class='line'>        Kernel driver in use: r8169
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[First Impressions about ansible-container]]></title>
    <link href="http://alesnosek.com/blog/2016/09/12/first-impressions-about-ansible-container/"/>
    <updated>2016-09-12T20:06:49-07:00</updated>
    <id>http://alesnosek.com/blog/2016/09/12/first-impressions-about-ansible-container</id>
    <content type="html"><![CDATA[<p>At Red Hat summit I learned about the new project <a href="https://www.ansible.com/ansible-container">ansible-container</a>. I was very excited and looked forward to building Docker containers with Ansible instead of the Dockerfiles. The project seemed to came just on time as in our company we&rsquo;re starting to Dockerize our software products. How did <em>ansible-container</em> work out for us? Read on!</p>

<!-- more -->


<p>The ansible-container is a very young project. The first release 0.1.0 came out on July 28, 2016. The project&rsquo;s Git repository is hosted on <a href="https://github.com/ansible/ansible-container">GitHub</a>. Additionaly, there&rsquo;s a repository with examples of how to use ansible-container available <a href="https://github.com/ansible/ansible-container-examples">here</a>.</p>

<h2>How ansible-container works</h2>

<p>Here is how you build Docker containers with ansible-container. After crafting your Ansible playbook, you run the command <code>ansible-container build</code> which roughly executes these steps:</p>

<ol>
<li>Spin up a <em>builder container</em> and mount your Ansible playbook directory as a volume inside of this container.</li>
<li>Spin up a <em>base container</em> from the Docker image of your choice.</li>
<li>Run ansible-playbook inside of the <em>builder container</em>. Ansible will connect to the <em>base container</em> and configure it accordingly to the playbook.</li>
<li>Shutdown the <em>base container</em> and commit it as a new image.</li>
</ol>


<p>Besides building one Docker image at a time, it&rsquo;s rather straight forward to build a group of images at once. Under the hood, ansible-container leverages Docker Compose to start any number of containers to configure them with Ansible.</p>

<p>After your images are built, you can start them as containers on the local machine using the <code>ansible-container run</code> command. And finally, the <code>ansible-container shipit</code> command can help you to deploy your containers to Kubernetes or OpenShift.</p>

<h2>Evaluating ansible-container</h2>

<p>Software development in our company is organized in a way that can probably be found in many other places, too. We maintain base software libraries in a project called <em>platform</em>. On top of <em>platform</em>, many different product components are developed. We distribute our software in the form of RPM packages. As a first step on our way towards containers, we are going to install the RPMs on top of the Docker base images.</p>

<p>After spending a week with ansible-container, we decided that we are not going to adopt it at this time. The main reasons were:</p>

<ol>
<li><p>We would have to introduce another dependency to our build process. Our build machines would need to have Ansible, ansible-container and Docker Compose installed in order to build Docker containers. We prefer to keep our build dependencies to the minimum.</p></li>
<li><p>We need to build around 20 containers. During the container build we run a shell script to install an RPM package and to do a few more modifications. Our container build process is rather simple and Dockerfiles can just get the job done. For a more involved build process, Ansible would be preferable.</p></li>
<li><p>The ansible-container project shows its potential while it&rsquo;s still in its infancy. The builds with ansible-container take longer than the Dockerfile builds that leverage caching of image layers. The build specification file <code>container.yml</code> is not flexible enough for us. For example, it&rsquo;s not easy to build only a subset of the declared containers. Also it&rsquo;s not possible to build in one pass containers which inherit from each other.</p></li>
</ol>


<h2>Conclusion</h2>

<p>The ansible-container project is definitely very promising and we will keep our eye on it. For now, we&rsquo;re moving forward with generating and running Dockerfiles.</p>
]]></content>
  </entry>

</feed>
