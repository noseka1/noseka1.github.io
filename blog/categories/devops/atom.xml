<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2015-09-28T23:14:56-07:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[Network Configuration with os-net-config]]></title>
    <link href="http://alesnosek.com/blog/2015/09/28/network-configuration-with-os-net-config/"/>
    <updated>2015-09-28T20:30:11-07:00</updated>
    <id>http://alesnosek.com/blog/2015/09/28/network-configuration-with-os-net-config</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/openstack/os-net-config" title="os-net-config">Os-net-config</a> is a simple tool to configure networking of Linux hosts. Combined with Cloud-init, it&rsquo;s suitable for network configuration of virtual machines when booting in the cloud. Let&rsquo;s take a closer look at os-net-config.</p>

<!-- more -->


<p>Os-net-config is developed as a part of the OpenStack <a href="https://wiki.openstack.org/wiki/TripleO" title="TripleO">TripleO</a> project. Its modus operandi is simple: based on the YAML/JSON configuration file, the os-net-config configures the network interfaces of the machine. Currently, the tool supports configuration of Debian based distributions using <code>/etc/network/interfaces</code> and configuration of distributions using scripts in <code>/etc/sysconfig/network</code> directory, e.g. Red Hat. Os-net-config allows to:</p>

<ol>
<li>Assign IP addresses to interfaces</li>
<li>Define static routes</li>
<li>Create VLAN subinterfaces</li>
<li>Create OVS bridges</li>
<li>Create OVS bonds (not implemented on Debian)</li>
</ol>


<h2>Using os-net-config on Red Hat</h2>

<p>In the following examples we&rsquo;ll use RHEL7 and os-net-config version 0.1.4. By default, os-net-config reads the configuration file at <code>/etc/os-net-config/config.yaml</code>. However, you can specify a different location using the <code>-c</code> parameter. First example shows a configuration of machine with two network interfaces. The first interface is dynamically configured using DHCP. The second interface has been assigned an IP address and netmask statically:</p>

<p><figure class='code'><figcaption><span>example1.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">network_config</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">use_dhcp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;ul&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic2</span>
</span><span class='line'><span class="l-Scalar-Plain">addresses</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;ul&gt;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;li&gt;ip_netmask</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">192.168.1.1/24</span>
</span></code></pre></td></tr></table></div></figure></li>
</ul>
</li>
</ul>


<p>To apply the above network configuration to your machine you can run:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>os-net-config -c example1.yaml
</span></code></pre></td></tr></table></div></figure></p>

<p>On my machine, os-net-config created four configuration files in the <code>/etc/sysconfig/network-scripts</code> directory:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This file is autogenerated by os-net-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEVICE<span class="o">=</span>eth0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>dhcp
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This file is autogenerated by os-net-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEVICE<span class="o">=</span>eth1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>static
</span><span class='line'><span class="nv">IPADDR</span><span class="o">=</span>192.168.1.1
</span><span class='line'><span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
</span></code></pre></td></tr></table></div></figure></p>

<p>In addition to the above interface configuration files, two empty files <code>route-eth0</code> and <code>route-eth1</code> have been created. These files would be populated in the case that I would define some static routes in my network configuration.</p>

<p>In the second example, we&rsquo;ll bond two network interfaces and plug this bond into an OVS bridge. The os-net-config YAML configuration looks like this:</p>

<p><figure class='code'><figcaption><span>example2.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">network_config</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ovs_bridge</span>
</span><span class='line'>    <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bridge1</span>
</span><span class='line'>    <span class="l-Scalar-Plain">use_dhcp</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="l-Scalar-Plain">members</span><span class="p-Indicator">:</span>
</span><span class='line'>       <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ovs_bond</span>
</span><span class='line'>         <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bond1</span>
</span><span class='line'>         <span class="l-Scalar-Plain">members</span><span class="p-Indicator">:</span>
</span><span class='line'>           <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>             <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic1</span>
</span><span class='line'>           <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">interface</span>
</span><span class='line'>             <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">nic2</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And here is the listing of the network configuration files generated by os-net-config based on the above input:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This file is autogenerated by os-net-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEVICE<span class="o">=</span>eth0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This file is autogenerated by os-net-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEVICE<span class="o">=</span>eth1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-bond1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This file is autogenerated by os-net-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEVICE<span class="o">=</span>bond1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">DEVICETYPE</span><span class="o">=</span>ovs
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>OVSPort
</span><span class='line'><span class="nv">OVS_BRIDGE</span><span class="o">=</span>bridge1
</span><span class='line'><span class="nv">DEVICETYPE</span><span class="o">=</span>ovs
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>OVSBond
</span><span class='line'><span class="nv">BOND_IFACES</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>eth0 eth1<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-bridge1 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;This file is autogenerated by os-net-config&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;DEVICE<span class="o">=</span>bridge1
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">HOTPLUG</span><span class="o">=</span>no
</span><span class='line'><span class="nv">NM_CONTROLLED</span><span class="o">=</span>no
</span><span class='line'><span class="nv">DEVICETYPE</span><span class="o">=</span>ovs
</span><span class='line'><span class="nv">TYPE</span><span class="o">=</span>OVSBridge
</span><span class='line'><span class="nv">OVSBOOTPROTO</span><span class="o">=</span>dhcp
</span><span class='line'><span class="nv">OVSDHCPINTERFACES</span><span class="o">=</span><span class="p">&amp;</span>ldquo<span class="p">;</span>bond1<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Activating the network configuration</h2>

<p>When activating the network configuration, os-net-config executes a couple of steps in this order:</p>

<ol>
<li>Ifdown interfaces</li>
<li>Ifdown bridges</li>
<li>Generate/modify the configuration files in <code>/etc/sysconfig/network-scripts</code> directory</li>
<li>Ifup bridges</li>
<li>Ifup interfaces</li>
</ol>


<p>Os-net-config executes the aforementioned steps only on interfaces/bridges whose configuration has been updated. If the interface/bridge configuration hasn&rsquo;t changed os-net-config will not touch the respective configuration files in the <code>/etc/sysconfig/network-scripts</code> directory and will not restart the respective interface/bridge. This way, os-net-config minimizes the number of changes done to your system.</p>

<h2>Network interface names</h2>

<p>The names of the network interfaces are platform dependent. In the os-net-config configuration file, you can refer to your interfaces using symbolic names <code>nic1</code>, <code>nic2</code>, <code>nic3</code>, &hellip; Os-net-config will automatically associate these symbolic names with the real network interfaces like <code>em</code>, <code>eth</code>, <code>eno</code>.</p>

<h2>Conclusion</h2>

<p>Os-net-config is a useful configuration tool you might want to include on your virtual machine images.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Bridging VLAN Trunk to the Guest]]></title>
    <link href="http://alesnosek.com/blog/2015/09/07/bridging-vlan-trunk-to-the-guest/"/>
    <updated>2015-09-07T07:12:22-07:00</updated>
    <id>http://alesnosek.com/blog/2015/09/07/bridging-vlan-trunk-to-the-guest</id>
    <content type="html"><![CDATA[<p>In this article, we&rsquo;re going to make an entire VLAN trunk on the host accessible to the guest machine. The guest machine can then create VLAN subinterfaces in order to access a particular VLAN.</p>

<!-- more -->


<p>Our host and guest machines are running RHEL7. We&rsquo;re using Linux bridges and <a href="http://libvirt.org/" title="libvirt">libvirt</a> for guest and network configuration.</p>

<h2>Bridge configuration on the host</h2>

<p>On the host, the physical interface <code>enp3s0f0</code> is a trunk interface including VLANs with tags 408, 410 and 412. We&rsquo;ll create a new Linux bridge and add the <code>enp3s0f0</code> to this bridge. The virtual machines created by libvirt will also be connected to this bridge. The configuration of the <code>enp3s0f0</code> physical interface looks as follows:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-enp3s0f0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>enp3s0f0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">BRIDGE</span><span class="o">=</span>br-enp3s0f0
</span></code></pre></td></tr></table></div></figure></p>

<p>Please, note that there&rsquo;s no IP address configuration (neither static nor via DHCP) for the <code>enp3s0f0</code> interface. The <code>enp3s0f0</code> interface is a trunk interface and hence the IP configuration would make no sense here. The <code>BRIDGE</code> configuration variable connects the physical interface to the <code>br-enp3s0f0</code> bridge. To create the <code>br-enp3s0f0</code> bridge the following configuration file is needed:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-br-enp3s0f0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Bridge
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>br-enp3s0f0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">DELAY</span><span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure></p>

<p>After the <code>enp3s0f0</code> and <code>br-enp3s0f0</code> configuration is in place you might want to restart the networking service using the command:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl restart network
</span></code></pre></td></tr></table></div></figure></p>

<h2>Creating a bridged network in libvirt</h2>

<p>Next, we&rsquo;re going to tell libvirt that there&rsquo;s an existing bridge <code>br-enp3s0f0</code> we&rsquo;d like our virtual machines be connected to. First, let&rsquo;s create a libvirt network definition file named just <code>bridge.xml</code>:</p>

<p><figure class='code'><figcaption><span>bridge.xml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;network&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>br-enp3s0f0<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;forward</span> <span class="na">mode=</span><span class="s">&#39;bridge&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;bridge</span> <span class="na">name=</span><span class="s">&#39;br-enp3s0f0&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/network&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To create a libvirt network based on the above definition, type:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh net-define bridge.xml
</span></code></pre></td></tr></table></div></figure></p>

<p>We&rsquo;d like libvirt daemon to start the network automatically on the startup:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh net-autostart br-enp3s0f0
</span></code></pre></td></tr></table></div></figure></p>

<p>For the first time, we have to start the <code>br-enp3s0f0</code> network manually:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo virsh net-start br-enp3s0f0
</span></code></pre></td></tr></table></div></figure></p>

<p>If the above configuration went well, you will find the new network <code>br-enp3s0f0</code> on the list of libvirt networks:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>virsh net-list&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt; Name                 State      Autostart     Persistent&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; br-enp3s0f0          active     yes           yes
</span></code></pre></td></tr></table></div></figure></p>

<h2>Attaching a guest to the network</h2>

<p>When creating a new guest (domain) in libvirt, you will need to attach the domain to the <code>br-enp3s0f0</code> network. I&rsquo;m not going to present the complete domain XML configuration here. You should include the following snippet in your domain definition in order to connect the domain to the <code>br-enp3s0f0</code> network:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;interface</span> <span class="na">type=</span><span class="s">&#39;network&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;source</span> <span class="na">network=</span><span class="s">&#39;br-enp3s0f0&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;forward</span> <span class="na">mode=</span><span class="s">&#39;route&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;model</span> <span class="na">type=</span><span class="s">&#39;virtio&#39;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/interface&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Guest network configuration</h2>

<p>After the guest machine boots up successfully, you can create VLAN subinterfaces in order to obtain access to the individual VLANs within the guest. First, let&rsquo;s check the configuration of the VLAN trunk interface <code>eth0</code> inside the guest:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">TYPE</span><span class="o">=</span>Ethernet
</span><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, we can create VLAN subinterfaces to access individual VLANs available in the <code>eth0</code> trunk. For example, to access VLAN 408 and obtain the IP configuration via DHCP you can create a new cofiguration file <code>ifcfg-eth0.408</code>:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0.408 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>dhcp
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>eth0.408
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">VLAN</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure></p>

<p>When you restart the networking service, your guest should successfully obtain an IP address on the VLAN 408:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo systemctl restart network
</span></code></pre></td></tr></table></div></figure></p>

<h2>Caveat</h2>

<p>When experimenting with the Linux bridge configuration I made this observation: <em>If there&rsquo;s a VLAN subinterface defined for a specific VLAN on the host machine, this specific VLAN won&rsquo;t be accessible inside the guest.</em> For example, when I created the following VLAN 408 subinterface on the host:</p>

<p><figure class='code'><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-enp3s0f0.408 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">BOOTPROTO</span><span class="o">=</span>none
</span><span class='line'><span class="nv">DEVICE</span><span class="o">=</span>enp3s0f0.408
</span><span class='line'><span class="nv">ONBOOT</span><span class="o">=</span>yes
</span><span class='line'><span class="nv">VLAN</span><span class="o">=</span>yes
</span></code></pre></td></tr></table></div></figure></p>

<p>As soon as I brought this interface up using:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo ifup enp3s0f0.408
</span></code></pre></td></tr></table></div></figure></p>

<p>the <code>eth0.408</code> VLAN subinterface in the guest stopped working.</p>

<h2>References</h2>

<p>When writing this blogpost I referred to the very useful article <a href="http://blog.davidvassallo.me/2012/05/05/kvm-brctl-in-linux-bringing-vlans-to-the-guests/">KVM &amp; BRCTL in Linux – bringing VLANs to the guests</a> describing the issues of VLAN bridging in a great detail.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Multiple RHEL Mirrors on a Single Machine]]></title>
    <link href="http://alesnosek.com/blog/2015/08/16/multiple-rhel-mirrors-on-a-single-machine/"/>
    <updated>2015-08-16T22:23:11-07:00</updated>
    <id>http://alesnosek.com/blog/2015/08/16/multiple-rhel-mirrors-on-a-single-machine</id>
    <content type="html"><![CDATA[<p><em>Reposync</em> can mirror the yum repository to which your machine is subscribed to. However, you cannot subscribe your machine to the RHEL6 and RHEL7 at the same time. Let&rsquo;s take a look at how Docker can help us here.</p>

<!-- more -->


<p>The RHEL Docker images are available in the public registry. For example, the following command downloads a RHEL6 Docker image:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker pull rhel6
</span></code></pre></td></tr></table></div></figure></p>

<p>The downloaded image is not registered with <a href="https://access.redhat.com/" title="Red Hat Customer Portal">Red Hat Customer Portal</a> and hence cannot receive any software updates. To register the Docker image, you&rsquo;ll need the <em>username</em> and <em>password</em> you use to log in to the Red Hat Customer Portal.</p>

<h2>Docker and the build-time secrets</h2>

<p>You will encounter a problem when building and registering the RHEL image using a Dockerfile. How to register the RHEL image using your credentials without Docker baking those credentials into the image? You don&rsquo;t want others to discover your secrets in the image&rsquo;s metadata or the history log. As a matter of fact, there doesn&rsquo;t seem to be a secure way to pass the secrets to the Docker in build-time. And there is a nice <a href="https://github.com/docker/docker/issues/13490" title="Secrets in Docker">write-up</a> available in the Docker issue tracker describing the different approaches how to workaround this deficiency.</p>

<p>The following approach worked for me:</p>

<ol>
<li>Store the credentials into a file on the Docker host</li>
<li>Start a RHEL container with the credentials file mounted into it</li>
<li>Use the credentials to register the RHEL system</li>
<li>Stop the RHEL container</li>
<li>Commit the RHEL container into a new Docker image</li>
</ol>


<h2>Creating RHEL images with Ansible</h2>

<p>You can find the <code>rhel_reposync</code> Ansible role at <a href="https://github.com/noseka1/rhel_reposync" title="rhel_reposync">GitHub</a>. You want to run this role on your Docker host. It will download the RHEL6 and RHEL7 images, and register them with the Red Hat Customer Portal. You have to supply your Red Hat credentials on the command-line. For example:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ansible-playbook -i hosts playbook.yml -e <span class="nv">redhat_portal_username</span><span class="o">=</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#117;&amp;#x73;&amp;#101;&amp;#114;&amp;#110;&amp;#97;&amp;#x6d;&amp;#x65;&amp;#x40;&amp;#99;&amp;#111;&amp;#109;&amp;#112;&amp;#97;&amp;#x6e;&amp;#121;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#117;&amp;#x73;&amp;#x65;&amp;#x72;&amp;#x6e;&amp;#x61;&amp;#x6d;&amp;#101;&amp;#x40;&amp;#x63;&amp;#111;&amp;#x6d;&amp;#x70;&amp;#97;&amp;#110;&amp;#x79;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt; -e redhat_portal_password=secretpassword</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>After the Ansible run is finished you&rsquo;ll find two images in your local Docker repository: <code>rhel6_reposync_registered</code> and <code>rhel7_reposync_registered</code>.</p>

<h2>Mirroring the RHEL repository</h2>

<p>To begin the RHEL repository mirroring you just start a container based on the registered image. The container expects a volume to be mounted at <code>/repodir</code>. It will save the downloaded RPM packages at this location.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm -v /var/www/html/RHEL6:/repodir rhel6_reposync_registered
</span></code></pre></td></tr></table></div></figure></p>

<h2>Alternative solution</h2>

<p>I discovered an <a href="https://github.com/pyther/upstream_sync" title="upstream_sync">upstream_sync</a> script that allows you to mirror multiple RHEL/CentOS repositories from a single machine. It uses a specific client SSL certificate and key to access each of the repositories. This solution is much simpler than the approach described in this article.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Improving Ansible's ini_file Module]]></title>
    <link href="http://alesnosek.com/blog/2015/08/03/improving-ansibles-ini-file-module/"/>
    <updated>2015-08-03T20:01:30-07:00</updated>
    <id>http://alesnosek.com/blog/2015/08/03/improving-ansibles-ini-file-module</id>
    <content type="html"><![CDATA[<p>For editing Windows INI files, Ansible comes with an <code>ini_file</code> module built in. Unfortunately, this module uses Python&rsquo;s <code>ConfigParser</code> module which reformats the entire INI file whenever you want to change a single line. It removes all the comment lines, too. For me this was not acceptable. After looking for a possible solution I decided to improve the <code>ini_file</code> module and created <code>ini_file2</code>. I realized how easy it is to create an Ansible module.</p>

<!-- more -->


<p>On Debian Linux, the Ansible&rsquo;s built-in <code>ini_file</code> module can be found at <code>/usr/share/ansible/files/ini_file</code>. This file is the base for our own <code>ini_file2</code>. The question was, at what location should one store the <code>ini_file2</code> module for Ansible to find it? From Ansible&rsquo;s <a href="http://docs.ansible.com/ansible/developing_modules.html" title="Developing Modules">documentation</a> I learned that when looking for modules, Ansible searches the <code>./library</code> directory alongside of the top level playbooks. That sounds perfect to me.</p>

<p>After a while working with the Python code, I created the <code>ini_file2</code> module. This module provides an equivalent functionality to the original <code>ini_file</code> module, however, it does only the minimum changes when editing the INI file. It typically modifies only one line. When removing options, it doesn&rsquo;t delete the lines but comment them out instead. If there was a commented out option it comments it in when required.</p>

<h2>The ini_file and ini_file2 comparison</h2>

<p>Let&rsquo;s compare the <code>ini_file</code> and <code>ini_file2</code> on a practical example. Our input INI file looks as follows:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">main</span> <span class="err">configuration</span> <span class="err">section&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;There</span> <span class="err">are</span> <span class="err">some</span> <span class="err">important</span> <span class="err">options</span> <span class="err">to</span> <span class="err">configure&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[main]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">first</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option1</span> <span class="o">=</span> <span class="s">orig_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">second</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;h1&gt;option2</span> <span class="o">=</span> <span class="s">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">last</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option3</span> <span class="o">=</span> <span class="s">some_value</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The Ansible test script will set the <code>option1</code> and <code>option2</code> to <code>new_value</code> and it will remove the <code>option3</code> from the INI file:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- name: Set option1 to new_value
</span><span class='line'>  ini_file: dest=settings.ini section=main option=option1 value=new_value&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;ul>
</span><span class='line'>&lt;li>&lt;p>name: Set option2 to new_value
</span><span class='line'>ini_file: dest=settings.ini section=main option=option2 value=new_value&lt;/p>&lt;/li>
</span><span class='line'>&lt;li>&lt;p>name: Remove option3
</span><span class='line'>ini_file: dest=settings.ini section=main option=option3 state=absent</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<p>When using the original <code>ini_file</code> module, the resulting INI file looks like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[main]</span>
</span><span class='line'><span class="na">option1</span> <span class="o">=</span> <span class="s">new_value</span>
</span><span class='line'><span class="na">option2</span> <span class="o">=</span> <span class="s">new_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can see that there&rsquo;s not much left from the input file. All comments are gone. In contrast, the <code>ini_file2</code> module does the editing operations with more precision:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">main</span> <span class="err">configuration</span> <span class="err">section&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;There</span> <span class="err">are</span> <span class="err">some</span> <span class="err">important</span> <span class="err">options</span> <span class="err">to</span> <span class="err">configure&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;[main]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">first</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option1</span> <span class="o">=</span> <span class="s">new_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">second</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;p&gt;option2</span> <span class="o">=</span> <span class="s">new_value&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;This</span> <span class="err">is</span> <span class="err">the</span> <span class="err">last</span> <span class="err">option&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;h1&gt;If</span> <span class="err">not</span> <span class="err">set,</span> <span class="err">the</span> <span class="err">default</span> <span class="err">value</span> <span class="err">is</span> <span class="err">def_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="na">&lt;h1&gt;option3</span> <span class="o">=</span> <span class="s">some_value&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>References</h2>

<p>The <code>ini_file2</code> source code as well as test scripts can be found at <a href="https://github.com/noseka1/ini_file2" title="ini_file2">GitHub</a>.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Running Wine within Docker]]></title>
    <link href="http://alesnosek.com/blog/2015/07/04/running-wine-within-docker/"/>
    <updated>2015-07-04T22:46:55-07:00</updated>
    <id>http://alesnosek.com/blog/2015/07/04/running-wine-within-docker</id>
    <content type="html"><![CDATA[<p>After upgrading to Debian Jessie, my Windows application running under Wine stopped working. In this article we&rsquo;ll use Docker to restore the Wine environment from Debian Wheezy. We&rsquo;ll run the Windows application inside this Docker container.</p>

<!-- more -->


<p>Docker is not part of the stable Jessie distribution, however, you can install it from the <a href="http://backports.debian.org/" title="Debian Backports">Debian Backports</a> repositories.</p>

<h2>Creating a Docker image</h2>

<p>We start off with creating a Docker image based on the <code>debian:wheezy</code> image from the official Docker repositories. We&rsquo;ll install the 32-bit Wine package on it. The Wine application is a graphical application and hence requires access to the X server. Setting the environmet variable <code>DISPLAY=:0</code> instructs the application to access the local X server. The complete <code>Dockerfile</code> to build our Wine image looks as follows:</p>

<p><figure class='code'><figcaption><span>Dockerfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>FROM debian:wheezy
</span><span class='line'>RUN dpkg <span class="p">&amp;</span>ndash<span class="p">;</span>add-architecture i386
</span><span class='line'>RUN apt-get update
</span><span class='line'>RUN apt-get install <span class="p">&amp;</span>ndash<span class="p">;</span>no-install-recommends <span class="p">&amp;</span>ndash<span class="p">;</span>assume-yes wine
</span><span class='line'>ENV DISPLAY :0
</span></code></pre></td></tr></table></div></figure></p>

<p>You can kick off the build of the <code>wine1.4</code> image with:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker build <span class="p">&amp;</span>ndash<span class="p">;</span>rm -t wine1.4 .
</span></code></pre></td></tr></table></div></figure></p>

<p>After a minute or two the build is complete and the resulting image is stored locally on your Docker host. You can take a look using the <code>docker images</code> command:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker images <span class="p">|</span> grep wine1.4
</span><span class='line'>wine1.4                   latest              b300b8573303        About a minute ago   271.3 MB
</span></code></pre></td></tr></table></div></figure></p>

<h2>Running Wine within a Docker container</h2>

<p>To test our <code>wine1.4</code> Docker image, we&rsquo;ll run the <code>notepad</code> application which comes with Wine:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm wine1.4 wine <span class="p">&amp;</span>ldquo<span class="p">;</span>C:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\n</span>otepad.exe<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>wine: created the configuration directory <span class="p">&amp;</span>lsquo<span class="p">;</span>/root/.wine<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>err:systray:initialize_systray Could not create tray window
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.
</span><span class='line'>Application tried to create a window, but no driver could be loaded.
</span><span class='line'>Make sure that your X server is running and that <span class="nv">$DISPLAY</span> is <span class="nb">set </span>correctly.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>hellip<span class="p">;</span>.
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>notepad</code> application doesn&rsquo;t really start. From the generated error output we can see that our application is unable to access the X server. Well, there&rsquo;s no X server running inside the container. In order to allow the application running inside the container to access the X server running on the Docker host, we&rsquo;ll expose the host&rsquo;s X server UNIX domain socket inside the container. We can ask Docker to bind mount the <code>/tmp/.X11-unix/X0</code> UNIX socket to the same location inside the container using the <code>--volume</code> parameter:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm <span class="p">&amp;</span>ndash<span class="p">;</span>volume /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 wine1.4 wine <span class="p">&amp;</span>ldquo<span class="p">;</span>C:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\n</span>otepad.exe<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When we run the above command, Wine starts up successfully and the notepad application opens up. Inside the Docker container Wine runs as user root and starts from scratch with no existing configuration:</p>

<p><img class="center" src="/images/posts/wine.png"></p>

<p>We would like Wine running inside the Docker container to use the existing Wine configuration stored on the Docker host. Let&rsquo;s copy the existing Wine configuration on the host to a new directory which we&rsquo;ll in turn expose inside the Docker container:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>cp -a .wine .wine.docker
</span></code></pre></td></tr></table></div></figure></p>

<p>The <code>.wine.docker</code> directory can be exposed inside the Docker container  with the command-line parameter <code>--volume /home/anosek/.wine.docker:/home/anosek/.wine</code>. The Wine configuration in <code>.wine.docker</code> is in my case owned by the user <code>anosek</code>. We want Docker to run as user <code>anosek</code> instead of the default <code>root</code> user. In order to accomplish this, two additional parameters to the Docker <code>run</code> command are needed: <code>--volume /etc/passwd:/etc/passwd</code> and <code>--user anosek</code>. We&rsquo;re bind mounting the <code>/etc/passwd</code> file including the definition of user <code>anosek</code> inside the Docker container and asking Docker to run as user <code>anosek</code>.</p>

<p>The complete command to run Wine inside the Docker container as user <code>anosek</code> and using the existing Wine configuration found in the <code>/home/anosek/.wine.docker</code> directory on the host looks as follows:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>docker run <span class="p">&amp;</span>ndash<span class="p">;</span>rm <span class="p">&amp;</span>ndash<span class="p">;</span>volume /tmp/.X11-unix/X0:/tmp/.X11-unix/X0 <span class="p">&amp;</span>ndash<span class="p">;</span>volume /home/anosek/.wine.docker:/home/anosek/.wine <span class="p">&amp;</span>ndash<span class="p">;</span>volume /etc/passwd:/etc/passwd <span class="p">&amp;</span>ndash<span class="p">;</span>user anosek wine1.4 wine <span class="p">&amp;</span>ldquo<span class="p">;</span>C:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\n</span>otepad.exe<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Conclusion</h2>

<p>One can leverage the modern Docker technology to create a specific Wine environment on any Linux system. To achieve this a little bit of configuration is required, though. In case of Wine you might be better off using some of the specialized tools for Wine management. For instance, <a href="https://www.playonlinux.com/" title="PlayOnLinux">PlayOnLinux</a> can manage different versions of Wine as well as different prefixes (<code>WINEPREFIX</code> environment variable).</p>
]]></content>
  </entry>

</feed>
