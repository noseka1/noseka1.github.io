<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloud | Ales Nosek - The Software Practitioner]]></title>
  <link href="http://alesnosek.com/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://alesnosek.com/"/>
  <updated>2017-07-30T13:17:56-07:00</updated>
  <id>http://alesnosek.com/</id>
  <author>
    <name><![CDATA[Ales Nosek]]></name>

  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[Check-and-Set Operation and Transactions in Consul]]></title>
    <link href="http://alesnosek.com/blog/2017/07/25/check-and-set-operation-and-transactions-in-consul/"/>
    <updated>2017-07-25T23:07:07-07:00</updated>
    <id>http://alesnosek.com/blog/2017/07/25/check-and-set-operation-and-transactions-in-consul</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2017/07/15/first-look-at-the-key-value-store-in-consul/">previous</a> blog post, we were checking out the basic functionality of the key-value store in Consul. In this article, we will explore two of the more advanced features of Consul&rsquo;s key-value store, namely: Check-and-Set operation and transactions.</p>

<!-- more -->


<p><img class="right" src="/images/posts/consul_logo.png" width="200" height="300"></p>

<p>For our experimenting, let&rsquo;s start a one-node Consul cluster. The meaning of the individual command-line parameters was described in the <a href="/blog/2017/07/15/first-look-at-the-key-value-store-in-consul/">previous</a> article:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul agent -ui -server -data-dir mydata -advertise 127.0.0.1 -bootstrap-expect 1
</span></code></pre></td></tr></table></div></figure></p>

<p>In a short moment, the one-node Consul cluster should be up and ready. In the following, we&rsquo;re going to leverage Consul&rsquo;s <a href="https://www.consul.io/api/index.html">HTTP API</a> as not all the desired functionality is exposed via the command-line client. First, let&rsquo;s verify that the Consul cluster is working properly. For that, we&rsquo;ll ask it to provide us with a list of cluster nodes:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/catalog/nodes?pretty&quot;</span>&gt;http://localhost:8500/v1/catalog/nodes?pretty&lt;/a&gt;
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>ID<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>be79786e-749d-758c-2b65-824c1e956788<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Node<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>zihadlo<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Address<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>127.0.0.1<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Datacenter<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>dc1<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>TaggedAddresses<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>lan<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>127.0.0.1<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>wan<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>127.0.0.1<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Meta<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{}</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>CreateIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 5,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>ModifyIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 6
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The response from Consul contains information about the single node which is what we expected.</p>

<h2>Check-and-Set operation</h2>

<p>The purpose of the Check-and-Set operation is to avoid lost updates when multiple clients are simultaneously trying to update a value of the same key. Check-and-Set operation allows the update to happen only if the value has not been changed since the client last read it. If the current value does not match what the client previously read, the client will receive a conflicting update error message and will have to retry the read-update cycle.</p>

<p>The Check-and-Set operation can be used to implement a shared counter, semaphore or a distributed lock. Let&rsquo;s demonstrate how to create a basic distributed lock using the Check-and-Set operation. We&rsquo;ll start with creating a key that will represent our lock:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/kv/mylock&quot;</span>&gt;http://localhost:8500/v1/kv/mylock&lt;/a&gt; <span class="p">&amp;</span>ndash<span class="p">;</span>data <span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We created the <code>mylock</code> key holding an empty value. The empty value signalizes that the lock is not taken. Before trying to acquire the lock, each client has to check whether the lock is unlocked:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/kv/mylock?pretty&quot;</span>&gt;http://localhost:8500/v1/kv/mylock?pretty&lt;/a&gt;
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>LockIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>mylock<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: null,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>CreateIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 5638,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>ModifyIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 5638
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The value of the key in the Consul&rsquo;s response is still empty (null) which indicates that nobody is holding the lock. The second important item in the Consul&rsquo;s response is the <code>ModifyIndex</code>. Each key in the key-value store has its own <code>ModifyIndex</code>. The <code>ModifyIndex</code> is incremented by Consul each time the respective key is modified.</p>

<p>After verifying that the lock is not taken, the client can try to acquire it:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/kv/mylock?cas=5638&quot;</span>&gt;http://localhost:8500/v1/kv/mylock?cas<span class="o">=</span>5638&lt;/a&gt; <span class="p">&amp;</span>ndash<span class="p">;</span>data <span class="p">&amp;</span>ldquo<span class="p">;</span>client1<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The client is trying to update the value of the key <code>mylock</code>. The value of the <code>ModifyIndex</code> is passed along as the query parameter <code>cas=5638</code> (cas meaning Check-and-Set). Because the query parameter <code>cas=5638</code> is specified in the request, Consul will update the value of the <code>mylock</code> key only if the current <code>ModifyIndex</code> of the <code>mylock</code> key matches 5638. In other words, the key has not been updated since the client last read it. In our example, the update was successful and the client is now holding the lock. Note that an arbitrary non-empty value can be stored under the <code>mylock</code> key. We chose to use the identification of the client that has acquired the lock.</p>

<p>Let&rsquo;s pretend that at the same time a second client was competing for the lock. The <code>client2</code> was trying to acquire the lock by sending this request to Consul including the same query parameter <code>cas=5638</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/kv/mylock?cas=5638&quot;</span>&gt;http://localhost:8500/v1/kv/mylock?cas<span class="o">=</span>5638&lt;/a&gt; <span class="p">&amp;</span>ndash<span class="p">;</span>data <span class="p">&amp;</span>ldquo<span class="p">;</span>client2<span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consul&rsquo;s response sent to <code>client2</code> shows that Consul refused to update the <code>mylock</code> value as, in the meantime, this value has been modified. In order to check the current status of the lock, <code>client2</code> can follow up with a get request:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/kv/mylock?pretty&quot;</span>&gt;http://localhost:8500/v1/kv/mylock?pretty&lt;/a&gt;
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>LockIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>mylock<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">Y2xpZW50MQ</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>CreateIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 5638,
</span><span class='line'>        <span class="p">&amp;</span>ldquo<span class="p">;</span>ModifyIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 5801
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In Consul&rsquo;s response we can see that the lock is currently being held by <code>client1</code>. Until <code>client1</code> hasn&rsquo;t released the lock, <code>client2</code> must not try to acquire it. It can only periodically check the status of the lock and wait until it is released. To release the lock, <code>clent1</code> will simply set its value to an empty-value:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;http://localhost:8500/v1/kv/mylock&quot;</span>&gt;http://localhost:8500/v1/kv/mylock&lt;/a&gt; <span class="p">&amp;</span>ndash<span class="p">;</span>data <span class="p">&amp;</span>ldquo<span class="p">;&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>There are two more comments to add. First, the lock we implemented is purely advisory. All the clients working with the lock have to follow the same rules for the lock to function properly. Each client has to check that the lock was not acquired by somebody else before trying to acquire it. A misbehaved client can easily break the lock. Second, if the client holding the lock fails to release it (e.g. client crashes before releasing the lock), the lock will remain locked and no other client will be able to acquire it. More robust locks that are automatically released in the case of client failure can be implemented using the Consul&rsquo;s <a href="https://www.consul.io/docs/internals/sessions.html">sessions</a> along with the acquire and release operations.</p>

<h2>Leveraging the parameter cas=0</h2>

<p>In our lock implementation, we created an opened lock first and the lock acquisition comprised of two steps. In the first step, the client read the current <code>ModifyIndex</code> of the lock. In the second step, the client tried to update the lock while passing the <code>ModifyIndex</code> as a <code>cas</code> query parameter. When implementing the lock, we could have alternatively leveraged the fact that if the <code>cas</code> parameter is set to <code>0</code>, Consul will only create the key in the key-value store if it does not already exist. The state of our lock would then correspond to the existence or non-existence of the respective key in the key-value store. In order to acquire the lock, the client would send a request to create the key:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT localhost:8500/v1/kv/mykey2?cas<span class="o">=</span><span class="m">0</span> <span class="p">&amp;</span>ndash<span class="p">;</span>data <span class="p">&amp;</span>lsquo<span class="p">;</span>client1<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And to release the lock, the client would simply remove the respective key from the key-value store:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request DELETE localhost:8500/v1/kv/mykey2
</span><span class='line'><span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Transactions</h2>

<p><a href="https://www.consul.io/api/txn.html">Transactions</a> in Consul manage updates or selects of multiple keys within a single, atomic transaction. A list of operations that will be executed in the transaction is specified in the body of the HTTP request. First, let&rsquo;s create a list of operations and save it as a file <code>transaction1.txt</code>:</p>

<p><figure class='code'><figcaption><span>transaction1.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>KV<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Verb<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">set</span><span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>foo<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">MQ</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>KV<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Verb<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">set</span><span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>bar<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">Mg</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Our transaction doesn&rsquo;t do anything spectacular. It just creates two key-value pairs <code>foo=1</code> and <code>bar=2</code>. Let&rsquo;s submit the transaction to Consul:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT <span class="p">&amp;</span>lsquo<span class="p">;</span>localhost:8500/v1/txn?pretty<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ndash<span class="p">;</span>data @transaction1.txt
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>Results<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>KV<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>LockIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>foo<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>Flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: null,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>CreateIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 7267,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>ModifyIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 7267
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>KV<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>LockIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>bar<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>Flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: null,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>CreateIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 7267,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>ModifyIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 7267
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>,
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>Errors<span class="p">&amp;</span>rdquo<span class="p">;</span>: null
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The transaction completed successfully. In the response from Consul, we can find the list of results. The order of results corresponds to the order of operations that we submitted in our request. The value of the <code>ModifyIndex</code> <code>7267</code> is the same for both keys <code>foo</code> and <code>bar</code> as they were updated in the same transaction.</p>

<p>Next, let&rsquo;s see what happens if one of the operations in the transaction fails. To demonstrate this, we&rsquo;ll create a transaction that consists of two operations. The first operation updates the key <code>foo</code> to value <code>10</code>. The second operation updates the key <code>bar</code> to value <code>20</code> but only if the <code>ModifyIndex</code> of <code>bar</code> matches 100. We know that this condition is not fulfilled and the update should fail.</p>

<p><figure class='code'><figcaption><span>transaction2.txt </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>KV<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Verb<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nb">set</span><span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>foo<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">MTA</span><span class="o">=</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>KV<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Verb<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>cas<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Index<span class="p">&amp;</span>rdquo<span class="p">;</span>: 100,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>bar<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>      <span class="p">&amp;</span>ldquo<span class="p">;</span>Value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">MjA</span><span class="o">=</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Let&rsquo;s submit the transaction to Consul:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl <span class="p">&amp;</span>ndash<span class="p">;</span>request PUT <span class="p">&amp;</span>lsquo<span class="p">;</span>localhost:8500/v1/txn?pretty<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="p">&amp;</span>ndash<span class="p">;</span>data @transaction2.txt
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>Results<span class="p">&amp;</span>rdquo<span class="p">;</span>: null,
</span><span class='line'>    <span class="p">&amp;</span>ldquo<span class="p">;</span>Errors<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>OpIndex<span class="p">&amp;</span>rdquo<span class="p">;</span>: 1,
</span><span class='line'>            <span class="p">&amp;</span>ldquo<span class="p">;</span>What<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>failed to <span class="nb">set </span>key <span class="se">\&quot;</span>bar<span class="se">\&amp;</span>rdquo<span class="p">;</span>, index is stale<span class="err">&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The transaction failed, indeed. The returned error list contains all errors that occurred during the transaction processing. The operations that failed are denoted by the <code>OpIndex</code> which starts from value 0. In the example output we can see that the second operation in our transaction failed because of the stale index. Let&rsquo;s check the values of the keys <code>foo</code> and <code>bar</code> after the failed transaction:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get foo
</span><span class='line'>1
</span><span class='line'><span class="nv">$ </span>./consul kv get bar
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure></p>

<p>As expected, due to the failed udpate the entire transaction has been rolled back. Keys <code>foo</code> and <code>bar</code> retained their original values <code>1</code> and <code>2</code>.</p>

<h2>Conclusion</h2>

<p>In this blog post, we explored the Check-and-Set operation supported by Consul and used it to implement a simple distributed lock. In the second part of the article, we poked into the transaction capabilities of Consul.</p>

<p>And what about you? How is your experience with using Consul for distributed locking or leader election? Did you get a chance to use transactions? I would like to hear your experiences, feel free to use the comment section below.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[First Look at the Key-Value Store in Consul]]></title>
    <link href="http://alesnosek.com/blog/2017/07/15/first-look-at-the-key-value-store-in-consul/"/>
    <updated>2017-07-15T20:38:38-07:00</updated>
    <id>http://alesnosek.com/blog/2017/07/15/first-look-at-the-key-value-store-in-consul</id>
    <content type="html"><![CDATA[<p>If you are developing a distributed application that consists of multiple services, you might be thinking about how to manage the ever growing application configuration data. Instead of maintaining individual configuration files for each service, you can store all your configuration data in a key-value store. In this blog post we&rsquo;ll check out the key-value store in Consul.</p>

<!-- more -->


<p><img class="right" src="/images/posts/consul_logo.png" width="200" height="300"></p>

<p>Consul is an open-source product developed by <a href="https://www.hashicorp.com/">HashiCorp</a> and licensed under the <a href="https://github.com/hashicorp/consul/blob/master/LICENSE">MPL 2.0</a>. While Consul uses an open core business model, it comes with a great deal of functionality in its free edition. The top two features of Consul would be the service discovery combined with health checking and the key-value store functionality that we are going to review in this article. They both come handy when building distributed applications.</p>

<h2>Getting started</h2>

<p>HashiCorp products are known for its thorough documentation and the Consul&rsquo;s <a href="https://www.consul.io/docs/index.html">documenation</a> is not an exception.</p>

<p>What I like about Consul is its installation. Written in the Go language, Consul is distributed as a single statically linked binary. Download <a href="https://www.consul.io/downloads.html">links</a> for various platforms are provided. After unzipping the distribution archive you can directly run the <code>consul</code> executable.</p>

<p>Let&rsquo;s put togher a command-line to start the Consul cluster. Our test cluster consists of a single node (<code>-bootstrap-expect 1</code>). For a production deployment, you should be looking at a cluster of three or five Consul nodes that is able to survive node failures. We will make the Consul Web UI available at <code>http://localhost:8500</code> by appending the <code>-ui</code> parameter. Consul needs a location where it will persist its data. In our example, we instruct Consul to create a directory <code>mydata</code> and store all its data in this directory. After a bit of typing, the complete commmand-line to start the Consul cluster looks as follows:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul agent -ui -server -data-dir mydata -advertise 127.0.0.1 -bootstrap-expect 1
</span></code></pre></td></tr></table></div></figure></p>

<p>In several seconds the one-node Consul cluster is up and running:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">==</span>&gt; WARNING: BootstrapExpect Mode is specified as 1<span class="p">;</span> this is the same as Bootstrap mode.
</span><span class='line'><span class="o">==</span>&gt; WARNING: Bootstrap mode enabled! Do not <span class="nb">enable </span>unless <span class="nv">necessary</span>
</span><span class='line'><span class="o">==</span>&gt; Starting Consul agent<span class="p">&amp;</span>hellip<span class="p">;</span>
</span><span class='line'><span class="o">==</span>&gt; Consul agent running!
</span><span class='line'>           Version: <span class="p">&amp;</span>lsquo<span class="p">;</span>v0.8.5<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>           Node ID: <span class="p">&amp;</span>lsquo<span class="p">;</span>be79786e-749d-758c-2b65-824c1e956788<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>         Node name: <span class="p">&amp;</span>lsquo<span class="p">;</span>zihadlo<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>        Datacenter: <span class="p">&amp;</span>lsquo<span class="p">;</span>dc1<span class="p">&amp;</span>rsquo<span class="p">;</span>
</span><span class='line'>            Server: <span class="nb">true</span> <span class="o">(</span>bootstrap: <span class="nb">true</span><span class="o">)</span>
</span><span class='line'>       Client Addr: 127.0.0.1 <span class="o">(</span>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;HTTP:&quot;</span>&gt;HTTP:&lt;/a&gt; 8500, &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;HTTPS:&quot;</span>&gt;HTTPS:&lt;/a&gt; -1, DNS: 8600<span class="o">)</span>
</span><span class='line'>      Cluster Addr: 127.0.0.1 <span class="o">(</span>LAN: 8301, WAN: 8302<span class="o">)</span>
</span><span class='line'>    Gossip encrypt: <span class="nb">false</span>, RPC-TLS: <span class="nb">false</span>, TLS-Incoming: <span class="nb">false</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">==</span>&gt; Log data will now stream in as it occurs:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> raft: Initial configuration <span class="o">(</span><span class="nv">index</span><span class="o">=</span>1<span class="o">)</span>: <span class="o">[{</span>Suffrage:Voter ID:127.0.0.1:8300 Address:127.0.0.1:8300<span class="o">}]</span>
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> raft: Node at 127.0.0.1:8300 <span class="o">[</span>Follower<span class="o">]</span> entering Follower state <span class="o">(</span>Leader: <span class="s2">&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> serf: EventMemberJoin: zihadlo 127.0.0.1
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> consul: Adding LAN server zihadlo <span class="o">(</span>Addr: tcp/127.0.0.1:8300<span class="o">)</span> <span class="o">(</span>DC: dc1<span class="o">)</span>
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> serf: EventMemberJoin: zihadlo.dc1 127.0.0.1
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> consul: Handled member-join event <span class="k">for</span> server <span class="s2">&quot;zihadlo.dc1&quot;</span> in area <span class="s2">&quot;wan&quot;</span>
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> agent: Started DNS server 127.0.0.1:8600 <span class="o">(</span>udp<span class="o">)</span>
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> agent: Started DNS server 127.0.0.1:8600 <span class="o">(</span>tcp<span class="o">)</span>
</span><span class='line'>2017/07/15 20:37:57 <span class="o">[</span>INFO<span class="o">]</span> agent: Started HTTP server on 127.0.0.1:8500
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>WARN<span class="o">]</span> raft: Heartbeat timeout from <span class="s2">&quot;&quot;</span> reached, starting election
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> raft: Node at 127.0.0.1:8300 <span class="o">[</span>Candidate<span class="o">]</span> entering Candidate state in term 2
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> raft: Election won. Tally: 1
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> raft: Node at 127.0.0.1:8300 <span class="o">[</span>Leader<span class="o">]</span> entering Leader state
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> consul: cluster leadership acquired
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> consul: New leader elected: zihadlo
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> consul: member <span class="s1">&#39;zihadlo&#39;</span> joined, marking health alive
</span><span class='line'>2017/07/15 20:38:02 <span class="o">[</span>INFO<span class="o">]</span> agent: Synced service <span class="s1">&#39;consul&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>In the log output, Consul informs us that the Consul API is available at 127.0.0.1:8500. That&rsquo;s where the Consul client will connect to by default. In the following, you want to make sure that you&rsquo;re running the Consul commands on the same box as you started your Consul cluster.</p>

<p>The single <code>consul</code> binary provides the server as well as the client functionality. Let&rsquo;s list our current cluster members to verify that the client can connect to the cluster:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul members
</span><span class='line'>Node     Address         Status  Type    Build  Protocol  DC
</span><span class='line'>zihadlo  127.0.0.1:8301  alive   server  0.8.5  <span class="m">2</span>         dc1
</span></code></pre></td></tr></table></div></figure></p>

<h2>Basic CRUD with Consul</h2>

<p>In this section, we&rsquo;re going to exercise the basic Create, Read, Update and Delete functionality of the Consul key-store. First, let&rsquo;s store the value <code>12345</code> under the key <code>foo</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv put foo 12345
</span><span class='line'>Success! Data written to: foo
</span></code></pre></td></tr></table></div></figure></p>

<p>Great, the value is saved in the store. To retrieve the value under the key <code>foo</code> from Consul we can type:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get foo
</span><span class='line'>12345
</span></code></pre></td></tr></table></div></figure></p>

<p>By the way, Consul doesn&rsquo;t impose any restrictions on what kind of data you may store. Only the size of the data is limited to 512KB of data per key. It&rsquo;s up to your application, what data format you choose to use. For example, you can decide to store numbers, strings, JSON-formatted data or arbitrary binary data. For instance, when designing a centralized configuration management solution for your application, you have the flexibility of storing individual configuration options as key-value pairs or decide to save entire configuration files as values in Consul.</p>

<p>To replace the value, simply put a new value in Consul under the existing key:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv put foo bar
</span><span class='line'>Success! Data written to: foo
</span></code></pre></td></tr></table></div></figure></p>

<p>The value has been successfully updated as we can see:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get foo
</span><span class='line'>bar
</span></code></pre></td></tr></table></div></figure></p>

<p>To remove the value from the key-value store you can use the <code>delete</code> command:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv delete foo
</span><span class='line'>Success! Deleted key: foo
</span></code></pre></td></tr></table></div></figure></p>

<p>To verify that the value is really gone, try to retrieve it:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get foo
</span><span class='line'>Error! No key exists at: foo
</span></code></pre></td></tr></table></div></figure></p>

<h2>Hierarchical keys and prefix matching</h2>

<p>Keys in Consul can be organized in a hierarchy where different levels of the hierarchy are separated by the slash character (<code>/</code>). For example, you can create a database that holds the population numbers in different continents and countries (in millions of inhabitants) like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv put europe 743.1
</span><span class='line'><span class="nv">$ </span>./consul kv put europe/germany 82.67
</span><span class='line'><span class="nv">$ </span>./consul kv put europe/france 66.9
</span><span class='line'><span class="nv">$ </span>./consul kv put asia 4436
</span><span class='line'><span class="nv">$ </span>./consul kv put asia/india 1324
</span></code></pre></td></tr></table></div></figure></p>

<p>Now that you organized your keys hierarchically, you can use the Consul&rsquo;s prefix matching to discover the keys on the single level of hierarchy. For example, to retrive the keys with the prefix <code>e</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get -recurse -keys e
</span><span class='line'>europe
</span><span class='line'>europe/
</span></code></pre></td></tr></table></div></figure></p>

<p>Prefix matching can be used to retrieve the values, too. For example, to retrieve the population numbers in Europe, you can type:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get -recurse e
</span><span class='line'>europe:743.1
</span><span class='line'>europe/france:66.9
</span><span class='line'>europe/germany:82.67
</span></code></pre></td></tr></table></div></figure></p>

<p>Note that when retrieving the keys recursively, only the keys on the single level of hierarchy were returned whereas when retrieving the values recursively, values on all the nested levels of hierarchy were returned.</p>

<p>To obtain the population numbers for the European countries, you can append a slash to the keys name (<code>europe/</code>):</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv get -recurse europe/
</span><span class='line'>europe/france:66.9
</span><span class='line'>europe/germany:82.67
</span></code></pre></td></tr></table></div></figure></p>

<p>And if you are interested only in the European countries that start with letter <code>g</code>, you can use the prefix <code>europe/g</code>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>./consul kv get -recurse europe/g
</span><span class='line'>europe/germany:82.67
</span></code></pre></td></tr></table></div></figure></p>

<h2>Export/import of key-value pairs</h2>

<p>Another useful feaure of the Consul&rsquo;s key-value store is the bulk export and import of key-value pairs. To export the entire key-value store database, you can type:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv <span class="nb">export</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>asia<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">NDQzNg</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>asia/india<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">MTMyNA</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>europe<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">NzQzLjE</span><span class="o">=</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>europe/france<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">NjYuOQ</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>europe/germany<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">ODIuNjc</span><span class="o">=</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consul exports the key-value pairs into the JSON format which is currently the only supported format. In the sample output, you can see that all the values are <a href="https://en.wikipedia.org/wiki/Base64">base64</a> encoded. The base64 encoding is commonly used in the text-based formats like JSON and XML to allow embedding of binary data.</p>

<p>You can export a subset of the key-value pairs by specifying the prefix. For instance, to export the data pertaining Europe, you can speficy the <code>europe</code> prefix:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./consul kv <span class="nb">export </span>europe
</span><span class='line'><span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>europe<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">NzQzLjE</span><span class="o">=</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>europe/france<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">NjYuOQ</span><span class="o">==</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>key<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span>europe/germany<span class="p">&amp;</span>rdquo<span class="p">;</span>,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>flags<span class="p">&amp;</span>rdquo<span class="p">;</span>: 0,
</span><span class='line'>                <span class="p">&amp;</span>ldquo<span class="p">;</span>value<span class="p">&amp;</span>rdquo<span class="p">;</span>: <span class="p">&amp;</span>ldquo<span class="p">;</span><span class="nv">ODIuNjc</span><span class="o">=</span><span class="p">&amp;</span>rdquo<span class="p">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>To import the JSON-formatted data back to the Consul key-value store, you can use the command <code>./consul kv import</code>.</p>

<h2>Web UI</h2>

<p>Besides the commmand-line client, you can access Consul through its beautiful Web interface. Point your web browser to <a href="http://localhost:8500">http://localhost:8500</a>.</p>

<p><img class="right" src="/images/posts/consul_ui.png"></p>

<h2>Conclusion</h2>

<p>In this blog post, we reviewed the basics of the key-value store in Consul. There are many other cool features of the key-value store that we didn&rsquo;t cover like atomic key updates using Check-and-Set operations, <a href="https://www.consul.io/api/txn.html">transactions</a>, <a href="https://www.consul.io/docs/commands/lock.html">locks</a> or <a href="https://www.consul.io/docs/commands/watch.html">watches</a>. Also, I recommend to you to take a look at the Consul&rsquo;s great <a href="https://www.consul.io/api/index.html">RESTful API</a> that allows you to interact with Consul programatically.</p>

<p>If you&rsquo;re looking for a key-value store that would enhance your distributed application, Consul is definitely a candidate to consider. Besides that, Consul will be ready when you later on realize that service discovery is what you need to address next.</p>

<p>Are you considering or already using Consul at your company? I would like to hear your experiences, please leave your comments below.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Acing the Red Hat OpenStack Certification Exams]]></title>
    <link href="http://alesnosek.com/blog/2017/06/26/acing-the-red-hat-openstack-certification-exams/"/>
    <updated>2017-06-26T19:54:19-07:00</updated>
    <id>http://alesnosek.com/blog/2017/06/26/acing-the-red-hat-openstack-certification-exams</id>
    <content type="html"><![CDATA[<p>Recently I passed two OpenStack certification exams from Red Hat: <a href="https://www.redhat.com/en/services/training/ex210-red-hat-certified-system-administrator-red-hat-openstack-exam">EX210 Red Hat Certified System Administrator in Red Hat OpenStack exam</a> and the consecutive <a href="https://www.redhat.com/en/services/training/ex310-red-hat-certified-engineer-red-hat-openstack-exam">EX310 Red Hat Certified Engineer in Red Hat OpenStack exam</a>. In this blog post, I&rsquo;m going to share how I - as a software practitioner - got the job done.</p>

<!-- more -->


<p><img class="right" src="/images/posts/redhat_openstack.jpg" width="250" height="300"></p>

<p>All exams in the Red Hat certification program are purely practical. The first exam EX210 focuses on deployment and administration of OpenStack which includes installation of OpenStack using the Red Hat OpenStack Platform Director, creating OpenStack users, projects, managing user roles, uploading images into Glance, creating Cinder volumes, adding Neutron networks and launching stacks using Heat. The second EX310 exam includes deploying the Ceph storage on multiple nodes, integrating Ceph with OpenStack Nova, Glance and Cinder and configuring various Neutron resources like networks, load balancers and routers.</p>

<p>To prepare for the exams, I used the online courses Red Hat OpenStack Administration I, II, III (<a href="https://www.redhat.com/en/services/training/cl110-red-hat-openstack-administration-i">CL110</a>, <a href="https://www.redhat.com/en/services/training/cl210-red-hat-openstack-administration-ii">CL210</a>, <a href="https://www.redhat.com/en/services/training/cl310-red-hat-openstack-administration-iii">CL310</a>) that are included in my <a href="https://www.redhat.com/en/services/training/learning-subscription">Red Hat Learning Subscription</a>. They covered the exam requirements very well.</p>

<p>I encountered a glitch right when scheduling the exam. As I realized, the OpenStack exams EX210 and EX310 are offered in the selected exam locations only and my San Diego location, where I so far completed all of my Red Hat exams, was not included. Surprise, surprise! However, as I was already planning to visit Prague during my upcoming vacation, I decided to take my exams in Prague, for Prague - as a city of the kings - had the EX210 and EX310 exams available.</p>

<p>As the two OpenStack exams partially overlap, it was a good idea to be preparing for both of them at the same time. I even chose to take the exams on the two consecutive days Thursday and Friday. And how did I score? Well, I made 300 out of 300 points in each of the exams. It could not be any better and I was glad that the sometimes painfully gained experience with OpenStack made itself apparent.</p>

<p>The updated list of my certifications can be found on the <a href="https://www.redhat.com/rhtapps/certification/verify/?certId=160-216-727">Verify a Red Hat Certified Professional</a> website.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Passed the OpenShift EX280 certification!]]></title>
    <link href="http://alesnosek.com/blog/2017/04/04/passed-the-openshift-ex280-certification/"/>
    <updated>2017-04-04T23:00:22-07:00</updated>
    <id>http://alesnosek.com/blog/2017/04/04/passed-the-openshift-ex280-certification</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been more than half a year since I started working with OpenShift. Today I successfully passed the <a href="https://www.redhat.com/en/services/training/ex280-red-hat-certificate-expertise-platform-service-exam">EX280 Red Hat Certificate of Expertise in Platform-as-a-Service exam</a> and earned a certificate. I&rsquo;m going to share a few details about the exam in this blog post.</p>

<!-- more -->


<p>Similar to the RHCSA/RHCE exams that I <a href="/blog/2016/11/07/rhcsa-slash-rhce-exam-experience/">completed</a> some time ago, the EX280 OpenShift exam is also purely practical. You will have to install OpenShift 3.0, configure it and deploy multiple containerized applications on it.</p>

<p>For preparation I used the <a href="https://www.redhat.com/en/services/training/do280-openshift-enterprise-administration">DO280 OpenShift Enterprise Administration</a> materials that were included in my <a href="https://www.redhat.com/en/services/training/learning-subscription">Red Hat Learning Subscription</a>. I practiced the provided lab exercices over and over again until I gained a good confidence.</p>

<p><img class="right" src="/images/posts/openshift_container_platform.png" width="250" height="300"></p>

<p>The exam took three hours and I have to say that I was very busy typing the whole time. Despite of my best effort I ran out of time with three tasks left untouched. How happy I was when I received my exam results. Passing score for the exam was 210 points. I made it through with 225 points.</p>

<p>I truly enjoy the Red Hat certification program and want to keep growing my collection of certificates. The list of my current certifications can be found on the <a href="https://www.redhat.com/rhtapps/certification/verify/?certId=160-216-727">Verify a Red Hat Certified Professional</a> website.</p>
]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[An Introduction to Building on OpenShift]]></title>
    <link href="http://alesnosek.com/blog/2017/03/19/an-introduction-to-building-on-openshift/"/>
    <updated>2017-03-19T10:48:32-07:00</updated>
    <id>http://alesnosek.com/blog/2017/03/19/an-introduction-to-building-on-openshift</id>
    <content type="html"><![CDATA[<p>For years a Jenkins server has been driving the software builds in our company. Some time ago, we deployed an OpenShift cluster. The primary purpose of our OpenShift cluster was to support the efforts of dockerizing our software products. However, as OpeShift is a complete PaaS solution we started thinking about leveraging OpenShift for software builds, too. In this blog post I&rsquo;d like to share what we learned about building on OpenShift so far.</p>

<!-- more -->


<p>Before we begin talking about OpenShift, let&rsquo;s briefly discuss our current build environment. In the center of our build environment there is a Jenkins server. In Jenkins, we maintain numerous jobs to build our software, run automated tests, drive various devops tasks and much more. Jenkins is our central place from where the automated processes are started and monitored. As Jenkins is greatly extensible via plugins, we were able to easily integrate Jenkins with other tools, too.</p>

<h2>Building the OpenShift way</h2>

<p><img class="right" src="/images/posts/openshift_logo.gif" width="200" height="200"></p>

<p>In OpenShift, one has to create a <em>BuildConfig</em> resource to describe the <a href="https://docs.openshift.org/latest/dev_guide/builds/index.html">build process</a>. The BuildConfig resource in OpenShift is roughly equivalent to a job definition in Jenkins. When creating a BuildConfig resource, a build strategy has to be chosen. The build strategy resembles a job type in Jenkins. Currently, there are four build strategies available in OpenShift:</p>

<p><strong>Source-to-Image strategy</strong>. Allows you to create a container image starting from the application source code. During the build process, the source code is downloaded into a container and compiled there. The finished binary artifacts are installed into the container. The complete container image is then pushed into the Docker registry from where it can be deployed as an application on OpenShift.</p>

<p><strong>Docker strategy</strong>. The input of the build process is a Dockerfile. OpenShift will execute a Docker build using the provided Dockerfile and upload the resulting image into the Docker registry from where it can be deployed.</p>

<p><strong>Custom strategy</strong>. Custom strategy could be compared to a free style job in Jenkins. The outcome of the build doesn&rsquo;t have to be a Docker image. Instead, the custom strategy allows you to create JARs, tarballs, RPMs or other artifacts which you have to upload to the repository of your choice by the end of the build.</p>

<p><strong>Pipeline strategy</strong>. In OpenShift 3.3, a new build strategy was introduced called <em>Pipeline</em>. This strategy doesn&rsquo;t really build anything but enables you to implement workflows on OpenShift. The great article <a href="https://blog.openshift.com/openshift-3-3-pipelines-deep-dive/">OpenShift 3.3 Pipelines - Deep Dive</a> describes how the Pipeline strategy works. In summary, you can create a BuildConfig in OpenShift that contains a definition of a Jenkins pipeline (using the Groovy DSL language). Based on this definition, OpenShift will create a pipeline job in Jenkins and execute it. Among other things, the Jenkins job can trigger a build on OpenShift, verify that the build succeeded and trigger a deployment. This approach allows OpenShift to leverage Jenkins pipelines to orchestrate a more involved CI/CD workflow possibly encompassing a conditional execution of multiple OpenShift builds and deployments.</p>

<p>An alternative to using the Pipeline strategy in OpenShift would be defining the pipeline job directly in Jenkins. With the <a href="https://plugins.jenkins.io/openshift-pipeline">OpenShift pipeline plugin</a> installed, one can trigger OpenShift operations from within the pipeline job.</p>

<p>As I didn&rsquo;t really work with the OpenShift strategies much I&rsquo;m not going to elaborate any further. Instead, in the next section, I&rsquo;m going to mention two Jenkins plugins that we are successfully using to run builds on OpenShift.</p>

<h2>Builds on Openshift driven by Jenkins</h2>

<p><img class="right" src="/images/posts/jenkins_logo.png" width="200" height="200"></p>

<p>There are two Jenkins plugins that can leverage OpenShift containers as build slaves:</p>

<p><strong><a href="https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin">Swarm plugin</a></strong>. The Swarm plugin consists of two parts: a Jenkins plugin and a CLI client. Jenkins plugin exposes an endpoint where the CLI clients can register themselves. A CLI client acts as a Jenkins slave. It runs indefinitely within a Docker container and provides Jenkins with a configurable number of build executors. While the plugin is called a Swarm plugin it doesn&rsquo;t really need any Swarm orchestration. It can happily run in a Docker container on OpenShift.</p>

<p><strong><a href="https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin">Kubernetes plugin</a></strong>. Works perfectly with OpenShift. In contrast to the Swarm plugin, Kubernetes plugin spins up a new Docker slave for each job on the fly and destroys it as soon as the job has finished running.</p>

<p>Because the Jenkins workspace is created inside of the container, it will be deleted as soon as the Docker container is terminated. If you&rsquo;d like to reuse the same workspace for subsequent builds, I&rsquo;d like to offer you two options how to create persistent workspaces:</p>

<ol>
<li><p>You can attach a volume of type <em>hostPath</em> to your slave pods and place your workspace on that volume. At the same time you have to speficy a <em>nodeSelector</em> on your slave pods that would instruct OpenShift to schedule all your slave pods onto the same OpenShift node. With this approach the Jenkins slave can access its workspace on the local storage. Unfortunately, all the slaves that need to share a workspace have to run on the same OpenShift node which can get overloaded.</p></li>
<li><p>You can attach a volume with the <em>ReadWriteMany</em> capability to your slave pods and place your workspace on this volume. Eligible volume types are NFS, GlusterFS or CephFS. Using this method a Jenkins slave running on any node in the cluster can access the shared workspace. The downside is that the access is over the network and hence slower than an access to the local storage.</p></li>
</ol>


<h2>Conclusion</h2>

<p>In the this blog post we reviewed different approaches how to leverage an OpenShift cluster for software builds. On one hand, builds can be defined within OpenShift by creating the BuildConfig resources. This approach might be less flexible than using a full-fledged build server like Jenkins, however, one can be sure that the builds will work on any OpenShift cluster including the public cloud. On the other hand, we have seen that in an environment where Jenkins is already the king, we can leverage the Swarm or Kubernetes plugin to allow Jenkins to schedule build jobs on OpenShift.</p>
]]></content>
  </entry>

</feed>
